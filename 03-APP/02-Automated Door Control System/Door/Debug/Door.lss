
Door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  000045b4  00004648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800136  00800136  0000471e  2**0
                  ALLOC
  3 .stab         00004098  00000000  00000000  00004720  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000170d  00000000  00000000  000087b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a025  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e27c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ef4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__vector_4>
      14:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__vector_5>
      18:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__vector_6>
      1c:	0c 94 97 1c 	jmp	0x392e	; 0x392e <__vector_7>
      20:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__vector_8>
      24:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__vector_9>
      28:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__vector_10>
      2c:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a9 20 	call	0x4152	; 0x4152 <main>
      8a:	0c 94 d8 22 	jmp	0x45b0	; 0x45b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 22 	jmp	0x4542	; 0x4542 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ef       	ldi	r26, 0xF4	; 244
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 22 	jmp	0x4542	; 0x4542 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ef       	ldi	r24, 0xF4	; 244
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 ef       	ldi	r22, 0xF4	; 244
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cd 22 	jmp	0x459a	; 0x459a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_config.h"

/*********************					 APIS PROTOTYPES 					************************/
/*		Init 	 */
void DIO_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
#if ((PORTA_PIN0_DIR == 0 || PORTA_PIN0_DIR == 1) && (PORTA_PIN1_DIR == 0 || PORTA_PIN1_DIR == 1) && \
	 (PORTA_PIN2_DIR == 0 || PORTA_PIN2_DIR == 1) && (PORTA_PIN3_DIR == 0 || PORTA_PIN3_DIR == 1) && \
	 (PORTA_PIN4_DIR == 0 || PORTA_PIN4_DIR == 1) && (PORTA_PIN5_DIR == 0 || PORTA_PIN5_DIR == 1) && \
	 (PORTA_PIN6_DIR == 0 || PORTA_PIN6_DIR == 1) && (PORTA_PIN7_DIR == 0 || PORTA_PIN7_DIR == 1))

	DDRA = PORTA_DIR;
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8c ee       	ldi	r24, 0xEC	; 236
     cac:	80 83       	st	Z, r24
#if    ((PORTB_PIN0_DIR == 0 || PORTB_PIN0_DIR == 1) && (PORTB_PIN1_DIR == 0 || PORTB_PIN1_DIR == 1) && \
		(PORTB_PIN2_DIR == 0 || PORTB_PIN2_DIR == 1) && (PORTB_PIN3_DIR == 0 || PORTB_PIN3_DIR == 1) && \
		(PORTB_PIN4_DIR == 0 || PORTB_PIN4_DIR == 1) && (PORTB_PIN5_DIR == 0 || PORTB_PIN5_DIR == 1) && \
		(PORTB_PIN6_DIR == 0 || PORTB_PIN6_DIR == 1) && (PORTB_PIN7_DIR == 0 || PORTB_PIN7_DIR == 1))

	DDRB = PORTB_DIR;
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
#if    ((PORTC_PIN0_DIR == 0 || PORTC_PIN0_DIR == 1) && (PORTC_PIN1_DIR == 0 || PORTC_PIN1_DIR == 1) && \
		(PORTC_PIN2_DIR == 0 || PORTC_PIN2_DIR == 1) && (PORTC_PIN3_DIR == 0 || PORTC_PIN3_DIR == 1) && \
		(PORTC_PIN4_DIR == 0 || PORTC_PIN4_DIR == 1) && (PORTC_PIN5_DIR == 0 || PORTC_PIN5_DIR == 1) && \
		(PORTC_PIN6_DIR == 0 || PORTC_PIN6_DIR == 1) && (PORTC_PIN7_DIR == 0 || PORTC_PIN7_DIR == 1))

	DDRC = PORTC_DIR;
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	80 83       	st	Z, r24
#if    ((PORTD_PIN0_DIR == 0 || PORTD_PIN0_DIR == 1) && (PORTD_PIN1_DIR == 0 || PORTD_PIN1_DIR == 1) && \
		(PORTD_PIN2_DIR == 0 || PORTD_PIN2_DIR == 1) && (PORTD_PIN3_DIR == 0 || PORTD_PIN3_DIR == 1) && \
		(PORTD_PIN4_DIR == 0 || PORTD_PIN4_DIR == 1) && (PORTD_PIN5_DIR == 0 || PORTD_PIN5_DIR == 1) && \
		(PORTD_PIN6_DIR == 0 || PORTD_PIN6_DIR == 1) && (PORTD_PIN7_DIR == 0 || PORTD_PIN7_DIR == 1))

	DDRD = PORTD_DIR;
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	80 83       	st	Z, r24
#if    ((PORTA_PIN0_INITIAL_VALUE == 0 || PORTA_PIN0_INITIAL_VALUE == 1) && (PORTA_PIN1_INITIAL_VALUE == 0 || PORTA_PIN1_INITIAL_VALUE == 1) && \
		(PORTA_PIN2_INITIAL_VALUE == 0 || PORTA_PIN2_INITIAL_VALUE == 1) && (PORTA_PIN3_INITIAL_VALUE == 0 || PORTA_PIN3_INITIAL_VALUE == 1) && \
		(PORTA_PIN4_INITIAL_VALUE == 0 || PORTA_PIN4_INITIAL_VALUE == 1) && (PORTA_PIN5_INITIAL_VALUE == 0 || PORTA_PIN5_INITIAL_VALUE == 1) && \
		(PORTA_PIN6_INITIAL_VALUE == 0 || PORTA_PIN6_INITIAL_VALUE == 1) && (PORTA_PIN7_INITIAL_VALUE == 0 || PORTA_PIN7_INITIAL_VALUE == 1))

	PORTA = PORTA_INITIAL_VALUE;
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	80 83       	st	Z, r24
#if    ((PORTB_PIN0_INITIAL_VALUE == 0 || PORTB_PIN0_INITIAL_VALUE == 1) && (PORTB_PIN1_INITIAL_VALUE == 0 || PORTB_PIN1_INITIAL_VALUE == 1) && \
		(PORTB_PIN2_INITIAL_VALUE == 0 || PORTB_PIN2_INITIAL_VALUE == 1) && (PORTB_PIN3_INITIAL_VALUE == 0 || PORTB_PIN3_INITIAL_VALUE == 1) && \
		(PORTB_PIN4_INITIAL_VALUE == 0 || PORTB_PIN4_INITIAL_VALUE == 1) && (PORTB_PIN5_INITIAL_VALUE == 0 || PORTB_PIN5_INITIAL_VALUE == 1) && \
		(PORTB_PIN6_INITIAL_VALUE == 0 || PORTB_PIN6_INITIAL_VALUE == 1) && (PORTB_PIN7_INITIAL_VALUE == 0 || PORTB_PIN7_INITIAL_VALUE == 1))

	PORTB = PORTB_INITIAL_VALUE;
     cce:	e8 e3       	ldi	r30, 0x38	; 56
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1
#if    ((PORTC_PIN0_INITIAL_VALUE == 0 || PORTC_PIN0_INITIAL_VALUE == 1) && (PORTC_PIN1_INITIAL_VALUE == 0 || PORTC_PIN1_INITIAL_VALUE == 1) && \
		(PORTC_PIN2_INITIAL_VALUE == 0 || PORTC_PIN2_INITIAL_VALUE == 1) && (PORTC_PIN3_INITIAL_VALUE == 0 || PORTC_PIN3_INITIAL_VALUE == 1) && \
		(PORTC_PIN4_INITIAL_VALUE == 0 || PORTC_PIN4_INITIAL_VALUE == 1) && (PORTC_PIN5_INITIAL_VALUE == 0 || PORTC_PIN5_INITIAL_VALUE == 1) && \
		(PORTC_PIN6_INITIAL_VALUE == 0 || PORTC_PIN6_INITIAL_VALUE == 1) && (PORTC_PIN7_INITIAL_VALUE == 0 || PORTC_PIN7_INITIAL_VALUE == 1))

	PORTC = PORTC_INITIAL_VALUE;
     cd4:	e5 e3       	ldi	r30, 0x35	; 53
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	80 83       	st	Z, r24
#if    ((PORTD_PIN0_INITIAL_VALUE == 0 || PORTD_PIN0_INITIAL_VALUE == 1) && (PORTD_PIN1_INITIAL_VALUE == 0 || PORTD_PIN1_INITIAL_VALUE == 1) && \
		(PORTD_PIN2_INITIAL_VALUE == 0 || PORTD_PIN2_INITIAL_VALUE == 1) && (PORTD_PIN3_INITIAL_VALUE == 0 || PORTD_PIN3_INITIAL_VALUE == 1) && \
		(PORTD_PIN4_INITIAL_VALUE == 0 || PORTD_PIN4_INITIAL_VALUE == 1) && (PORTD_PIN5_INITIAL_VALUE == 0 || PORTD_PIN5_INITIAL_VALUE == 1) && \
		(PORTD_PIN6_INITIAL_VALUE == 0 || PORTD_PIN6_INITIAL_VALUE == 1) && (PORTD_PIN7_INITIAL_VALUE == 0 || PORTD_PIN7_INITIAL_VALUE == 1))

	PORTD = PORTD_INITIAL_VALUE;
     cdc:	e2 e3       	ldi	r30, 0x32	; 50
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 ee       	ldi	r24, 0xE0	; 224
     ce2:	80 83       	st	Z, r24
#else
#error "Wrong input for PortD value pins"
#endif

}
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <DIO_u8SetPinDirection>:

/* Pin Apis */
u8 DIO_u8SetPinDirection            (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <DIO_u8SetPinDirection+0x6>
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <DIO_u8SetPinDirection+0x8>
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <DIO_u8SetPinDirection+0xa>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	8a 83       	std	Y+2, r24	; 0x02
     cfa:	6b 83       	std	Y+3, r22	; 0x03
     cfc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
     cfe:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	08 f0       	brcs	.+2      	; 0xd08 <DIO_u8SetPinDirection+0x1e>
     d06:	f1 c0       	rjmp	.+482    	; 0xeea <DIO_u8SetPinDirection+0x200>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	88 30       	cpi	r24, 0x08	; 8
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <DIO_u8SetPinDirection+0x26>
     d0e:	ea c0       	rjmp	.+468    	; 0xee4 <DIO_u8SetPinDirection+0x1fa>
		{
			switch(copy_u8PortId)
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3e 83       	std	Y+6, r19	; 0x06
     d18:	2d 83       	std	Y+5, r18	; 0x05
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_u8SetPinDirection+0x3c>
     d24:	49 c0       	rjmp	.+146    	; 0xdb8 <DIO_u8SetPinDirection+0xce>
     d26:	2d 81       	ldd	r18, Y+5	; 0x05
     d28:	3e 81       	ldd	r19, Y+6	; 0x06
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	2c f4       	brge	.+10     	; 0xd3a <DIO_u8SetPinDirection+0x50>
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	71 f0       	breq	.+28     	; 0xd54 <DIO_u8SetPinDirection+0x6a>
     d38:	da c0       	rjmp	.+436    	; 0xeee <DIO_u8SetPinDirection+0x204>
     d3a:	2d 81       	ldd	r18, Y+5	; 0x05
     d3c:	3e 81       	ldd	r19, Y+6	; 0x06
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_u8SetPinDirection+0x5c>
     d44:	6b c0       	rjmp	.+214    	; 0xe1c <DIO_u8SetPinDirection+0x132>
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <DIO_u8SetPinDirection+0x68>
     d50:	97 c0       	rjmp	.+302    	; 0xe80 <DIO_u8SetPinDirection+0x196>
     d52:	cd c0       	rjmp	.+410    	; 0xeee <DIO_u8SetPinDirection+0x204>
			{
			case DIO_PORTA: if(copy_u8PinDirection == DIO_PIN_OUTPUT)
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	a1 f4       	brne	.+40     	; 0xd82 <DIO_u8SetPinDirection+0x98>
			{
				SET_BIT(DDRA, copy_u8PinId);
     d5a:	aa e3       	ldi	r26, 0x3A	; 58
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ea e3       	ldi	r30, 0x3A	; 58
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_u8SetPinDirection+0x8e>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_u8SetPinDirection+0x8a>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	b6 c0       	rjmp	.+364    	; 0xeee <DIO_u8SetPinDirection+0x204>
			}
			else if(copy_u8PinDirection == DIO_PIN_INPUT)
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	88 23       	and	r24, r24
     d86:	a9 f4       	brne	.+42     	; 0xdb2 <DIO_u8SetPinDirection+0xc8>
			{
				CLR_BIT(DDRA, copy_u8PinId);
     d88:	aa e3       	ldi	r26, 0x3A	; 58
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ea e3       	ldi	r30, 0x3A	; 58
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_u8SetPinDirection+0xbc>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_u8SetPinDirection+0xb8>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	9e c0       	rjmp	.+316    	; 0xeee <DIO_u8SetPinDirection+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_DIR;
     db2:	8d e0       	ldi	r24, 0x0D	; 13
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	9b c0       	rjmp	.+310    	; 0xeee <DIO_u8SetPinDirection+0x204>

			break;

			case DIO_PORTB: if(copy_u8PinDirection == DIO_PIN_OUTPUT)
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	a1 f4       	brne	.+40     	; 0xde6 <DIO_u8SetPinDirection+0xfc>
			{
				SET_BIT(DDRB, copy_u8PinId);
     dbe:	a7 e3       	ldi	r26, 0x37	; 55
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_u8SetPinDirection+0xf2>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_u8SetPinDirection+0xee>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	84 c0       	rjmp	.+264    	; 0xeee <DIO_u8SetPinDirection+0x204>
			}
			else if(copy_u8PinDirection == DIO_PIN_INPUT)
     de6:	8c 81       	ldd	r24, Y+4	; 0x04
     de8:	88 23       	and	r24, r24
     dea:	a9 f4       	brne	.+42     	; 0xe16 <DIO_u8SetPinDirection+0x12c>
			{
				CLR_BIT(DDRB, copy_u8PinId);
     dec:	a7 e3       	ldi	r26, 0x37	; 55
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e7 e3       	ldi	r30, 0x37	; 55
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_u8SetPinDirection+0x120>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_u8SetPinDirection+0x11c>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	6c c0       	rjmp	.+216    	; 0xeee <DIO_u8SetPinDirection+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_DIR;
     e16:	8d e0       	ldi	r24, 0x0D	; 13
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	69 c0       	rjmp	.+210    	; 0xeee <DIO_u8SetPinDirection+0x204>

			break;

			case DIO_PORTC: if(copy_u8PinDirection == DIO_PIN_OUTPUT)
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	a1 f4       	brne	.+40     	; 0xe4a <DIO_u8SetPinDirection+0x160>
			{
				SET_BIT(DDRC, copy_u8PinId);
     e22:	a4 e3       	ldi	r26, 0x34	; 52
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e4 e3       	ldi	r30, 0x34	; 52
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_u8SetPinDirection+0x156>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_u8SetPinDirection+0x152>
     e44:	84 2b       	or	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	52 c0       	rjmp	.+164    	; 0xeee <DIO_u8SetPinDirection+0x204>
			}
			else if(copy_u8PinDirection == DIO_PIN_INPUT)
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	88 23       	and	r24, r24
     e4e:	a9 f4       	brne	.+42     	; 0xe7a <DIO_u8SetPinDirection+0x190>
			{
				CLR_BIT(DDRC, copy_u8PinId);
     e50:	a4 e3       	ldi	r26, 0x34	; 52
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e4 e3       	ldi	r30, 0x34	; 52
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_u8SetPinDirection+0x184>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_u8SetPinDirection+0x180>
     e72:	80 95       	com	r24
     e74:	84 23       	and	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	3a c0       	rjmp	.+116    	; 0xeee <DIO_u8SetPinDirection+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_DIR;
     e7a:	8d e0       	ldi	r24, 0x0D	; 13
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	37 c0       	rjmp	.+110    	; 0xeee <DIO_u8SetPinDirection+0x204>

			break;

			case DIO_PORTD: if(copy_u8PinDirection == DIO_PIN_OUTPUT)
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	a1 f4       	brne	.+40     	; 0xeae <DIO_u8SetPinDirection+0x1c4>
			{
				SET_BIT(DDRD, copy_u8PinId);
     e86:	a1 e3       	ldi	r26, 0x31	; 49
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e3       	ldi	r30, 0x31	; 49
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_u8SetPinDirection+0x1ba>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_u8SetPinDirection+0x1b6>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	20 c0       	rjmp	.+64     	; 0xeee <DIO_u8SetPinDirection+0x204>
			}
			else if(copy_u8PinDirection == DIO_PIN_INPUT)
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	88 23       	and	r24, r24
     eb2:	a9 f4       	brne	.+42     	; 0xede <DIO_u8SetPinDirection+0x1f4>
			{
				CLR_BIT(DDRD, copy_u8PinId);
     eb4:	a1 e3       	ldi	r26, 0x31	; 49
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e1 e3       	ldi	r30, 0x31	; 49
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_u8SetPinDirection+0x1e8>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_u8SetPinDirection+0x1e4>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	08 c0       	rjmp	.+16     	; 0xeee <DIO_u8SetPinDirection+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_DIR;
     ede:	8d e0       	ldi	r24, 0x0D	; 13
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <DIO_u8SetPinDirection+0x204>


			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
     ee4:	8a e0       	ldi	r24, 0x0A	; 10
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_u8SetPinDirection+0x204>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     eea:	8b e0       	ldi	r24, 0x0B	; 11
     eec:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
     eee:	89 81       	ldd	r24, Y+1	; 0x01

}
     ef0:	26 96       	adiw	r28, 0x06	; 6
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue                (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <DIO_u8SetPinValue+0x6>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <DIO_u8SetPinValue+0x8>
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <DIO_u8SetPinValue+0xa>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	8a 83       	std	Y+2, r24	; 0x02
     f12:	6b 83       	std	Y+3, r22	; 0x03
     f14:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
     f16:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <DIO_u8SetPinValue+0x1e>
     f1e:	f1 c0       	rjmp	.+482    	; 0x1102 <DIO_u8SetPinValue+0x200>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	88 30       	cpi	r24, 0x08	; 8
     f24:	08 f0       	brcs	.+2      	; 0xf28 <DIO_u8SetPinValue+0x26>
     f26:	ea c0       	rjmp	.+468    	; 0x10fc <DIO_u8SetPinValue+0x1fa>
		{
			switch(copy_u8PortId)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3e 83       	std	Y+6, r19	; 0x06
     f30:	2d 83       	std	Y+5, r18	; 0x05
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <DIO_u8SetPinValue+0x3c>
     f3c:	49 c0       	rjmp	.+146    	; 0xfd0 <DIO_u8SetPinValue+0xce>
     f3e:	2d 81       	ldd	r18, Y+5	; 0x05
     f40:	3e 81       	ldd	r19, Y+6	; 0x06
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	2c f4       	brge	.+10     	; 0xf52 <DIO_u8SetPinValue+0x50>
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	71 f0       	breq	.+28     	; 0xf6c <DIO_u8SetPinValue+0x6a>
     f50:	da c0       	rjmp	.+436    	; 0x1106 <DIO_u8SetPinValue+0x204>
     f52:	2d 81       	ldd	r18, Y+5	; 0x05
     f54:	3e 81       	ldd	r19, Y+6	; 0x06
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	09 f4       	brne	.+2      	; 0xf5e <DIO_u8SetPinValue+0x5c>
     f5c:	6b c0       	rjmp	.+214    	; 0x1034 <DIO_u8SetPinValue+0x132>
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	91 05       	cpc	r25, r1
     f66:	09 f4       	brne	.+2      	; 0xf6a <DIO_u8SetPinValue+0x68>
     f68:	97 c0       	rjmp	.+302    	; 0x1098 <DIO_u8SetPinValue+0x196>
     f6a:	cd c0       	rjmp	.+410    	; 0x1106 <DIO_u8SetPinValue+0x204>
			{
			case DIO_PORTA: if(copy_u8PinValue == DIO_PIN_HIGH)
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	a1 f4       	brne	.+40     	; 0xf9a <DIO_u8SetPinValue+0x98>
			{
				SET_BIT(PORTA, copy_u8PinId);
     f72:	ab e3       	ldi	r26, 0x3B	; 59
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	eb e3       	ldi	r30, 0x3B	; 59
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_u8SetPinValue+0x8e>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_u8SetPinValue+0x8a>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	b6 c0       	rjmp	.+364    	; 0x1106 <DIO_u8SetPinValue+0x204>
			}
			else if(copy_u8PinValue == DIO_PIN_LOW)
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	88 23       	and	r24, r24
     f9e:	a9 f4       	brne	.+42     	; 0xfca <DIO_u8SetPinValue+0xc8>
			{
				CLR_BIT(PORTA, copy_u8PinId);
     fa0:	ab e3       	ldi	r26, 0x3B	; 59
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	eb e3       	ldi	r30, 0x3B	; 59
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_u8SetPinValue+0xbc>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_u8SetPinValue+0xb8>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	9e c0       	rjmp	.+316    	; 0x1106 <DIO_u8SetPinValue+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_VAL;
     fca:	8e e0       	ldi	r24, 0x0E	; 14
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	9b c0       	rjmp	.+310    	; 0x1106 <DIO_u8SetPinValue+0x204>

			break;

			case DIO_PORTB: if(copy_u8PinValue == DIO_PIN_HIGH)
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	a1 f4       	brne	.+40     	; 0xffe <DIO_u8SetPinValue+0xfc>
			{
				SET_BIT(PORTB, copy_u8PinId);
     fd6:	a8 e3       	ldi	r26, 0x38	; 56
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e8 e3       	ldi	r30, 0x38	; 56
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_u8SetPinValue+0xf2>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_u8SetPinValue+0xee>
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	84 c0       	rjmp	.+264    	; 0x1106 <DIO_u8SetPinValue+0x204>
			}
			else if(copy_u8PinValue == DIO_PIN_LOW)
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	88 23       	and	r24, r24
    1002:	a9 f4       	brne	.+42     	; 0x102e <DIO_u8SetPinValue+0x12c>
			{
				CLR_BIT(PORTB, copy_u8PinId);
    1004:	a8 e3       	ldi	r26, 0x38	; 56
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e8 e3       	ldi	r30, 0x38	; 56
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_u8SetPinValue+0x120>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_u8SetPinValue+0x11c>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	6c c0       	rjmp	.+216    	; 0x1106 <DIO_u8SetPinValue+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_VAL;
    102e:	8e e0       	ldi	r24, 0x0E	; 14
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	69 c0       	rjmp	.+210    	; 0x1106 <DIO_u8SetPinValue+0x204>

			break;

			case DIO_PORTC: if(copy_u8PinValue == DIO_PIN_HIGH)
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	a1 f4       	brne	.+40     	; 0x1062 <DIO_u8SetPinValue+0x160>
			{
				SET_BIT(PORTC, copy_u8PinId);
    103a:	a5 e3       	ldi	r26, 0x35	; 53
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e3       	ldi	r30, 0x35	; 53
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_u8SetPinValue+0x156>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_u8SetPinValue+0x152>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	52 c0       	rjmp	.+164    	; 0x1106 <DIO_u8SetPinValue+0x204>
			}
			else if(copy_u8PinValue == DIO_PIN_LOW)
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	88 23       	and	r24, r24
    1066:	a9 f4       	brne	.+42     	; 0x1092 <DIO_u8SetPinValue+0x190>
			{
				CLR_BIT(PORTC, copy_u8PinId);
    1068:	a5 e3       	ldi	r26, 0x35	; 53
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e3       	ldi	r30, 0x35	; 53
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_u8SetPinValue+0x184>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_u8SetPinValue+0x180>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	3a c0       	rjmp	.+116    	; 0x1106 <DIO_u8SetPinValue+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_VAL;
    1092:	8e e0       	ldi	r24, 0x0E	; 14
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	37 c0       	rjmp	.+110    	; 0x1106 <DIO_u8SetPinValue+0x204>

			break;

			case DIO_PORTD: if(copy_u8PinValue == DIO_PIN_HIGH)
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	a1 f4       	brne	.+40     	; 0x10c6 <DIO_u8SetPinValue+0x1c4>
			{
				SET_BIT(PORTD, copy_u8PinId);
    109e:	a2 e3       	ldi	r26, 0x32	; 50
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e2 e3       	ldi	r30, 0x32	; 50
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_u8SetPinValue+0x1ba>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_u8SetPinValue+0x1b6>
    10c0:	84 2b       	or	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	20 c0       	rjmp	.+64     	; 0x1106 <DIO_u8SetPinValue+0x204>
			}
			else if(copy_u8PinValue == DIO_PIN_LOW)
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	88 23       	and	r24, r24
    10ca:	a9 f4       	brne	.+42     	; 0x10f6 <DIO_u8SetPinValue+0x1f4>
			{
				CLR_BIT(PORTD, copy_u8PinId);
    10cc:	a2 e3       	ldi	r26, 0x32	; 50
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e2 e3       	ldi	r30, 0x32	; 50
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_u8SetPinValue+0x1e8>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_u8SetPinValue+0x1e4>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	08 c0       	rjmp	.+16     	; 0x1106 <DIO_u8SetPinValue+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_VAL;
    10f6:	8e e0       	ldi	r24, 0x0E	; 14
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <DIO_u8SetPinValue+0x204>


			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
    10fc:	8a e0       	ldi	r24, 0x0A	; 10
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_u8SetPinValue+0x204>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1102:	8b e0       	ldi	r24, 0x0B	; 11
    1104:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
}
    1108:	26 96       	adiw	r28, 0x06	; 6
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue                (u8 copy_u8PortId, u8 copy_u8PinId, u8* copy_pu8PinValue)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	27 97       	sbiw	r28, 0x07	; 7
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	6b 83       	std	Y+3, r22	; 0x03
    1132:	5d 83       	std	Y+5, r21	; 0x05
    1134:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
    1136:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	08 f0       	brcs	.+2      	; 0x1140 <DIO_u8GetPinValue+0x26>
    113e:	80 c0       	rjmp	.+256    	; 0x1240 <DIO_u8GetPinValue+0x126>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	08 f0       	brcs	.+2      	; 0x1148 <DIO_u8GetPinValue+0x2e>
    1146:	79 c0       	rjmp	.+242    	; 0x123a <DIO_u8GetPinValue+0x120>
		{
			if(copy_pu8PinValue != NULL)
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	09 f4       	brne	.+2      	; 0x1152 <DIO_u8GetPinValue+0x38>
    1150:	71 c0       	rjmp	.+226    	; 0x1234 <DIO_u8GetPinValue+0x11a>
			{
				switch(copy_u8PortId)
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3f 83       	std	Y+7, r19	; 0x07
    115a:	2e 83       	std	Y+6, r18	; 0x06
    115c:	4e 81       	ldd	r20, Y+6	; 0x06
    115e:	5f 81       	ldd	r21, Y+7	; 0x07
    1160:	41 30       	cpi	r20, 0x01	; 1
    1162:	51 05       	cpc	r21, r1
    1164:	59 f1       	breq	.+86     	; 0x11bc <DIO_u8GetPinValue+0xa2>
    1166:	8e 81       	ldd	r24, Y+6	; 0x06
    1168:	9f 81       	ldd	r25, Y+7	; 0x07
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	91 05       	cpc	r25, r1
    116e:	34 f4       	brge	.+12     	; 0x117c <DIO_u8GetPinValue+0x62>
    1170:	2e 81       	ldd	r18, Y+6	; 0x06
    1172:	3f 81       	ldd	r19, Y+7	; 0x07
    1174:	21 15       	cp	r18, r1
    1176:	31 05       	cpc	r19, r1
    1178:	69 f0       	breq	.+26     	; 0x1194 <DIO_u8GetPinValue+0x7a>
    117a:	64 c0       	rjmp	.+200    	; 0x1244 <DIO_u8GetPinValue+0x12a>
    117c:	4e 81       	ldd	r20, Y+6	; 0x06
    117e:	5f 81       	ldd	r21, Y+7	; 0x07
    1180:	42 30       	cpi	r20, 0x02	; 2
    1182:	51 05       	cpc	r21, r1
    1184:	79 f1       	breq	.+94     	; 0x11e4 <DIO_u8GetPinValue+0xca>
    1186:	8e 81       	ldd	r24, Y+6	; 0x06
    1188:	9f 81       	ldd	r25, Y+7	; 0x07
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <DIO_u8GetPinValue+0x78>
    1190:	3d c0       	rjmp	.+122    	; 0x120c <DIO_u8GetPinValue+0xf2>
    1192:	58 c0       	rjmp	.+176    	; 0x1244 <DIO_u8GetPinValue+0x12a>
				{
				case DIO_PORTA: *copy_pu8PinValue = GET_BIT(PINA, copy_u8PinId);		break;
    1194:	e9 e3       	ldi	r30, 0x39	; 57
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	a9 01       	movw	r20, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_u8GetPinValue+0x92>
    11a8:	55 95       	asr	r21
    11aa:	47 95       	ror	r20
    11ac:	8a 95       	dec	r24
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_u8GetPinValue+0x8e>
    11b0:	ca 01       	movw	r24, r20
    11b2:	81 70       	andi	r24, 0x01	; 1
    11b4:	ec 81       	ldd	r30, Y+4	; 0x04
    11b6:	fd 81       	ldd	r31, Y+5	; 0x05
    11b8:	80 83       	st	Z, r24
    11ba:	44 c0       	rjmp	.+136    	; 0x1244 <DIO_u8GetPinValue+0x12a>

				case DIO_PORTB: *copy_pu8PinValue = GET_BIT(PINB, copy_u8PinId);		break;
    11bc:	e6 e3       	ldi	r30, 0x36	; 54
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a9 01       	movw	r20, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_u8GetPinValue+0xba>
    11d0:	55 95       	asr	r21
    11d2:	47 95       	ror	r20
    11d4:	8a 95       	dec	r24
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_u8GetPinValue+0xb6>
    11d8:	ca 01       	movw	r24, r20
    11da:	81 70       	andi	r24, 0x01	; 1
    11dc:	ec 81       	ldd	r30, Y+4	; 0x04
    11de:	fd 81       	ldd	r31, Y+5	; 0x05
    11e0:	80 83       	st	Z, r24
    11e2:	30 c0       	rjmp	.+96     	; 0x1244 <DIO_u8GetPinValue+0x12a>

				case DIO_PORTC: *copy_pu8PinValue = GET_BIT(PINC, copy_u8PinId);		break;
    11e4:	e3 e3       	ldi	r30, 0x33	; 51
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	a9 01       	movw	r20, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_u8GetPinValue+0xe2>
    11f8:	55 95       	asr	r21
    11fa:	47 95       	ror	r20
    11fc:	8a 95       	dec	r24
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_u8GetPinValue+0xde>
    1200:	ca 01       	movw	r24, r20
    1202:	81 70       	andi	r24, 0x01	; 1
    1204:	ec 81       	ldd	r30, Y+4	; 0x04
    1206:	fd 81       	ldd	r31, Y+5	; 0x05
    1208:	80 83       	st	Z, r24
    120a:	1c c0       	rjmp	.+56     	; 0x1244 <DIO_u8GetPinValue+0x12a>

				case DIO_PORTD: *copy_pu8PinValue = GET_BIT(PIND, copy_u8PinId);		break;
    120c:	e0 e3       	ldi	r30, 0x30	; 48
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a9 01       	movw	r20, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_u8GetPinValue+0x10a>
    1220:	55 95       	asr	r21
    1222:	47 95       	ror	r20
    1224:	8a 95       	dec	r24
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_u8GetPinValue+0x106>
    1228:	ca 01       	movw	r24, r20
    122a:	81 70       	andi	r24, 0x01	; 1
    122c:	ec 81       	ldd	r30, Y+4	; 0x04
    122e:	fd 81       	ldd	r31, Y+5	; 0x05
    1230:	80 83       	st	Z, r24
    1232:	08 c0       	rjmp	.+16     	; 0x1244 <DIO_u8GetPinValue+0x12a>
				}
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_POINTER;
    1234:	8c e0       	ldi	r24, 0x0C	; 12
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <DIO_u8GetPinValue+0x12a>
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_u8GetPinValue+0x12a>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1240:	8b e0       	ldi	r24, 0x0B	; 11
    1242:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1244:	89 81       	ldd	r24, Y+1	; 0x01
}
    1246:	27 96       	adiw	r28, 0x07	; 7
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue             (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <DIO_u8TogglePinValue+0x6>
    125e:	00 d0       	rcall	.+0      	; 0x1260 <DIO_u8TogglePinValue+0x8>
    1260:	0f 92       	push	r0
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	8a 83       	std	Y+2, r24	; 0x02
    1268:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    126a:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	84 30       	cpi	r24, 0x04	; 4
    1270:	08 f0       	brcs	.+2      	; 0x1274 <DIO_u8TogglePinValue+0x1c>
    1272:	76 c0       	rjmp	.+236    	; 0x1360 <DIO_u8TogglePinValue+0x108>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	88 30       	cpi	r24, 0x08	; 8
    1278:	08 f0       	brcs	.+2      	; 0x127c <DIO_u8TogglePinValue+0x24>
    127a:	6f c0       	rjmp	.+222    	; 0x135a <DIO_u8TogglePinValue+0x102>
		{
			switch(copy_u8PortId)
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3d 83       	std	Y+5, r19	; 0x05
    1284:	2c 83       	std	Y+4, r18	; 0x04
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 05       	cpc	r25, r1
    128e:	49 f1       	breq	.+82     	; 0x12e2 <DIO_u8TogglePinValue+0x8a>
    1290:	2c 81       	ldd	r18, Y+4	; 0x04
    1292:	3d 81       	ldd	r19, Y+5	; 0x05
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	2c f4       	brge	.+10     	; 0x12a4 <DIO_u8TogglePinValue+0x4c>
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	61 f0       	breq	.+24     	; 0x12ba <DIO_u8TogglePinValue+0x62>
    12a2:	60 c0       	rjmp	.+192    	; 0x1364 <DIO_u8TogglePinValue+0x10c>
    12a4:	2c 81       	ldd	r18, Y+4	; 0x04
    12a6:	3d 81       	ldd	r19, Y+5	; 0x05
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	71 f1       	breq	.+92     	; 0x130a <DIO_u8TogglePinValue+0xb2>
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	e9 f1       	breq	.+122    	; 0x1332 <DIO_u8TogglePinValue+0xda>
    12b8:	55 c0       	rjmp	.+170    	; 0x1364 <DIO_u8TogglePinValue+0x10c>
			{
			case DIO_PORTA: TOG_BIT(PORTA, copy_u8PinId);		break;
    12ba:	ab e3       	ldi	r26, 0x3B	; 59
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	eb e3       	ldi	r30, 0x3B	; 59
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_u8TogglePinValue+0x80>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_u8TogglePinValue+0x7c>
    12dc:	84 27       	eor	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	41 c0       	rjmp	.+130    	; 0x1364 <DIO_u8TogglePinValue+0x10c>

			case DIO_PORTB: TOG_BIT(PORTB, copy_u8PinId);		break;
    12e2:	a8 e3       	ldi	r26, 0x38	; 56
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_u8TogglePinValue+0xa8>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_u8TogglePinValue+0xa4>
    1304:	84 27       	eor	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	2d c0       	rjmp	.+90     	; 0x1364 <DIO_u8TogglePinValue+0x10c>

			case DIO_PORTC: TOG_BIT(PORTC, copy_u8PinId);		break;
    130a:	a5 e3       	ldi	r26, 0x35	; 53
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e5 e3       	ldi	r30, 0x35	; 53
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_u8TogglePinValue+0xd0>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_u8TogglePinValue+0xcc>
    132c:	84 27       	eor	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	19 c0       	rjmp	.+50     	; 0x1364 <DIO_u8TogglePinValue+0x10c>

			case DIO_PORTD: TOG_BIT(PORTD, copy_u8PinId);		break;
    1332:	a2 e3       	ldi	r26, 0x32	; 50
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e2 e3       	ldi	r30, 0x32	; 50
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_u8TogglePinValue+0xf8>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_u8TogglePinValue+0xf4>
    1354:	84 27       	eor	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <DIO_u8TogglePinValue+0x10c>
			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
    135a:	8a e0       	ldi	r24, 0x0A	; 10
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_u8TogglePinValue+0x10c>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1360:	8b e0       	ldi	r24, 0x0B	; 11
    1362:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <DIO_u8ActivePinInPullUpResistance>:
u8 DIO_u8ActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_u8ActivePinInPullUpResistance+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <DIO_u8ActivePinInPullUpResistance+0x8>
    137e:	0f 92       	push	r0
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1388:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	08 f0       	brcs	.+2      	; 0x1392 <DIO_u8ActivePinInPullUpResistance+0x1c>
    1390:	c5 c0       	rjmp	.+394    	; 0x151c <DIO_u8ActivePinInPullUpResistance+0x1a6>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 30       	cpi	r24, 0x08	; 8
    1396:	08 f0       	brcs	.+2      	; 0x139a <DIO_u8ActivePinInPullUpResistance+0x24>
    1398:	be c0       	rjmp	.+380    	; 0x1516 <DIO_u8ActivePinInPullUpResistance+0x1a0>
		{
			switch(copy_u8PortId)
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3d 83       	std	Y+5, r19	; 0x05
    13a2:	2c 83       	std	Y+4, r18	; 0x04
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <DIO_u8ActivePinInPullUpResistance+0x3a>
    13ae:	3e c0       	rjmp	.+124    	; 0x142c <DIO_u8ActivePinInPullUpResistance+0xb6>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <DIO_u8ActivePinInPullUpResistance+0x4e>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	71 f0       	breq	.+28     	; 0x13de <DIO_u8ActivePinInPullUpResistance+0x68>
    13c2:	ae c0       	rjmp	.+348    	; 0x1520 <DIO_u8ActivePinInPullUpResistance+0x1aa>
    13c4:	2c 81       	ldd	r18, Y+4	; 0x04
    13c6:	3d 81       	ldd	r19, Y+5	; 0x05
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <DIO_u8ActivePinInPullUpResistance+0x5a>
    13ce:	55 c0       	rjmp	.+170    	; 0x147a <DIO_u8ActivePinInPullUpResistance+0x104>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_u8ActivePinInPullUpResistance+0x66>
    13da:	76 c0       	rjmp	.+236    	; 0x14c8 <DIO_u8ActivePinInPullUpResistance+0x152>
    13dc:	a1 c0       	rjmp	.+322    	; 0x1520 <DIO_u8ActivePinInPullUpResistance+0x1aa>
			{
			case DIO_PORTA: CLR_BIT(DDRA, copy_u8PinId);		SET_BIT(PORTA,copy_u8PinId);		break;
    13de:	aa e3       	ldi	r26, 0x3A	; 58
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ea e3       	ldi	r30, 0x3A	; 58
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_u8ActivePinInPullUpResistance+0x84>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	2a 95       	dec	r18
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_u8ActivePinInPullUpResistance+0x80>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	ab e3       	ldi	r26, 0x3B	; 59
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	eb e3       	ldi	r30, 0x3B	; 59
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8ActivePinInPullUpResistance+0xac>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_u8ActivePinInPullUpResistance+0xa8>
    1426:	84 2b       	or	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	7a c0       	rjmp	.+244    	; 0x1520 <DIO_u8ActivePinInPullUpResistance+0x1aa>

			case DIO_PORTB: CLR_BIT(DDRB, copy_u8PinId);		SET_BIT(PORTB,copy_u8PinId);		break;
    142c:	a7 e3       	ldi	r26, 0x37	; 55
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e7 e3       	ldi	r30, 0x37	; 55
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_u8ActivePinInPullUpResistance+0xd2>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	2a 95       	dec	r18
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_u8ActivePinInPullUpResistance+0xce>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	a8 e3       	ldi	r26, 0x38	; 56
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e8 e3       	ldi	r30, 0x38	; 56
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_u8ActivePinInPullUpResistance+0xfa>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_u8ActivePinInPullUpResistance+0xf6>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	53 c0       	rjmp	.+166    	; 0x1520 <DIO_u8ActivePinInPullUpResistance+0x1aa>

			case DIO_PORTC: CLR_BIT(DDRC, copy_u8PinId);		SET_BIT(PORTC,copy_u8PinId);		break;
    147a:	a4 e3       	ldi	r26, 0x34	; 52
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e4 e3       	ldi	r30, 0x34	; 52
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_u8ActivePinInPullUpResistance+0x120>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	2a 95       	dec	r18
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_u8ActivePinInPullUpResistance+0x11c>
    149a:	80 95       	com	r24
    149c:	84 23       	and	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	a5 e3       	ldi	r26, 0x35	; 53
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e5 e3       	ldi	r30, 0x35	; 53
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <DIO_u8ActivePinInPullUpResistance+0x148>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <DIO_u8ActivePinInPullUpResistance+0x144>
    14c2:	84 2b       	or	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	2c c0       	rjmp	.+88     	; 0x1520 <DIO_u8ActivePinInPullUpResistance+0x1aa>

			case DIO_PORTD: CLR_BIT(DDRD, copy_u8PinId);		SET_BIT(PORTD,copy_u8PinId);		break;
    14c8:	a1 e3       	ldi	r26, 0x31	; 49
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e1 e3       	ldi	r30, 0x31	; 49
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_u8ActivePinInPullUpResistance+0x16e>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	2a 95       	dec	r18
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_u8ActivePinInPullUpResistance+0x16a>
    14e8:	80 95       	com	r24
    14ea:	84 23       	and	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	a2 e3       	ldi	r26, 0x32	; 50
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e2 e3       	ldi	r30, 0x32	; 50
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_u8ActivePinInPullUpResistance+0x196>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <DIO_u8ActivePinInPullUpResistance+0x192>
    1510:	84 2b       	or	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <DIO_u8ActivePinInPullUpResistance+0x1aa>
			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
    1516:	8a e0       	ldi	r24, 0x0A	; 10
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_u8ActivePinInPullUpResistance+0x1aa>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    151c:	8b e0       	ldi	r24, 0x0B	; 11
    151e:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <DIO_u8SetPortDirection>:


/* Port Apis */
u8 DIO_u8SetPortDirection            (u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <DIO_u8SetPortDirection+0x6>
    1538:	00 d0       	rcall	.+0      	; 0x153a <DIO_u8SetPortDirection+0x8>
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	8a 83       	std	Y+2, r24	; 0x02
    1542:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1544:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	e0 f5       	brcc	.+120    	; 0x15c4 <DIO_u8SetPortDirection+0x92>
	{
		if(copy_u8PortDirection == DIO_PORT_INPUT || copy_u8PortDirection == DIO_PORT_OUTPUT)
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 23       	and	r24, r24
    1550:	19 f0       	breq	.+6      	; 0x1558 <DIO_u8SetPortDirection+0x26>
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	8f 3f       	cpi	r24, 0xFF	; 255
    1556:	99 f5       	brne	.+102    	; 0x15be <DIO_u8SetPortDirection+0x8c>
		{
			switch(copy_u8PortId)
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	3d 83       	std	Y+5, r19	; 0x05
    1560:	2c 83       	std	Y+4, r18	; 0x04
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	91 05       	cpc	r25, r1
    156a:	d1 f0       	breq	.+52     	; 0x15a0 <DIO_u8SetPortDirection+0x6e>
    156c:	2c 81       	ldd	r18, Y+4	; 0x04
    156e:	3d 81       	ldd	r19, Y+5	; 0x05
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 05       	cpc	r19, r1
    1574:	2c f4       	brge	.+10     	; 0x1580 <DIO_u8SetPortDirection+0x4e>
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	9d 81       	ldd	r25, Y+5	; 0x05
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	61 f0       	breq	.+24     	; 0x1596 <DIO_u8SetPortDirection+0x64>
    157e:	24 c0       	rjmp	.+72     	; 0x15c8 <DIO_u8SetPortDirection+0x96>
    1580:	2c 81       	ldd	r18, Y+4	; 0x04
    1582:	3d 81       	ldd	r19, Y+5	; 0x05
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	81 f0       	breq	.+32     	; 0x15aa <DIO_u8SetPortDirection+0x78>
    158a:	8c 81       	ldd	r24, Y+4	; 0x04
    158c:	9d 81       	ldd	r25, Y+5	; 0x05
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	91 05       	cpc	r25, r1
    1592:	81 f0       	breq	.+32     	; 0x15b4 <DIO_u8SetPortDirection+0x82>
    1594:	19 c0       	rjmp	.+50     	; 0x15c8 <DIO_u8SetPortDirection+0x96>
			{
			case DIO_PORTA: DDRA = copy_u8PortDirection;		break;
    1596:	ea e3       	ldi	r30, 0x3A	; 58
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	80 83       	st	Z, r24
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <DIO_u8SetPortDirection+0x96>

			case DIO_PORTB: DDRB = copy_u8PortDirection;		break;
    15a0:	e7 e3       	ldi	r30, 0x37	; 55
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	80 83       	st	Z, r24
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <DIO_u8SetPortDirection+0x96>

			case DIO_PORTC: DDRC = copy_u8PortDirection;		break;
    15aa:	e4 e3       	ldi	r30, 0x34	; 52
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	80 83       	st	Z, r24
    15b2:	0a c0       	rjmp	.+20     	; 0x15c8 <DIO_u8SetPortDirection+0x96>

			case DIO_PORTD: DDRD = copy_u8PortDirection;		break;
    15b4:	e1 e3       	ldi	r30, 0x31	; 49
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	80 83       	st	Z, r24
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <DIO_u8SetPortDirection+0x96>
			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;
    15be:	8f e0       	ldi	r24, 0x0F	; 15
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_u8SetPortDirection+0x96>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    15c4:	8b e0       	ldi	r24, 0x0B	; 11
    15c6:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue                (u8 copy_u8PortId, u8 copy_u8PortValue)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <DIO_u8SetPortValue+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <DIO_u8SetPortValue+0x8>
    15e2:	0f 92       	push	r0
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    15ec:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	98 f5       	brcc	.+102    	; 0x165a <DIO_u8SetPortValue+0x80>
	{
		if(copy_u8PortValue >= DIO_PORT_LOW && copy_u8PortValue <= DIO_PORT_HIGH)
		{
			switch(copy_u8PortId)
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	3d 83       	std	Y+5, r19	; 0x05
    15fc:	2c 83       	std	Y+4, r18	; 0x04
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	91 05       	cpc	r25, r1
    1606:	d1 f0       	breq	.+52     	; 0x163c <DIO_u8SetPortValue+0x62>
    1608:	2c 81       	ldd	r18, Y+4	; 0x04
    160a:	3d 81       	ldd	r19, Y+5	; 0x05
    160c:	22 30       	cpi	r18, 0x02	; 2
    160e:	31 05       	cpc	r19, r1
    1610:	2c f4       	brge	.+10     	; 0x161c <DIO_u8SetPortValue+0x42>
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	9d 81       	ldd	r25, Y+5	; 0x05
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	61 f0       	breq	.+24     	; 0x1632 <DIO_u8SetPortValue+0x58>
    161a:	21 c0       	rjmp	.+66     	; 0x165e <DIO_u8SetPortValue+0x84>
    161c:	2c 81       	ldd	r18, Y+4	; 0x04
    161e:	3d 81       	ldd	r19, Y+5	; 0x05
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <DIO_u8SetPortValue+0x6c>
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <DIO_u8SetPortValue+0x76>
    1630:	16 c0       	rjmp	.+44     	; 0x165e <DIO_u8SetPortValue+0x84>
			{
			case DIO_PORTA: PORTA = copy_u8PortValue;		break;
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	80 83       	st	Z, r24
    163a:	11 c0       	rjmp	.+34     	; 0x165e <DIO_u8SetPortValue+0x84>

			case DIO_PORTB: PORTB = copy_u8PortValue;		break;
    163c:	e8 e3       	ldi	r30, 0x38	; 56
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	80 83       	st	Z, r24
    1644:	0c c0       	rjmp	.+24     	; 0x165e <DIO_u8SetPortValue+0x84>

			case DIO_PORTC: PORTC = copy_u8PortValue;		break;
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	80 83       	st	Z, r24
    164e:	07 c0       	rjmp	.+14     	; 0x165e <DIO_u8SetPortValue+0x84>

			case DIO_PORTD: PORTD = copy_u8PortValue;		break;
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	80 83       	st	Z, r24
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_u8SetPortValue+0x84>
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    165a:	8b e0       	ldi	r24, 0x0B	; 11
    165c:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue                (u8 copy_u8PortId, u8* copy_pu8PortValue)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <DIO_u8GetPortValue+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <DIO_u8GetPortValue+0x8>
    1678:	00 d0       	rcall	.+0      	; 0x167a <DIO_u8GetPortValue+0xa>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	7c 83       	std	Y+4, r23	; 0x04
    1682:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1684:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	84 30       	cpi	r24, 0x04	; 4
    168a:	08 f0       	brcs	.+2      	; 0x168e <DIO_u8GetPortValue+0x1e>
    168c:	42 c0       	rjmp	.+132    	; 0x1712 <DIO_u8GetPortValue+0xa2>
	{
		if(copy_pu8PortValue != NULL)
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	d9 f1       	breq	.+118    	; 0x170c <DIO_u8GetPortValue+0x9c>
		{
			switch(copy_u8PortId)
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	3e 83       	std	Y+6, r19	; 0x06
    169e:	2d 83       	std	Y+5, r18	; 0x05
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	91 05       	cpc	r25, r1
    16a8:	e1 f0       	breq	.+56     	; 0x16e2 <DIO_u8GetPortValue+0x72>
    16aa:	2d 81       	ldd	r18, Y+5	; 0x05
    16ac:	3e 81       	ldd	r19, Y+6	; 0x06
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	31 05       	cpc	r19, r1
    16b2:	2c f4       	brge	.+10     	; 0x16be <DIO_u8GetPortValue+0x4e>
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <DIO_u8GetPortValue+0x64>
    16bc:	2c c0       	rjmp	.+88     	; 0x1716 <DIO_u8GetPortValue+0xa6>
    16be:	2d 81       	ldd	r18, Y+5	; 0x05
    16c0:	3e 81       	ldd	r19, Y+6	; 0x06
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	a1 f0       	breq	.+40     	; 0x16f0 <DIO_u8GetPortValue+0x80>
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	91 05       	cpc	r25, r1
    16d0:	b1 f0       	breq	.+44     	; 0x16fe <DIO_u8GetPortValue+0x8e>
    16d2:	21 c0       	rjmp	.+66     	; 0x1716 <DIO_u8GetPortValue+0xa6>
			{
			case DIO_PORTA: *copy_pu8PortValue = PINA;		break;
    16d4:	e9 e3       	ldi	r30, 0x39	; 57
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	eb 81       	ldd	r30, Y+3	; 0x03
    16dc:	fc 81       	ldd	r31, Y+4	; 0x04
    16de:	80 83       	st	Z, r24
    16e0:	1a c0       	rjmp	.+52     	; 0x1716 <DIO_u8GetPortValue+0xa6>

			case DIO_PORTB: *copy_pu8PortValue = PINB;		break;
    16e2:	e6 e3       	ldi	r30, 0x36	; 54
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ea:	fc 81       	ldd	r31, Y+4	; 0x04
    16ec:	80 83       	st	Z, r24
    16ee:	13 c0       	rjmp	.+38     	; 0x1716 <DIO_u8GetPortValue+0xa6>

			case DIO_PORTC: *copy_pu8PortValue = PINC;		break;
    16f0:	e3 e3       	ldi	r30, 0x33	; 51
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	eb 81       	ldd	r30, Y+3	; 0x03
    16f8:	fc 81       	ldd	r31, Y+4	; 0x04
    16fa:	80 83       	st	Z, r24
    16fc:	0c c0       	rjmp	.+24     	; 0x1716 <DIO_u8GetPortValue+0xa6>

			case DIO_PORTD: *copy_pu8PortValue = PIND;		break;
    16fe:	e0 e3       	ldi	r30, 0x30	; 48
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	eb 81       	ldd	r30, Y+3	; 0x03
    1706:	fc 81       	ldd	r31, Y+4	; 0x04
    1708:	80 83       	st	Z, r24
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <DIO_u8GetPortValue+0xa6>
			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_POINTER;
    170c:	8c e0       	ldi	r24, 0x0C	; 12
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_u8GetPortValue+0xa6>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1712:	8b e0       	ldi	r24, 0x0B	; 11
    1714:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1716:	89 81       	ldd	r24, Y+1	; 0x01
}
    1718:	26 96       	adiw	r28, 0x06	; 6
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <DIO_u8TogglePortValue>:

u8 DIO_u8TogglePortValue             (u8 copy_u8PortId)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <DIO_u8TogglePortValue+0x6>
    1730:	00 d0       	rcall	.+0      	; 0x1732 <DIO_u8TogglePortValue+0x8>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1738:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	84 30       	cpi	r24, 0x04	; 4
    173e:	08 f0       	brcs	.+2      	; 0x1742 <DIO_u8TogglePortValue+0x18>
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <DIO_u8TogglePortValue+0x96>
	{
		switch(copy_u8PortId)
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	3c 83       	std	Y+4, r19	; 0x04
    174a:	2b 83       	std	Y+3, r18	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	91 05       	cpc	r25, r1
    1754:	e9 f0       	breq	.+58     	; 0x1790 <DIO_u8TogglePortValue+0x66>
    1756:	2b 81       	ldd	r18, Y+3	; 0x03
    1758:	3c 81       	ldd	r19, Y+4	; 0x04
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	2c f4       	brge	.+10     	; 0x176a <DIO_u8TogglePortValue+0x40>
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	61 f0       	breq	.+24     	; 0x1780 <DIO_u8TogglePortValue+0x56>
    1768:	2d c0       	rjmp	.+90     	; 0x17c4 <DIO_u8TogglePortValue+0x9a>
    176a:	2b 81       	ldd	r18, Y+3	; 0x03
    176c:	3c 81       	ldd	r19, Y+4	; 0x04
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	b1 f0       	breq	.+44     	; 0x17a0 <DIO_u8TogglePortValue+0x76>
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	91 05       	cpc	r25, r1
    177c:	c9 f0       	breq	.+50     	; 0x17b0 <DIO_u8TogglePortValue+0x86>
    177e:	22 c0       	rjmp	.+68     	; 0x17c4 <DIO_u8TogglePortValue+0x9a>
		{
		case DIO_PORTA: PORTA ^= 0xFF;		break;
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 95       	com	r24
    178c:	8c 93       	st	X, r24
    178e:	1a c0       	rjmp	.+52     	; 0x17c4 <DIO_u8TogglePortValue+0x9a>

		case DIO_PORTB: PORTB ^= 0xFF;		break;
    1790:	a8 e3       	ldi	r26, 0x38	; 56
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e8 e3       	ldi	r30, 0x38	; 56
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 95       	com	r24
    179c:	8c 93       	st	X, r24
    179e:	12 c0       	rjmp	.+36     	; 0x17c4 <DIO_u8TogglePortValue+0x9a>

		case DIO_PORTC: PORTC ^= 0xFF;		break;
    17a0:	a5 e3       	ldi	r26, 0x35	; 53
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e5 e3       	ldi	r30, 0x35	; 53
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 95       	com	r24
    17ac:	8c 93       	st	X, r24
    17ae:	0a c0       	rjmp	.+20     	; 0x17c4 <DIO_u8TogglePortValue+0x9a>

		case DIO_PORTD: PORTD ^= 0xFF;		break;
    17b0:	a2 e3       	ldi	r26, 0x32	; 50
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 95       	com	r24
    17bc:	8c 93       	st	X, r24
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_u8TogglePortValue+0x9a>
		}
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    17c0:	8b e0       	ldi	r24, 0x0B	; 11
    17c2:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <DIO_u8ActivePortInPullUpResistance>:

u8 DIO_u8ActivePortInPullUpResistance(u8 copy_u8PortId)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <DIO_u8ActivePortInPullUpResistance+0x6>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <DIO_u8ActivePortInPullUpResistance+0x8>
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    17e2:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <DIO_u8ActivePortInPullUpResistance+0x18>
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <DIO_u8ActivePortInPullUpResistance+0x96>
	{
		switch(copy_u8PortId)
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3c 83       	std	Y+4, r19	; 0x04
    17f4:	2b 83       	std	Y+3, r18	; 0x03
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	e9 f0       	breq	.+58     	; 0x183a <DIO_u8ActivePortInPullUpResistance+0x66>
    1800:	2b 81       	ldd	r18, Y+3	; 0x03
    1802:	3c 81       	ldd	r19, Y+4	; 0x04
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	2c f4       	brge	.+10     	; 0x1814 <DIO_u8ActivePortInPullUpResistance+0x40>
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	61 f0       	breq	.+24     	; 0x182a <DIO_u8ActivePortInPullUpResistance+0x56>
    1812:	2d c0       	rjmp	.+90     	; 0x186e <DIO_u8ActivePortInPullUpResistance+0x9a>
    1814:	2b 81       	ldd	r18, Y+3	; 0x03
    1816:	3c 81       	ldd	r19, Y+4	; 0x04
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	b1 f0       	breq	.+44     	; 0x184a <DIO_u8ActivePortInPullUpResistance+0x76>
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	83 30       	cpi	r24, 0x03	; 3
    1824:	91 05       	cpc	r25, r1
    1826:	c9 f0       	breq	.+50     	; 0x185a <DIO_u8ActivePortInPullUpResistance+0x86>
    1828:	22 c0       	rjmp	.+68     	; 0x186e <DIO_u8ActivePortInPullUpResistance+0x9a>
		{
		case DIO_PORTA: DDRA = DIO_PORT_LOW;		PORTA = DIO_PORT_HIGH;		break;
    182a:	ea e3       	ldi	r30, 0x3A	; 58
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	10 82       	st	Z, r1
    1830:	eb e3       	ldi	r30, 0x3B	; 59
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	80 83       	st	Z, r24
    1838:	1a c0       	rjmp	.+52     	; 0x186e <DIO_u8ActivePortInPullUpResistance+0x9a>

		case DIO_PORTB: DDRB = DIO_PORT_LOW;		PORTB = DIO_PORT_HIGH;		break;
    183a:	e7 e3       	ldi	r30, 0x37	; 55
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	10 82       	st	Z, r1
    1840:	e8 e3       	ldi	r30, 0x38	; 56
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	8f ef       	ldi	r24, 0xFF	; 255
    1846:	80 83       	st	Z, r24
    1848:	12 c0       	rjmp	.+36     	; 0x186e <DIO_u8ActivePortInPullUpResistance+0x9a>

		case DIO_PORTC: DDRC = DIO_PORT_LOW;		PORTC = DIO_PORT_HIGH;		break;
    184a:	e4 e3       	ldi	r30, 0x34	; 52
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	10 82       	st	Z, r1
    1850:	e5 e3       	ldi	r30, 0x35	; 53
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	80 83       	st	Z, r24
    1858:	0a c0       	rjmp	.+20     	; 0x186e <DIO_u8ActivePortInPullUpResistance+0x9a>

		case DIO_PORTD: DDRD = DIO_PORT_LOW;		PORTD = DIO_PORT_HIGH;		break;
    185a:	e1 e3       	ldi	r30, 0x31	; 49
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	10 82       	st	Z, r1
    1860:	e2 e3       	ldi	r30, 0x32	; 50
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	80 83       	st	Z, r24
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_u8ActivePortInPullUpResistance+0x9a>
		}
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    186a:	8b e0       	ldi	r24, 0x0B	; 11
    186c:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    186e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_config.h"


/********************************				Function Definitions				********************************/
u8 KEYPAD_u8GetPressedKey (void)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <KEYPAD_u8GetPressedKey+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <KEYPAD_u8GetPressedKey+0x8>
    1886:	0f 92       	push	r0
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PinState, Local_u8PressedKey = KEYPAD_NOT_PRESSED;
    188c:	1b 82       	std	Y+3, r1	; 0x03
		/*Deactivate current ROW*/
		DIO_u8SetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], DIO_PIN_HIGH);
	}
#elif KEYPAD_CONTROL == COL_CONTROL

	for(u8 Local_u8Col = 0; Local_u8Col < 4; Local_u8Col++)
    188e:	1a 82       	std	Y+2, r1	; 0x02
    1890:	7a c0       	rjmp	.+244    	; 0x1986 <KEYPAD_u8GetPressedKey+0x108>
	{
		/*Activate current Column*/
		DIO_u8SetPinValue(Local_u8ColPorts[Local_u8Col], Local_u8ColPins[Local_u8Col], DIO_PIN_LOW);
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	fc 01       	movw	r30, r24
    189a:	e8 5e       	subi	r30, 0xE8	; 232
    189c:	fe 4f       	sbci	r31, 0xFE	; 254
    189e:	20 81       	ld	r18, Z
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	fc 01       	movw	r30, r24
    18a8:	ec 5e       	subi	r30, 0xEC	; 236
    18aa:	fe 4f       	sbci	r31, 0xFE	; 254
    18ac:	90 81       	ld	r25, Z
    18ae:	82 2f       	mov	r24, r18
    18b0:	69 2f       	mov	r22, r25
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>

		for(u8 Local_u8Row = 0; Local_u8Row < 4; Local_u8Row++)
    18b8:	19 82       	std	Y+1, r1	; 0x01
    18ba:	4b c0       	rjmp	.+150    	; 0x1952 <KEYPAD_u8GetPressedKey+0xd4>
		{
			/*Read current Row*/
			DIO_u8GetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], &Local_u8PinState);
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	fc 01       	movw	r30, r24
    18c4:	e0 5f       	subi	r30, 0xF0	; 240
    18c6:	fe 4f       	sbci	r31, 0xFE	; 254
    18c8:	40 81       	ld	r20, Z
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	fc 01       	movw	r30, r24
    18d2:	e4 5f       	subi	r30, 0xF4	; 244
    18d4:	fe 4f       	sbci	r31, 0xFE	; 254
    18d6:	90 81       	ld	r25, Z
    18d8:	9e 01       	movw	r18, r28
    18da:	2c 5f       	subi	r18, 0xFC	; 252
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	84 2f       	mov	r24, r20
    18e0:	69 2f       	mov	r22, r25
    18e2:	a9 01       	movw	r20, r18
    18e4:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8GetPinValue>
			/*check if the switch is pressed*/
			if(Local_u8PinState == DIO_PIN_LOW)
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	88 23       	and	r24, r24
    18ec:	79 f5       	brne	.+94     	; 0x194c <KEYPAD_u8GetPressedKey+0xce>
			{
				/*get the value*/
				Local_u8PressedKey = Local_u8Array[Local_u8Row][Local_u8Col];
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	48 2f       	mov	r20, r24
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	ca 01       	movw	r24, r20
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	82 0f       	add	r24, r18
    1906:	93 1f       	adc	r25, r19
    1908:	fc 01       	movw	r30, r24
    190a:	e4 50       	subi	r30, 0x04	; 4
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	8b 83       	std	Y+3, r24	; 0x03
    1912:	16 c0       	rjmp	.+44     	; 0x1940 <KEYPAD_u8GetPressedKey+0xc2>
				/*Polling to make sure it is pressed one time (single pressed)*/
				while(Local_u8PinState == DIO_PIN_LOW)
				{
					DIO_u8GetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], &Local_u8PinState);
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	fc 01       	movw	r30, r24
    191c:	e0 5f       	subi	r30, 0xF0	; 240
    191e:	fe 4f       	sbci	r31, 0xFE	; 254
    1920:	40 81       	ld	r20, Z
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	fc 01       	movw	r30, r24
    192a:	e4 5f       	subi	r30, 0xF4	; 244
    192c:	fe 4f       	sbci	r31, 0xFE	; 254
    192e:	90 81       	ld	r25, Z
    1930:	9e 01       	movw	r18, r28
    1932:	2c 5f       	subi	r18, 0xFC	; 252
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	84 2f       	mov	r24, r20
    1938:	69 2f       	mov	r22, r25
    193a:	a9 01       	movw	r20, r18
    193c:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8GetPinValue>
			if(Local_u8PinState == DIO_PIN_LOW)
			{
				/*get the value*/
				Local_u8PressedKey = Local_u8Array[Local_u8Row][Local_u8Col];
				/*Polling to make sure it is pressed one time (single pressed)*/
				while(Local_u8PinState == DIO_PIN_LOW)
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	88 23       	and	r24, r24
    1944:	39 f3       	breq	.-50     	; 0x1914 <KEYPAD_u8GetPressedKey+0x96>
				{
					DIO_u8GetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], &Local_u8PinState);
				}

				return Local_u8PressedKey;
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	23 c0       	rjmp	.+70     	; 0x1992 <KEYPAD_u8GetPressedKey+0x114>
	for(u8 Local_u8Col = 0; Local_u8Col < 4; Local_u8Col++)
	{
		/*Activate current Column*/
		DIO_u8SetPinValue(Local_u8ColPorts[Local_u8Col], Local_u8ColPins[Local_u8Col], DIO_PIN_LOW);

		for(u8 Local_u8Row = 0; Local_u8Row < 4; Local_u8Row++)
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	84 30       	cpi	r24, 0x04	; 4
    1956:	08 f4       	brcc	.+2      	; 0x195a <KEYPAD_u8GetPressedKey+0xdc>
    1958:	b1 cf       	rjmp	.-158    	; 0x18bc <KEYPAD_u8GetPressedKey+0x3e>
			}

		}

		/*Deactivate current Column*/
		DIO_u8SetPinValue(Local_u8ColPorts[Local_u8Col], Local_u8ColPins[Local_u8Col], DIO_PIN_HIGH);
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	fc 01       	movw	r30, r24
    1962:	e8 5e       	subi	r30, 0xE8	; 232
    1964:	fe 4f       	sbci	r31, 0xFE	; 254
    1966:	20 81       	ld	r18, Z
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	fc 01       	movw	r30, r24
    1970:	ec 5e       	subi	r30, 0xEC	; 236
    1972:	fe 4f       	sbci	r31, 0xFE	; 254
    1974:	90 81       	ld	r25, Z
    1976:	82 2f       	mov	r24, r18
    1978:	69 2f       	mov	r22, r25
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
		/*Deactivate current ROW*/
		DIO_u8SetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], DIO_PIN_HIGH);
	}
#elif KEYPAD_CONTROL == COL_CONTROL

	for(u8 Local_u8Col = 0; Local_u8Col < 4; Local_u8Col++)
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	8f 5f       	subi	r24, 0xFF	; 255
    1984:	8a 83       	std	Y+2, r24	; 0x02
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	84 30       	cpi	r24, 0x04	; 4
    198a:	08 f4       	brcc	.+2      	; 0x198e <KEYPAD_u8GetPressedKey+0x110>
    198c:	82 cf       	rjmp	.-252    	; 0x1892 <KEYPAD_u8GetPressedKey+0x14>
		DIO_u8SetPinValue(Local_u8ColPorts[Local_u8Col], Local_u8ColPins[Local_u8Col], DIO_PIN_HIGH);
	}

#endif

	return Local_u8PressedKey;
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <LCD_voidInit>:
#include "LCD_private.h"


/********************************				Function Definitions				********************************/
void LCD_voidInit(void)
{
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	c6 55       	subi	r28, 0x56	; 86
    19b2:	d0 40       	sbci	r29, 0x00	; 0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	fe 01       	movw	r30, r28
    19c0:	ed 5a       	subi	r30, 0xAD	; 173
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a0 e2       	ldi	r26, 0x20	; 32
    19ca:	b2 e4       	ldi	r27, 0x42	; 66
    19cc:	80 83       	st	Z, r24
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	a2 83       	std	Z+2, r26	; 0x02
    19d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d4:	8e 01       	movw	r16, r28
    19d6:	01 5b       	subi	r16, 0xB1	; 177
    19d8:	1f 4f       	sbci	r17, 0xFF	; 255
    19da:	fe 01       	movw	r30, r28
    19dc:	ed 5a       	subi	r30, 0xAD	; 173
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a e7       	ldi	r20, 0x7A	; 122
    19ee:	55 e4       	ldi	r21, 0x45	; 69
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	f8 01       	movw	r30, r16
    19fa:	80 83       	st	Z, r24
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	a2 83       	std	Z+2, r26	; 0x02
    1a00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a02:	fe 01       	movw	r30, r28
    1a04:	e1 5b       	subi	r30, 0xB1	; 177
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	44 f4       	brge	.+16     	; 0x1a30 <LCD_voidInit+0x8c>
		__ticks = 1;
    1a20:	fe 01       	movw	r30, r28
    1a22:	e3 5b       	subi	r30, 0xB3	; 179
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	91 83       	std	Z+1, r25	; 0x01
    1a2c:	80 83       	st	Z, r24
    1a2e:	64 c0       	rjmp	.+200    	; 0x1af8 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1a30:	fe 01       	movw	r30, r28
    1a32:	e1 5b       	subi	r30, 0xB1	; 177
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	0c f0       	brlt	.+2      	; 0x1a50 <LCD_voidInit+0xac>
    1a4e:	43 c0       	rjmp	.+134    	; 0x1ad6 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a50:	fe 01       	movw	r30, r28
    1a52:	ed 5a       	subi	r30, 0xAD	; 173
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8e 01       	movw	r16, r28
    1a70:	03 5b       	subi	r16, 0xB3	; 179
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	f8 01       	movw	r30, r16
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	80 83       	st	Z, r24
    1a86:	1f c0       	rjmp	.+62     	; 0x1ac6 <LCD_voidInit+0x122>
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e5 5b       	subi	r30, 0xB5	; 181
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 e9       	ldi	r24, 0x90	; 144
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a96:	fe 01       	movw	r30, r28
    1a98:	e5 5b       	subi	r30, 0xB5	; 181
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <LCD_voidInit+0xfc>
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e5 5b       	subi	r30, 0xB5	; 181
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aae:	de 01       	movw	r26, r28
    1ab0:	a3 5b       	subi	r26, 0xB3	; 179
    1ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e3 5b       	subi	r30, 0xB3	; 179
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	11 96       	adiw	r26, 0x01	; 1
    1ac2:	9c 93       	st	X, r25
    1ac4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e3 5b       	subi	r30, 0xB3	; 179
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 81       	ld	r24, Z
    1ace:	91 81       	ldd	r25, Z+1	; 0x01
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	d1 f6       	brne	.-76     	; 0x1a88 <LCD_voidInit+0xe4>
    1ad4:	27 c0       	rjmp	.+78     	; 0x1b24 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad6:	8e 01       	movw	r16, r28
    1ad8:	03 5b       	subi	r16, 0xB3	; 179
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	fe 01       	movw	r30, r28
    1ade:	e1 5b       	subi	r30, 0xB1	; 177
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	f8 01       	movw	r30, r16
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	80 83       	st	Z, r24
    1af8:	de 01       	movw	r26, r28
    1afa:	a7 5b       	subi	r26, 0xB7	; 183
    1afc:	bf 4f       	sbci	r27, 0xFF	; 255
    1afe:	fe 01       	movw	r30, r28
    1b00:	e3 5b       	subi	r30, 0xB3	; 179
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	80 81       	ld	r24, Z
    1b06:	91 81       	ldd	r25, Z+1	; 0x01
    1b08:	8d 93       	st	X+, r24
    1b0a:	9c 93       	st	X, r25
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e7 5b       	subi	r30, 0xB7	; 183
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_voidInit+0x172>
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e7 5b       	subi	r30, 0xB7	; 183
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24

#elif LCD_InitMode == FourBit_Init
	/*Wait for more than 30ms*/
	_delay_ms(40);

	LCD_voidSendCommand(0x02);
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x02);
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>

#elif LCD_NumbersOfLines == Two_Lines
#if LCD_Font_Size == FiveEight_Size
	LCD_voidSendCommand(TwoLine_5x8_4Bit);
#elif LCD_Font_Size == FiveEleven_Size
	LCD_voidSendCommand(TwoLine_5x11_4Bit);
    1b30:	8c e0       	ldi	r24, 0x0C	; 12
    1b32:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
    1b36:	fe 01       	movw	r30, r28
    1b38:	eb 5b       	subi	r30, 0xBB	; 187
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a0 e2       	ldi	r26, 0x20	; 32
    1b42:	b2 e4       	ldi	r27, 0x42	; 66
    1b44:	80 83       	st	Z, r24
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	a2 83       	std	Z+2, r26	; 0x02
    1b4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b4c:	8e 01       	movw	r16, r28
    1b4e:	0f 5b       	subi	r16, 0xBF	; 191
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255
    1b52:	fe 01       	movw	r30, r28
    1b54:	eb 5b       	subi	r30, 0xBB	; 187
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	2b ea       	ldi	r18, 0xAB	; 171
    1b62:	3a ea       	ldi	r19, 0xAA	; 170
    1b64:	4a ea       	ldi	r20, 0xAA	; 170
    1b66:	50 e4       	ldi	r21, 0x40	; 64
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	f8 01       	movw	r30, r16
    1b72:	80 83       	st	Z, r24
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	a2 83       	std	Z+2, r26	; 0x02
    1b78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	ef 5b       	subi	r30, 0xBF	; 191
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	34 f4       	brge	.+12     	; 0x1ba4 <LCD_voidInit+0x200>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e0 5c       	subi	r30, 0xC0	; 192
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 83       	st	Z, r24
    1ba2:	9d c0       	rjmp	.+314    	; 0x1cde <LCD_voidInit+0x33a>
	else if (__tmp > 255)
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ef 5b       	subi	r30, 0xBF	; 191
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	4f e7       	ldi	r20, 0x7F	; 127
    1bb8:	53 e4       	ldi	r21, 0x43	; 67
    1bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bbe:	18 16       	cp	r1, r24
    1bc0:	0c f0       	brlt	.+2      	; 0x1bc4 <LCD_voidInit+0x220>
    1bc2:	7e c0       	rjmp	.+252    	; 0x1cc0 <LCD_voidInit+0x31c>
	{
		_delay_ms(__us / 1000.0);
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	eb 5b       	subi	r30, 0xBB	; 187
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	54 e4       	ldi	r21, 0x44	; 68
    1bda:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8c af       	std	Y+60, r24	; 0x3c
    1be4:	9d af       	std	Y+61, r25	; 0x3d
    1be6:	ae af       	std	Y+62, r26	; 0x3e
    1be8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bec:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bee:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bf0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	55 e4       	ldi	r21, 0x45	; 69
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	88 af       	std	Y+56, r24	; 0x38
    1c04:	99 af       	std	Y+57, r25	; 0x39
    1c06:	aa af       	std	Y+58, r26	; 0x3a
    1c08:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1c0a:	68 ad       	ldd	r22, Y+56	; 0x38
    1c0c:	79 ad       	ldd	r23, Y+57	; 0x39
    1c0e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c10:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_voidInit+0x288>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9f ab       	std	Y+55, r25	; 0x37
    1c28:	8e ab       	std	Y+54, r24	; 0x36
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_voidInit+0x306>
	else if (__tmp > 65535)
    1c2c:	68 ad       	ldd	r22, Y+56	; 0x38
    1c2e:	79 ad       	ldd	r23, Y+57	; 0x39
    1c30:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c32:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_voidInit+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c46:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c48:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9f ab       	std	Y+55, r25	; 0x37
    1c6a:	8e ab       	std	Y+54, r24	; 0x36
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_voidInit+0x2e8>
    1c6e:	80 e9       	ldi	r24, 0x90	; 144
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	9d ab       	std	Y+53, r25	; 0x35
    1c74:	8c ab       	std	Y+52, r24	; 0x34
    1c76:	8c a9       	ldd	r24, Y+52	; 0x34
    1c78:	9d a9       	ldd	r25, Y+53	; 0x35
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_voidInit+0x2d6>
    1c7e:	9d ab       	std	Y+53, r25	; 0x35
    1c80:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8e a9       	ldd	r24, Y+54	; 0x36
    1c84:	9f a9       	ldd	r25, Y+55	; 0x37
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9f ab       	std	Y+55, r25	; 0x37
    1c8a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8e a9       	ldd	r24, Y+54	; 0x36
    1c8e:	9f a9       	ldd	r25, Y+55	; 0x37
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_voidInit+0x2ca>
    1c94:	2d c0       	rjmp	.+90     	; 0x1cf0 <LCD_voidInit+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	68 ad       	ldd	r22, Y+56	; 0x38
    1c98:	79 ad       	ldd	r23, Y+57	; 0x39
    1c9a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c9c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9f ab       	std	Y+55, r25	; 0x37
    1ca8:	8e ab       	std	Y+54, r24	; 0x36
    1caa:	8e a9       	ldd	r24, Y+54	; 0x36
    1cac:	9f a9       	ldd	r25, Y+55	; 0x37
    1cae:	9b ab       	std	Y+51, r25	; 0x33
    1cb0:	8a ab       	std	Y+50, r24	; 0x32
    1cb2:	8a a9       	ldd	r24, Y+50	; 0x32
    1cb4:	9b a9       	ldd	r25, Y+51	; 0x33
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_voidInit+0x312>
    1cba:	9b ab       	std	Y+51, r25	; 0x33
    1cbc:	8a ab       	std	Y+50, r24	; 0x32
    1cbe:	18 c0       	rjmp	.+48     	; 0x1cf0 <LCD_voidInit+0x34c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ef 5b       	subi	r30, 0xBF	; 191
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e0 5c       	subi	r30, 0xC0	; 192
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 83       	st	Z, r24
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e0 5c       	subi	r30, 0xC0	; 192
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ce8:	89 a9       	ldd	r24, Y+49	; 0x31
    1cea:	8a 95       	dec	r24
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_voidInit+0x346>
    1cee:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_Cursor == Cursor_ON
#if LCD_Blinking == Blinking_ON
	LCD_voidSendCommand(0x00);
	LCD_voidSendCommand(DisplayOn_CursorOn_BlinkingOn);
#elif LCD_Blinking == Blinking_OFF
	LCD_voidSendCommand(0x00);
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
	LCD_voidSendCommand(DisplayOn_CursorOn_BlinkingOff);
    1cf6:	8e e0       	ldi	r24, 0x0E	; 14
    1cf8:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	a0 e2       	ldi	r26, 0x20	; 32
    1d02:	b2 e4       	ldi	r27, 0x42	; 66
    1d04:	8d a7       	std	Y+45, r24	; 0x2d
    1d06:	9e a7       	std	Y+46, r25	; 0x2e
    1d08:	af a7       	std	Y+47, r26	; 0x2f
    1d0a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d0c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d0e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d12:	98 a9       	ldd	r25, Y+48	; 0x30
    1d14:	2b ea       	ldi	r18, 0xAB	; 171
    1d16:	3a ea       	ldi	r19, 0xAA	; 170
    1d18:	4a ea       	ldi	r20, 0xAA	; 170
    1d1a:	50 e4       	ldi	r21, 0x40	; 64
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	89 a7       	std	Y+41, r24	; 0x29
    1d26:	9a a7       	std	Y+42, r25	; 0x2a
    1d28:	ab a7       	std	Y+43, r26	; 0x2b
    1d2a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d2c:	69 a5       	ldd	r22, Y+41	; 0x29
    1d2e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d30:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d32:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e8       	ldi	r20, 0x80	; 128
    1d3a:	5f e3       	ldi	r21, 0x3F	; 63
    1d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	1c f4       	brge	.+6      	; 0x1d4a <LCD_voidInit+0x3a6>
		__ticks = 1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	88 a7       	std	Y+40, r24	; 0x28
    1d48:	91 c0       	rjmp	.+290    	; 0x1e6c <LCD_voidInit+0x4c8>
	else if (__tmp > 255)
    1d4a:	69 a5       	ldd	r22, Y+41	; 0x29
    1d4c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	53 e4       	ldi	r21, 0x43	; 67
    1d5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <LCD_voidInit+0x3c0>
    1d62:	7b c0       	rjmp	.+246    	; 0x1e5a <LCD_voidInit+0x4b6>
	{
		_delay_ms(__us / 1000.0);
    1d64:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d66:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a e7       	ldi	r20, 0x7A	; 122
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8c a3       	std	Y+36, r24	; 0x24
    1d7e:	9d a3       	std	Y+37, r25	; 0x25
    1d80:	ae a3       	std	Y+38, r26	; 0x26
    1d82:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d84:	6c a1       	ldd	r22, Y+36	; 0x24
    1d86:	7d a1       	ldd	r23, Y+37	; 0x25
    1d88:	8e a1       	ldd	r24, Y+38	; 0x26
    1d8a:	9f a1       	ldd	r25, Y+39	; 0x27
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	4a e7       	ldi	r20, 0x7A	; 122
    1d92:	55 e4       	ldi	r21, 0x45	; 69
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	88 a3       	std	Y+32, r24	; 0x20
    1d9e:	99 a3       	std	Y+33, r25	; 0x21
    1da0:	aa a3       	std	Y+34, r26	; 0x22
    1da2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1da4:	68 a1       	ldd	r22, Y+32	; 0x20
    1da6:	79 a1       	ldd	r23, Y+33	; 0x21
    1da8:	8a a1       	ldd	r24, Y+34	; 0x22
    1daa:	9b a1       	ldd	r25, Y+35	; 0x23
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f e3       	ldi	r21, 0x3F	; 63
    1db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db8:	88 23       	and	r24, r24
    1dba:	2c f4       	brge	.+10     	; 0x1dc6 <LCD_voidInit+0x422>
		__ticks = 1;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9f 8f       	std	Y+31, r25	; 0x1f
    1dc2:	8e 8f       	std	Y+30, r24	; 0x1e
    1dc4:	3f c0       	rjmp	.+126    	; 0x1e44 <LCD_voidInit+0x4a0>
	else if (__tmp > 65535)
    1dc6:	68 a1       	ldd	r22, Y+32	; 0x20
    1dc8:	79 a1       	ldd	r23, Y+33	; 0x21
    1dca:	8a a1       	ldd	r24, Y+34	; 0x22
    1dcc:	9b a1       	ldd	r25, Y+35	; 0x23
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	3f ef       	ldi	r19, 0xFF	; 255
    1dd2:	4f e7       	ldi	r20, 0x7F	; 127
    1dd4:	57 e4       	ldi	r21, 0x47	; 71
    1dd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dda:	18 16       	cp	r1, r24
    1ddc:	4c f5       	brge	.+82     	; 0x1e30 <LCD_voidInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dde:	6c a1       	ldd	r22, Y+36	; 0x24
    1de0:	7d a1       	ldd	r23, Y+37	; 0x25
    1de2:	8e a1       	ldd	r24, Y+38	; 0x26
    1de4:	9f a1       	ldd	r25, Y+39	; 0x27
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e2       	ldi	r20, 0x20	; 32
    1dec:	51 e4       	ldi	r21, 0x41	; 65
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9f 8f       	std	Y+31, r25	; 0x1f
    1e04:	8e 8f       	std	Y+30, r24	; 0x1e
    1e06:	0f c0       	rjmp	.+30     	; 0x1e26 <LCD_voidInit+0x482>
    1e08:	80 e9       	ldi	r24, 0x90	; 144
    1e0a:	91 e0       	ldi	r25, 0x01	; 1
    1e0c:	9d 8f       	std	Y+29, r25	; 0x1d
    1e0e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e10:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e12:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_voidInit+0x470>
    1e18:	9d 8f       	std	Y+29, r25	; 0x1d
    1e1a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	9f 8f       	std	Y+31, r25	; 0x1f
    1e24:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	69 f7       	brne	.-38     	; 0x1e08 <LCD_voidInit+0x464>
    1e2e:	24 c0       	rjmp	.+72     	; 0x1e78 <LCD_voidInit+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e30:	68 a1       	ldd	r22, Y+32	; 0x20
    1e32:	79 a1       	ldd	r23, Y+33	; 0x21
    1e34:	8a a1       	ldd	r24, Y+34	; 0x22
    1e36:	9b a1       	ldd	r25, Y+35	; 0x23
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9f 8f       	std	Y+31, r25	; 0x1f
    1e42:	8e 8f       	std	Y+30, r24	; 0x1e
    1e44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e46:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e48:	9b 8f       	std	Y+27, r25	; 0x1b
    1e4a:	8a 8f       	std	Y+26, r24	; 0x1a
    1e4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e4e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_voidInit+0x4ac>
    1e54:	9b 8f       	std	Y+27, r25	; 0x1b
    1e56:	8a 8f       	std	Y+26, r24	; 0x1a
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <LCD_voidInit+0x4d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e5a:	69 a5       	ldd	r22, Y+41	; 0x29
    1e5c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e60:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	88 a7       	std	Y+40, r24	; 0x28
    1e6c:	88 a5       	ldd	r24, Y+40	; 0x28
    1e6e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e70:	89 8d       	ldd	r24, Y+25	; 0x19
    1e72:	8a 95       	dec	r24
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_voidInit+0x4ce>
    1e76:	89 8f       	std	Y+25, r24	; 0x19
#endif  /*Display*/

	/*Wait for more than 39us*/
	_delay_us(40);
	/*Display Clear*/
	LCD_voidSendCommand(0x00);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
	LCD_voidSendCommand(CLEAR_DISPLAY);
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a8 ec       	ldi	r26, 0xC8	; 200
    1e8a:	b4 e4       	ldi	r27, 0x44	; 68
    1e8c:	8d 8b       	std	Y+21, r24	; 0x15
    1e8e:	9e 8b       	std	Y+22, r25	; 0x16
    1e90:	af 8b       	std	Y+23, r26	; 0x17
    1e92:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	2b ea       	ldi	r18, 0xAB	; 171
    1e9e:	3a ea       	ldi	r19, 0xAA	; 170
    1ea0:	4a ea       	ldi	r20, 0xAA	; 170
    1ea2:	50 e4       	ldi	r21, 0x40	; 64
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	89 8b       	std	Y+17, r24	; 0x11
    1eae:	9a 8b       	std	Y+18, r25	; 0x12
    1eb0:	ab 8b       	std	Y+19, r26	; 0x13
    1eb2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1eb4:	69 89       	ldd	r22, Y+17	; 0x11
    1eb6:	7a 89       	ldd	r23, Y+18	; 0x12
    1eb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eba:	9c 89       	ldd	r25, Y+20	; 0x14
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	1c f4       	brge	.+6      	; 0x1ed2 <LCD_voidInit+0x52e>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	88 8b       	std	Y+16, r24	; 0x10
    1ed0:	91 c0       	rjmp	.+290    	; 0x1ff4 <LCD_voidInit+0x650>
	else if (__tmp > 255)
    1ed2:	69 89       	ldd	r22, Y+17	; 0x11
    1ed4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	53 e4       	ldi	r21, 0x43	; 67
    1ee2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	0c f0       	brlt	.+2      	; 0x1eec <LCD_voidInit+0x548>
    1eea:	7b c0       	rjmp	.+246    	; 0x1fe2 <LCD_voidInit+0x63e>
	{
		_delay_ms(__us / 1000.0);
    1eec:	6d 89       	ldd	r22, Y+21	; 0x15
    1eee:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4a e7       	ldi	r20, 0x7A	; 122
    1efa:	54 e4       	ldi	r21, 0x44	; 68
    1efc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	8c 87       	std	Y+12, r24	; 0x0c
    1f06:	9d 87       	std	Y+13, r25	; 0x0d
    1f08:	ae 87       	std	Y+14, r26	; 0x0e
    1f0a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f10:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f12:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	4a e7       	ldi	r20, 0x7A	; 122
    1f1a:	55 e4       	ldi	r21, 0x45	; 69
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	88 87       	std	Y+8, r24	; 0x08
    1f26:	99 87       	std	Y+9, r25	; 0x09
    1f28:	aa 87       	std	Y+10, r26	; 0x0a
    1f2a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f2c:	68 85       	ldd	r22, Y+8	; 0x08
    1f2e:	79 85       	ldd	r23, Y+9	; 0x09
    1f30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <LCD_voidInit+0x5aa>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9f 83       	std	Y+7, r25	; 0x07
    1f4a:	8e 83       	std	Y+6, r24	; 0x06
    1f4c:	3f c0       	rjmp	.+126    	; 0x1fcc <LCD_voidInit+0x628>
	else if (__tmp > 65535)
    1f4e:	68 85       	ldd	r22, Y+8	; 0x08
    1f50:	79 85       	ldd	r23, Y+9	; 0x09
    1f52:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f54:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	4c f5       	brge	.+82     	; 0x1fb8 <LCD_voidInit+0x614>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f68:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9f 83       	std	Y+7, r25	; 0x07
    1f8c:	8e 83       	std	Y+6, r24	; 0x06
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <LCD_voidInit+0x60a>
    1f90:	80 e9       	ldi	r24, 0x90	; 144
    1f92:	91 e0       	ldi	r25, 0x01	; 1
    1f94:	9d 83       	std	Y+5, r25	; 0x05
    1f96:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f98:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_voidInit+0x5f8>
    1fa0:	9d 83       	std	Y+5, r25	; 0x05
    1fa2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	9f 83       	std	Y+7, r25	; 0x07
    1fac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	69 f7       	brne	.-38     	; 0x1f90 <LCD_voidInit+0x5ec>
    1fb6:	24 c0       	rjmp	.+72     	; 0x2000 <LCD_voidInit+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	68 85       	ldd	r22, Y+8	; 0x08
    1fba:	79 85       	ldd	r23, Y+9	; 0x09
    1fbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9f 83       	std	Y+7, r25	; 0x07
    1fca:	8e 83       	std	Y+6, r24	; 0x06
    1fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fce:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd0:	9b 83       	std	Y+3, r25	; 0x03
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_voidInit+0x634>
    1fdc:	9b 83       	std	Y+3, r25	; 0x03
    1fde:	8a 83       	std	Y+2, r24	; 0x02
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <LCD_voidInit+0x65c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe2:	69 89       	ldd	r22, Y+17	; 0x11
    1fe4:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	88 8b       	std	Y+16, r24	; 0x10
    1ff4:	88 89       	ldd	r24, Y+16	; 0x10
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	8a 95       	dec	r24
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_voidInit+0x656>
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 1.53ms*/
	_delay_us(1600);
	/*Entry Mode Set*/
	LCD_voidSendCommand(0x00);
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
	LCD_voidSendCommand(ENTRY_MODE_SET);
    2006:	86 e0       	ldi	r24, 0x06	; 6
    2008:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>

#else
#error "Wrong LCD init mode"

#endif
}
    200c:	ca 5a       	subi	r28, 0xAA	; 170
    200e:	df 4f       	sbci	r29, 0xFF	; 255
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	08 95       	ret

00002024 <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	6d 97       	sbiw	r28, 0x1d	; 29
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set Rs to 0 to choose IR register to send command -----> 0 (Instruction Register), 1(Data Register)*/
	DIO_u8SetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	65 e0       	ldi	r22, 0x05	; 5
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>

	/*Set R/W to 0 so i can write data ----> 0 (write), 1(read)*/
	DIO_u8SetPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	66 e0       	ldi	r22, 0x06	; 6
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D4, LCD_DATA_PIN_D4, (Copy_u8Command >> 4) & 1);
	DIO_u8SetPinValue(LCD_DATA_PORT_D5, LCD_DATA_PIN_D5, (Copy_u8Command >> 5) & 1);
	DIO_u8SetPinValue(LCD_DATA_PORT_D6, LCD_DATA_PIN_D6, (Copy_u8Command >> 6) & 1);
	DIO_u8SetPinValue(LCD_DATA_PORT_D7, LCD_DATA_PIN_D7, (Copy_u8Command >> 7) & 1);
#elif LCD_InitMode == FourBit_Init
	DIO_u8SetPinValue(LCD_DATA_PORT_D4, LCD_DATA_PIN_D4, (Copy_u8Command) & 1);
    204e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2050:	98 2f       	mov	r25, r24
    2052:	91 70       	andi	r25, 0x01	; 1
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	64 e0       	ldi	r22, 0x04	; 4
    2058:	49 2f       	mov	r20, r25
    205a:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D5, LCD_DATA_PIN_D5, (Copy_u8Command >> 1) & 1);
    205e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2060:	86 95       	lsr	r24
    2062:	98 2f       	mov	r25, r24
    2064:	91 70       	andi	r25, 0x01	; 1
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	65 e0       	ldi	r22, 0x05	; 5
    206a:	49 2f       	mov	r20, r25
    206c:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D6, LCD_DATA_PIN_D6, (Copy_u8Command >> 2) & 1);
    2070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2072:	86 95       	lsr	r24
    2074:	86 95       	lsr	r24
    2076:	98 2f       	mov	r25, r24
    2078:	91 70       	andi	r25, 0x01	; 1
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	66 e0       	ldi	r22, 0x06	; 6
    207e:	49 2f       	mov	r20, r25
    2080:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D7, LCD_DATA_PIN_D7, (Copy_u8Command >> 3) & 1);
    2084:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2086:	86 95       	lsr	r24
    2088:	86 95       	lsr	r24
    208a:	86 95       	lsr	r24
    208c:	98 2f       	mov	r25, r24
    208e:	91 70       	andi	r25, 0x01	; 1
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	67 e0       	ldi	r22, 0x07	; 7
    2094:	49 2f       	mov	r20, r25
    2096:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
#else
#error "Wrong LCD init mode"
#endif
	/*Set enable pin from high to low with wide as 230ns*/
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	67 e0       	ldi	r22, 0x07	; 7
    209e:	41 e0       	ldi	r20, 0x01	; 1
    20a0:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e0       	ldi	r26, 0x00	; 0
    20aa:	b0 e4       	ldi	r27, 0x40	; 64
    20ac:	89 8f       	std	Y+25, r24	; 0x19
    20ae:	9a 8f       	std	Y+26, r25	; 0x1a
    20b0:	ab 8f       	std	Y+27, r26	; 0x1b
    20b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	69 8d       	ldd	r22, Y+25	; 0x19
    20b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a e7       	ldi	r20, 0x7A	; 122
    20c2:	55 e4       	ldi	r21, 0x45	; 69
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8d 8b       	std	Y+21, r24	; 0x15
    20ce:	9e 8b       	std	Y+22, r25	; 0x16
    20d0:	af 8b       	std	Y+23, r26	; 0x17
    20d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <LCD_voidSendCommand+0xd2>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 8b       	std	Y+20, r25	; 0x14
    20f2:	8b 8b       	std	Y+19, r24	; 0x13
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <LCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
    20f6:	6d 89       	ldd	r22, Y+21	; 0x15
    20f8:	7e 89       	ldd	r23, Y+22	; 0x16
    20fa:	8f 89       	ldd	r24, Y+23	; 0x17
    20fc:	98 8d       	ldd	r25, Y+24	; 0x18
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <LCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	69 8d       	ldd	r22, Y+25	; 0x19
    2110:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2114:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9c 8b       	std	Y+20, r25	; 0x14
    2134:	8b 8b       	std	Y+19, r24	; 0x13
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <LCD_voidSendCommand+0x132>
    2138:	80 e9       	ldi	r24, 0x90	; 144
    213a:	91 e0       	ldi	r25, 0x01	; 1
    213c:	9a 8b       	std	Y+18, r25	; 0x12
    213e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	9a 89       	ldd	r25, Y+18	; 0x12
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_voidSendCommand+0x120>
    2148:	9a 8b       	std	Y+18, r25	; 0x12
    214a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	8b 89       	ldd	r24, Y+19	; 0x13
    214e:	9c 89       	ldd	r25, Y+20	; 0x14
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9c 8b       	std	Y+20, r25	; 0x14
    2154:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	69 f7       	brne	.-38     	; 0x2138 <LCD_voidSendCommand+0x114>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <LCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	6d 89       	ldd	r22, Y+21	; 0x15
    2162:	7e 89       	ldd	r23, Y+22	; 0x16
    2164:	8f 89       	ldd	r24, Y+23	; 0x17
    2166:	98 8d       	ldd	r25, Y+24	; 0x18
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9c 8b       	std	Y+20, r25	; 0x14
    2172:	8b 8b       	std	Y+19, r24	; 0x13
    2174:	8b 89       	ldd	r24, Y+19	; 0x13
    2176:	9c 89       	ldd	r25, Y+20	; 0x14
    2178:	98 8b       	std	Y+16, r25	; 0x10
    217a:	8f 87       	std	Y+15, r24	; 0x0f
    217c:	8f 85       	ldd	r24, Y+15	; 0x0f
    217e:	98 89       	ldd	r25, Y+16	; 0x10
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_voidSendCommand+0x15c>
    2184:	98 8b       	std	Y+16, r25	; 0x10
    2186:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	67 e0       	ldi	r22, 0x07	; 7
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a0 e2       	ldi	r26, 0x20	; 32
    2198:	b1 e4       	ldi	r27, 0x41	; 65
    219a:	8b 87       	std	Y+11, r24	; 0x0b
    219c:	9c 87       	std	Y+12, r25	; 0x0c
    219e:	ad 87       	std	Y+13, r26	; 0x0d
    21a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4a e7       	ldi	r20, 0x7A	; 122
    21b0:	55 e4       	ldi	r21, 0x45	; 69
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	8f 83       	std	Y+7, r24	; 0x07
    21bc:	98 87       	std	Y+8, r25	; 0x08
    21be:	a9 87       	std	Y+9, r26	; 0x09
    21c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e8       	ldi	r20, 0x80	; 128
    21d0:	5f e3       	ldi	r21, 0x3F	; 63
    21d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d6:	88 23       	and	r24, r24
    21d8:	2c f4       	brge	.+10     	; 0x21e4 <LCD_voidSendCommand+0x1c0>
		__ticks = 1;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	3f c0       	rjmp	.+126    	; 0x2262 <LCD_voidSendCommand+0x23e>
	else if (__tmp > 65535)
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	3f ef       	ldi	r19, 0xFF	; 255
    21f0:	4f e7       	ldi	r20, 0x7F	; 127
    21f2:	57 e4       	ldi	r21, 0x47	; 71
    21f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f8:	18 16       	cp	r1, r24
    21fa:	4c f5       	brge	.+82     	; 0x224e <LCD_voidSendCommand+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2200:	8d 85       	ldd	r24, Y+13	; 0x0d
    2202:	9e 85       	ldd	r25, Y+14	; 0x0e
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e2       	ldi	r20, 0x20	; 32
    220a:	51 e4       	ldi	r21, 0x41	; 65
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	bc 01       	movw	r22, r24
    2216:	cd 01       	movw	r24, r26
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
    2224:	0f c0       	rjmp	.+30     	; 0x2244 <LCD_voidSendCommand+0x220>
    2226:	80 e9       	ldi	r24, 0x90	; 144
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	9c 83       	std	Y+4, r25	; 0x04
    222c:	8b 83       	std	Y+3, r24	; 0x03
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <LCD_voidSendCommand+0x20e>
    2236:	9c 83       	std	Y+4, r25	; 0x04
    2238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	69 f7       	brne	.-38     	; 0x2226 <LCD_voidSendCommand+0x202>
    224c:	14 c0       	rjmp	.+40     	; 0x2276 <LCD_voidSendCommand+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224e:	6f 81       	ldd	r22, Y+7	; 0x07
    2250:	78 85       	ldd	r23, Y+8	; 0x08
    2252:	89 85       	ldd	r24, Y+9	; 0x09
    2254:	9a 85       	ldd	r25, Y+10	; 0x0a
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <LCD_voidSendCommand+0x24a>
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01

	/* Delay to let the LCD Display the character */
	_delay_ms(10);
}
    2276:	6d 96       	adiw	r28, 0x1d	; 29
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <LCD_voidClearDisplay>:


void LCD_voidClearDisplay(void)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
#if LCD_InitMode == EightBit_Init
	LCD_voidSendCommand(CLEAR_DISPLAY);
	LCD_voidSendCommand(CURSOR_OFFEST);
#elif LCD_InitMode == FourBit_Init
	LCD_voidSendCommand(CLEAR_DISPLAY >> 4);		//upper nibble
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
	LCD_voidSendCommand(CLEAR_DISPLAY);				//lower nibble
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>

	LCD_voidSendCommand(CURSOR_OFFEST >> 4);        //upper nibble
    229c:	88 e0       	ldi	r24, 0x08	; 8
    229e:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
	LCD_voidSendCommand(CURSOR_OFFEST);             //lower nibble
    22a2:	80 e8       	ldi	r24, 0x80	; 128
    22a4:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
#endif
}
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <LCD_voidSendCharacter>:


void LCD_voidSendCharacter(u8 Copy_u8Character)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	e9 97       	sbiw	r28, 0x39	; 57
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	89 af       	std	Y+57, r24	; 0x39
	/*Set Rs to 0 to choose IR register to send command -----> 0 (Instruction Register), 1(Data Register)*/
	DIO_u8SetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	65 e0       	ldi	r22, 0x05	; 5
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>

	/*Set R/W to 0 so i can write data ----> 0 (write), 1(read)*/
	DIO_u8SetPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	66 e0       	ldi	r22, 0x06	; 6
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>

	/* Delay to let the LCD Display the character */
	_delay_ms(10);
#elif LCD_InitMode == FourBit_Init
	//send upper nibble first
	DIO_u8SetPinValue(LCD_DATA_PORT_D4, LCD_DATA_PIN_D4, (Copy_u8Character >> 4) & 1);
    22d8:	89 ad       	ldd	r24, Y+57	; 0x39
    22da:	82 95       	swap	r24
    22dc:	8f 70       	andi	r24, 0x0F	; 15
    22de:	98 2f       	mov	r25, r24
    22e0:	91 70       	andi	r25, 0x01	; 1
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	64 e0       	ldi	r22, 0x04	; 4
    22e6:	49 2f       	mov	r20, r25
    22e8:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D5, LCD_DATA_PIN_D5, (Copy_u8Character >> 5) & 1);
    22ec:	89 ad       	ldd	r24, Y+57	; 0x39
    22ee:	82 95       	swap	r24
    22f0:	86 95       	lsr	r24
    22f2:	87 70       	andi	r24, 0x07	; 7
    22f4:	98 2f       	mov	r25, r24
    22f6:	91 70       	andi	r25, 0x01	; 1
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	65 e0       	ldi	r22, 0x05	; 5
    22fc:	49 2f       	mov	r20, r25
    22fe:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D6, LCD_DATA_PIN_D6, (Copy_u8Character >> 6) & 1);
    2302:	89 ad       	ldd	r24, Y+57	; 0x39
    2304:	82 95       	swap	r24
    2306:	86 95       	lsr	r24
    2308:	86 95       	lsr	r24
    230a:	83 70       	andi	r24, 0x03	; 3
    230c:	98 2f       	mov	r25, r24
    230e:	91 70       	andi	r25, 0x01	; 1
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	66 e0       	ldi	r22, 0x06	; 6
    2314:	49 2f       	mov	r20, r25
    2316:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D7, LCD_DATA_PIN_D7, (Copy_u8Character >> 7) & 1);
    231a:	89 ad       	ldd	r24, Y+57	; 0x39
    231c:	98 2f       	mov	r25, r24
    231e:	99 1f       	adc	r25, r25
    2320:	99 27       	eor	r25, r25
    2322:	99 1f       	adc	r25, r25
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	67 e0       	ldi	r22, 0x07	; 7
    2328:	49 2f       	mov	r20, r25
    232a:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>

	/*Set enable pin from high to low with wide as 230ns*/
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	67 e0       	ldi	r22, 0x07	; 7
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e0       	ldi	r26, 0x00	; 0
    233e:	b0 e4       	ldi	r27, 0x40	; 64
    2340:	8d ab       	std	Y+53, r24	; 0x35
    2342:	9e ab       	std	Y+54, r25	; 0x36
    2344:	af ab       	std	Y+55, r26	; 0x37
    2346:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6d a9       	ldd	r22, Y+53	; 0x35
    234a:	7e a9       	ldd	r23, Y+54	; 0x36
    234c:	8f a9       	ldd	r24, Y+55	; 0x37
    234e:	98 ad       	ldd	r25, Y+56	; 0x38
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	55 e4       	ldi	r21, 0x45	; 69
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	89 ab       	std	Y+49, r24	; 0x31
    2362:	9a ab       	std	Y+50, r25	; 0x32
    2364:	ab ab       	std	Y+51, r26	; 0x33
    2366:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2368:	69 a9       	ldd	r22, Y+49	; 0x31
    236a:	7a a9       	ldd	r23, Y+50	; 0x32
    236c:	8b a9       	ldd	r24, Y+51	; 0x33
    236e:	9c a9       	ldd	r25, Y+52	; 0x34
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <LCD_voidSendCharacter+0xdc>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	98 ab       	std	Y+48, r25	; 0x30
    2386:	8f a7       	std	Y+47, r24	; 0x2f
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <LCD_voidSendCharacter+0x15a>
	else if (__tmp > 65535)
    238a:	69 a9       	ldd	r22, Y+49	; 0x31
    238c:	7a a9       	ldd	r23, Y+50	; 0x32
    238e:	8b a9       	ldd	r24, Y+51	; 0x33
    2390:	9c a9       	ldd	r25, Y+52	; 0x34
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <LCD_voidSendCharacter+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	6d a9       	ldd	r22, Y+53	; 0x35
    23a4:	7e a9       	ldd	r23, Y+54	; 0x36
    23a6:	8f a9       	ldd	r24, Y+55	; 0x37
    23a8:	98 ad       	ldd	r25, Y+56	; 0x38
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	98 ab       	std	Y+48, r25	; 0x30
    23c8:	8f a7       	std	Y+47, r24	; 0x2f
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <LCD_voidSendCharacter+0x13c>
    23cc:	80 e9       	ldi	r24, 0x90	; 144
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	9e a7       	std	Y+46, r25	; 0x2e
    23d2:	8d a7       	std	Y+45, r24	; 0x2d
    23d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    23d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_voidSendCharacter+0x12a>
    23dc:	9e a7       	std	Y+46, r25	; 0x2e
    23de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e2:	98 a9       	ldd	r25, Y+48	; 0x30
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	98 ab       	std	Y+48, r25	; 0x30
    23e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ec:	98 a9       	ldd	r25, Y+48	; 0x30
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <LCD_voidSendCharacter+0x11e>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <LCD_voidSendCharacter+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	69 a9       	ldd	r22, Y+49	; 0x31
    23f6:	7a a9       	ldd	r23, Y+50	; 0x32
    23f8:	8b a9       	ldd	r24, Y+51	; 0x33
    23fa:	9c a9       	ldd	r25, Y+52	; 0x34
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	98 ab       	std	Y+48, r25	; 0x30
    2406:	8f a7       	std	Y+47, r24	; 0x2f
    2408:	8f a5       	ldd	r24, Y+47	; 0x2f
    240a:	98 a9       	ldd	r25, Y+48	; 0x30
    240c:	9c a7       	std	Y+44, r25	; 0x2c
    240e:	8b a7       	std	Y+43, r24	; 0x2b
    2410:	8b a5       	ldd	r24, Y+43	; 0x2b
    2412:	9c a5       	ldd	r25, Y+44	; 0x2c
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <LCD_voidSendCharacter+0x166>
    2418:	9c a7       	std	Y+44, r25	; 0x2c
    241a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	67 e0       	ldi	r22, 0x07	; 7
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e0       	ldi	r26, 0x00	; 0
    242c:	b0 e4       	ldi	r27, 0x40	; 64
    242e:	8f a3       	std	Y+39, r24	; 0x27
    2430:	98 a7       	std	Y+40, r25	; 0x28
    2432:	a9 a7       	std	Y+41, r26	; 0x29
    2434:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	6f a1       	ldd	r22, Y+39	; 0x27
    2438:	78 a5       	ldd	r23, Y+40	; 0x28
    243a:	89 a5       	ldd	r24, Y+41	; 0x29
    243c:	9a a5       	ldd	r25, Y+42	; 0x2a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a e7       	ldi	r20, 0x7A	; 122
    2444:	55 e4       	ldi	r21, 0x45	; 69
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	8b a3       	std	Y+35, r24	; 0x23
    2450:	9c a3       	std	Y+36, r25	; 0x24
    2452:	ad a3       	std	Y+37, r26	; 0x25
    2454:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2456:	6b a1       	ldd	r22, Y+35	; 0x23
    2458:	7c a1       	ldd	r23, Y+36	; 0x24
    245a:	8d a1       	ldd	r24, Y+37	; 0x25
    245c:	9e a1       	ldd	r25, Y+38	; 0x26
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	2c f4       	brge	.+10     	; 0x2478 <LCD_voidSendCharacter+0x1ca>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	9a a3       	std	Y+34, r25	; 0x22
    2474:	89 a3       	std	Y+33, r24	; 0x21
    2476:	3f c0       	rjmp	.+126    	; 0x24f6 <LCD_voidSendCharacter+0x248>
	else if (__tmp > 65535)
    2478:	6b a1       	ldd	r22, Y+35	; 0x23
    247a:	7c a1       	ldd	r23, Y+36	; 0x24
    247c:	8d a1       	ldd	r24, Y+37	; 0x25
    247e:	9e a1       	ldd	r25, Y+38	; 0x26
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	57 e4       	ldi	r21, 0x47	; 71
    2488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	4c f5       	brge	.+82     	; 0x24e2 <LCD_voidSendCharacter+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	6f a1       	ldd	r22, Y+39	; 0x27
    2492:	78 a5       	ldd	r23, Y+40	; 0x28
    2494:	89 a5       	ldd	r24, Y+41	; 0x29
    2496:	9a a5       	ldd	r25, Y+42	; 0x2a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9a a3       	std	Y+34, r25	; 0x22
    24b6:	89 a3       	std	Y+33, r24	; 0x21
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <LCD_voidSendCharacter+0x22a>
    24ba:	80 e9       	ldi	r24, 0x90	; 144
    24bc:	91 e0       	ldi	r25, 0x01	; 1
    24be:	98 a3       	std	Y+32, r25	; 0x20
    24c0:	8f 8f       	std	Y+31, r24	; 0x1f
    24c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c4:	98 a1       	ldd	r25, Y+32	; 0x20
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_voidSendCharacter+0x218>
    24ca:	98 a3       	std	Y+32, r25	; 0x20
    24cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	89 a1       	ldd	r24, Y+33	; 0x21
    24d0:	9a a1       	ldd	r25, Y+34	; 0x22
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	9a a3       	std	Y+34, r25	; 0x22
    24d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	89 a1       	ldd	r24, Y+33	; 0x21
    24da:	9a a1       	ldd	r25, Y+34	; 0x22
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <LCD_voidSendCharacter+0x20c>
    24e0:	14 c0       	rjmp	.+40     	; 0x250a <LCD_voidSendCharacter+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	6b a1       	ldd	r22, Y+35	; 0x23
    24e4:	7c a1       	ldd	r23, Y+36	; 0x24
    24e6:	8d a1       	ldd	r24, Y+37	; 0x25
    24e8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
    24f6:	89 a1       	ldd	r24, Y+33	; 0x21
    24f8:	9a a1       	ldd	r25, Y+34	; 0x22
    24fa:	9e 8f       	std	Y+30, r25	; 0x1e
    24fc:	8d 8f       	std	Y+29, r24	; 0x1d
    24fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2500:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_voidSendCharacter+0x254>
    2506:	9e 8f       	std	Y+30, r25	; 0x1e
    2508:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Delay to let the LCD Display the character */
	_delay_ms(2);

	//send lower nibble second
	DIO_u8SetPinValue(LCD_DATA_PORT_D4, LCD_DATA_PIN_D4, (Copy_u8Character) & 1);
    250a:	89 ad       	ldd	r24, Y+57	; 0x39
    250c:	98 2f       	mov	r25, r24
    250e:	91 70       	andi	r25, 0x01	; 1
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	64 e0       	ldi	r22, 0x04	; 4
    2514:	49 2f       	mov	r20, r25
    2516:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D5, LCD_DATA_PIN_D5, (Copy_u8Character >> 1) & 1);
    251a:	89 ad       	ldd	r24, Y+57	; 0x39
    251c:	86 95       	lsr	r24
    251e:	98 2f       	mov	r25, r24
    2520:	91 70       	andi	r25, 0x01	; 1
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	65 e0       	ldi	r22, 0x05	; 5
    2526:	49 2f       	mov	r20, r25
    2528:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D6, LCD_DATA_PIN_D6, (Copy_u8Character >> 2) & 1);
    252c:	89 ad       	ldd	r24, Y+57	; 0x39
    252e:	86 95       	lsr	r24
    2530:	86 95       	lsr	r24
    2532:	98 2f       	mov	r25, r24
    2534:	91 70       	andi	r25, 0x01	; 1
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	66 e0       	ldi	r22, 0x06	; 6
    253a:	49 2f       	mov	r20, r25
    253c:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D7, LCD_DATA_PIN_D7, (Copy_u8Character >> 3) & 1);
    2540:	89 ad       	ldd	r24, Y+57	; 0x39
    2542:	86 95       	lsr	r24
    2544:	86 95       	lsr	r24
    2546:	86 95       	lsr	r24
    2548:	98 2f       	mov	r25, r24
    254a:	91 70       	andi	r25, 0x01	; 1
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	67 e0       	ldi	r22, 0x07	; 7
    2550:	49 2f       	mov	r20, r25
    2552:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>

	/*Set enable pin from high to low with wide as 230ns*/
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	67 e0       	ldi	r22, 0x07	; 7
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e0       	ldi	r26, 0x00	; 0
    2566:	b0 e4       	ldi	r27, 0x40	; 64
    2568:	89 8f       	std	Y+25, r24	; 0x19
    256a:	9a 8f       	std	Y+26, r25	; 0x1a
    256c:	ab 8f       	std	Y+27, r26	; 0x1b
    256e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	69 8d       	ldd	r22, Y+25	; 0x19
    2572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a e7       	ldi	r20, 0x7A	; 122
    257e:	55 e4       	ldi	r21, 0x45	; 69
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	8d 8b       	std	Y+21, r24	; 0x15
    258a:	9e 8b       	std	Y+22, r25	; 0x16
    258c:	af 8b       	std	Y+23, r26	; 0x17
    258e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2590:	6d 89       	ldd	r22, Y+21	; 0x15
    2592:	7e 89       	ldd	r23, Y+22	; 0x16
    2594:	8f 89       	ldd	r24, Y+23	; 0x17
    2596:	98 8d       	ldd	r25, Y+24	; 0x18
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <LCD_voidSendCharacter+0x304>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9c 8b       	std	Y+20, r25	; 0x14
    25ae:	8b 8b       	std	Y+19, r24	; 0x13
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <LCD_voidSendCharacter+0x382>
	else if (__tmp > 65535)
    25b2:	6d 89       	ldd	r22, Y+21	; 0x15
    25b4:	7e 89       	ldd	r23, Y+22	; 0x16
    25b6:	8f 89       	ldd	r24, Y+23	; 0x17
    25b8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <LCD_voidSendCharacter+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	69 8d       	ldd	r22, Y+25	; 0x19
    25cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <LCD_voidSendCharacter+0x364>
    25f4:	80 e9       	ldi	r24, 0x90	; 144
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	9a 8b       	std	Y+18, r25	; 0x12
    25fa:	89 8b       	std	Y+17, r24	; 0x11
    25fc:	89 89       	ldd	r24, Y+17	; 0x11
    25fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_voidSendCharacter+0x352>
    2604:	9a 8b       	std	Y+18, r25	; 0x12
    2606:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9c 8b       	std	Y+20, r25	; 0x14
    2610:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8b 89       	ldd	r24, Y+19	; 0x13
    2614:	9c 89       	ldd	r25, Y+20	; 0x14
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <LCD_voidSendCharacter+0x346>
    261a:	14 c0       	rjmp	.+40     	; 0x2644 <LCD_voidSendCharacter+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	6d 89       	ldd	r22, Y+21	; 0x15
    261e:	7e 89       	ldd	r23, Y+22	; 0x16
    2620:	8f 89       	ldd	r24, Y+23	; 0x17
    2622:	98 8d       	ldd	r25, Y+24	; 0x18
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9c 8b       	std	Y+20, r25	; 0x14
    262e:	8b 8b       	std	Y+19, r24	; 0x13
    2630:	8b 89       	ldd	r24, Y+19	; 0x13
    2632:	9c 89       	ldd	r25, Y+20	; 0x14
    2634:	98 8b       	std	Y+16, r25	; 0x10
    2636:	8f 87       	std	Y+15, r24	; 0x0f
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	98 89       	ldd	r25, Y+16	; 0x10
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_voidSendCharacter+0x38e>
    2640:	98 8b       	std	Y+16, r25	; 0x10
    2642:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	67 e0       	ldi	r22, 0x07	; 7
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e0       	ldi	r26, 0x00	; 0
    2654:	b0 e4       	ldi	r27, 0x40	; 64
    2656:	8b 87       	std	Y+11, r24	; 0x0b
    2658:	9c 87       	std	Y+12, r25	; 0x0c
    265a:	ad 87       	std	Y+13, r26	; 0x0d
    265c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	55 e4       	ldi	r21, 0x45	; 69
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8f 83       	std	Y+7, r24	; 0x07
    2678:	98 87       	std	Y+8, r25	; 0x08
    267a:	a9 87       	std	Y+9, r26	; 0x09
    267c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_voidSendCharacter+0x3f2>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	3f c0       	rjmp	.+126    	; 0x271e <LCD_voidSendCharacter+0x470>
	else if (__tmp > 65535)
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <LCD_voidSendCharacter+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    26bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26be:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <LCD_voidSendCharacter+0x452>
    26e2:	80 e9       	ldi	r24, 0x90	; 144
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_voidSendCharacter+0x440>
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <LCD_voidSendCharacter+0x434>
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <LCD_voidSendCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_voidSendCharacter+0x47c>
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "Wrong LCD init mode"
#endif

}
    2732:	e9 96       	adiw	r28, 0x39	; 57
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <LCD_u8SendString>:


u8 LCD_u8SendString(const char* Copy_pchString)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <LCD_u8SendString+0x6>
    274a:	00 d0       	rcall	.+0      	; 0x274c <LCD_u8SendString+0x8>
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	9c 83       	std	Y+4, r25	; 0x04
    2752:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Iterator=0, Local_u8ErrorStatus = OK;
    2754:	1a 82       	std	Y+2, r1	; 0x02
    2756:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pchString != NULL)
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	d9 f0       	breq	.+54     	; 0x2796 <LCD_u8SendString+0x52>
    2760:	0e c0       	rjmp	.+28     	; 0x277e <LCD_u8SendString+0x3a>
	{
		while(Copy_pchString[Local_u8Iterator] != '\0')
		{
			LCD_voidSendCharacter(Copy_pchString[Local_u8Iterator]);
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	fc 01       	movw	r30, r24
    276e:	e2 0f       	add	r30, r18
    2770:	f3 1f       	adc	r31, r19
    2772:	80 81       	ld	r24, Z
    2774:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_voidSendCharacter>
			Local_u8Iterator++;
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	8f 5f       	subi	r24, 0xFF	; 255
    277c:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 Local_u8Iterator=0, Local_u8ErrorStatus = OK;

	if(Copy_pchString != NULL)
	{
		while(Copy_pchString[Local_u8Iterator] != '\0')
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	9c 81       	ldd	r25, Y+4	; 0x04
    2788:	fc 01       	movw	r30, r24
    278a:	e2 0f       	add	r30, r18
    278c:	f3 1f       	adc	r31, r19
    278e:	80 81       	ld	r24, Z
    2790:	88 23       	and	r24, r24
    2792:	39 f7       	brne	.-50     	; 0x2762 <LCD_u8SendString+0x1e>
    2794:	02 c0       	rjmp	.+4      	; 0x279a <LCD_u8SendString+0x56>
			LCD_voidSendCharacter(Copy_pchString[Local_u8Iterator]);
			Local_u8Iterator++;
		}
	}
	else
		Local_u8ErrorStatus = LCD_E_PARAM_POINTER;
    2796:	8d e0       	ldi	r24, 0x0D	; 13
    2798:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
    279a:	89 81       	ldd	r24, Y+1	; 0x01
}
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <LCD_u8CreateCustomCharacter>:


u8 LCD_u8CreateCustomCharacter(const u8 *Copy_pu8Pattern, u8 Copy_u8Location)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_u8CreateCustomCharacter+0x6>
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <LCD_u8CreateCustomCharacter+0x8>
    27b2:	0f 92       	push	r0
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	9c 83       	std	Y+4, r25	; 0x04
    27ba:	8b 83       	std	Y+3, r24	; 0x03
    27bc:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Iterator=0, Local_u8ErrorStatus = OK;
    27be:	1a 82       	std	Y+2, r1	; 0x02
    27c0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Pattern != NULL)
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	d1 f1       	breq	.+116    	; 0x283e <LCD_u8CreateCustomCharacter+0x94>
	{
		if(Copy_u8Location >= 0 && Copy_u8Location <= 7)
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	88 30       	cpi	r24, 0x08	; 8
    27ce:	a0 f5       	brcc	.+104    	; 0x2838 <LCD_u8CreateCustomCharacter+0x8e>
		{
			/*send location of CGRAM i want to write*/
#if LCD_InitMode == FourBit_Init
			LCD_voidSendCommand((0x40 + (Copy_u8Location*8))>> 4);
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	08 96       	adiw	r24, 0x08	; 8
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	95 95       	asr	r25
    27e6:	87 95       	ror	r24
    27e8:	95 95       	asr	r25
    27ea:	87 95       	ror	r24
    27ec:	95 95       	asr	r25
    27ee:	87 95       	ror	r24
    27f0:	95 95       	asr	r25
    27f2:	87 95       	ror	r24
    27f4:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
#endif

			LCD_voidSendCommand((0x40 + (Copy_u8Location*8)));
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	88 2f       	mov	r24, r24
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	08 96       	adiw	r24, 0x08	; 8
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	88 0f       	add	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
			{
				LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Iterator]);
			}
#elif LCD_Font_Size == FiveEleven_Size
			/*send Copy_pu8Pattern to save in CGRAM*/
			for(Local_u8Iterator = 0; Local_u8Iterator<11; Local_u8Iterator++)
    2810:	1a 82       	std	Y+2, r1	; 0x02
    2812:	0e c0       	rjmp	.+28     	; 0x2830 <LCD_u8CreateCustomCharacter+0x86>
			{
				LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Iterator]);
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	9c 81       	ldd	r25, Y+4	; 0x04
    281e:	fc 01       	movw	r30, r24
    2820:	e2 0f       	add	r30, r18
    2822:	f3 1f       	adc	r31, r19
    2824:	80 81       	ld	r24, Z
    2826:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_voidSendCharacter>
			{
				LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Iterator]);
			}
#elif LCD_Font_Size == FiveEleven_Size
			/*send Copy_pu8Pattern to save in CGRAM*/
			for(Local_u8Iterator = 0; Local_u8Iterator<11; Local_u8Iterator++)
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	8f 5f       	subi	r24, 0xFF	; 255
    282e:	8a 83       	std	Y+2, r24	; 0x02
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	8b 30       	cpi	r24, 0x0B	; 11
    2834:	78 f3       	brcs	.-34     	; 0x2814 <LCD_u8CreateCustomCharacter+0x6a>
    2836:	05 c0       	rjmp	.+10     	; 0x2842 <LCD_u8CreateCustomCharacter+0x98>
#error "Wrong LCD font size"
#endif

		}
		else
			Local_u8ErrorStatus = LCD_E_PARAM_INVALID_LOCATION_ID;
    2838:	8c e0       	ldi	r24, 0x0C	; 12
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <LCD_u8CreateCustomCharacter+0x98>
	}
	else
		Local_u8ErrorStatus = LCD_E_PARAM_POINTER;
    283e:	8d e0       	ldi	r24, 0x0D	; 13
    2840:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
    2842:	89 81       	ldd	r24, Y+1	; 0x01
}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <LCD_u8SendCustomCharacter>:


u8 LCD_u8SendCustomCharacter(u8 Copy_u8Location, u8 Copy_u8Row, u8 Copy_u8Col)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	00 d0       	rcall	.+0      	; 0x285a <LCD_u8SendCustomCharacter+0x6>
    285a:	00 d0       	rcall	.+0      	; 0x285c <LCD_u8SendCustomCharacter+0x8>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	8a 83       	std	Y+2, r24	; 0x02
    2862:	6b 83       	std	Y+3, r22	; 0x03
    2864:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = OK;
    2866:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Location >= 0 && Copy_u8Location <= 7)
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	88 30       	cpi	r24, 0x08	; 8
    286c:	a0 f4       	brcc	.+40     	; 0x2896 <LCD_u8SendCustomCharacter+0x42>
	{
		if(Copy_u8Row >= LCD_ROW0 && Copy_u8Row <= LCD_ROW3)
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	84 30       	cpi	r24, 0x04	; 4
    2872:	70 f4       	brcc	.+28     	; 0x2890 <LCD_u8SendCustomCharacter+0x3c>
		{
			if(Copy_u8Col >= LCD_COL0 && Copy_u8Col <= LCD_COL19)
    2874:	8c 81       	ldd	r24, Y+4	; 0x04
    2876:	84 31       	cpi	r24, 0x14	; 20
    2878:	40 f4       	brcc	.+16     	; 0x288a <LCD_u8SendCustomCharacter+0x36>
			{
				/*Go to ROW & COL i want to display on screen*/
				LCD_u8GoToRowCol(Copy_u8Row, Copy_u8Col);
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	6c 81       	ldd	r22, Y+4	; 0x04
    287e:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>

				/*send location to DDRAM to output the character on the screen*/
				LCD_voidSendCharacter(Copy_u8Location);
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_voidSendCharacter>
    2888:	08 c0       	rjmp	.+16     	; 0x289a <LCD_u8SendCustomCharacter+0x46>
			}
			else
				Local_u8ErrorStatus = LCD_E_PARAM_INVALID_COL_ID;
    288a:	8b e0       	ldi	r24, 0x0B	; 11
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	05 c0       	rjmp	.+10     	; 0x289a <LCD_u8SendCustomCharacter+0x46>
		}
		else
			Local_u8ErrorStatus = LCD_E_PARAM_INVALID_ROW_ID;
    2890:	8a e0       	ldi	r24, 0x0A	; 10
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	02 c0       	rjmp	.+4      	; 0x289a <LCD_u8SendCustomCharacter+0x46>

	}
	else
		Local_u8ErrorStatus = LCD_E_PARAM_INVALID_LOCATION_ID;
    2896:	8c e0       	ldi	r24, 0x0C	; 12
    2898:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8ErrorStatus;
    289a:	89 81       	ldd	r24, Y+1	; 0x01
}
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <LCD_u8GoToRowCol>:


u8 LCD_u8GoToRowCol (u8 Copy_u8Row, u8 Copy_u8Col)
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <LCD_u8GoToRowCol+0x6>
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <LCD_u8GoToRowCol+0x8>
    28b2:	0f 92       	push	r0
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	8c 83       	std	Y+4, r24	; 0x04
    28ba:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Location = 0, Local_u8Var = 0, Local_u8ErrorStatus = OK;
    28bc:	1b 82       	std	Y+3, r1	; 0x03
    28be:	1a 82       	std	Y+2, r1	; 0x02
    28c0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Row >= LCD_ROW0 && Copy_u8Row <= LCD_ROW3)
    28c2:	8c 81       	ldd	r24, Y+4	; 0x04
    28c4:	84 30       	cpi	r24, 0x04	; 4
    28c6:	60 f5       	brcc	.+88     	; 0x2920 <LCD_u8GoToRowCol+0x76>
	{
		if(Copy_u8Col >= LCD_COL0 && Copy_u8Col <= LCD_COL19)
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	84 31       	cpi	r24, 0x14	; 20
    28cc:	30 f5       	brcc	.+76     	; 0x291a <LCD_u8GoToRowCol+0x70>
		{
			if(Copy_u8Row == LCD_ROW0)  /*Location is at first line*/
    28ce:	8c 81       	ldd	r24, Y+4	; 0x04
    28d0:	88 23       	and	r24, r24
    28d2:	19 f4       	brne	.+6      	; 0x28da <LCD_u8GoToRowCol+0x30>
			{
				Local_u8Location = 0x00 + Copy_u8Col;
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	8b 83       	std	Y+3, r24	; 0x03
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <LCD_u8GoToRowCol+0x58>
			}
			else if(Copy_u8Row == LCD_ROW1)   /*Location is at second line*/
    28da:	8c 81       	ldd	r24, Y+4	; 0x04
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	21 f4       	brne	.+8      	; 0x28e8 <LCD_u8GoToRowCol+0x3e>
			{
				Local_u8Location = 0x40 + Copy_u8Col;
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	80 5c       	subi	r24, 0xC0	; 192
    28e4:	8b 83       	std	Y+3, r24	; 0x03
    28e6:	0d c0       	rjmp	.+26     	; 0x2902 <LCD_u8GoToRowCol+0x58>
			}
			else if(Copy_u8Row == LCD_ROW2)   /*Location is at third line*/
    28e8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ea:	82 30       	cpi	r24, 0x02	; 2
    28ec:	21 f4       	brne	.+8      	; 0x28f6 <LCD_u8GoToRowCol+0x4c>
			{
				Local_u8Location = 0x14 + Copy_u8Col;
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	8c 5e       	subi	r24, 0xEC	; 236
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	06 c0       	rjmp	.+12     	; 0x2902 <LCD_u8GoToRowCol+0x58>
			}
			else if(Copy_u8Row == LCD_ROW3)   /*Location is at fourth line*/
    28f6:	8c 81       	ldd	r24, Y+4	; 0x04
    28f8:	83 30       	cpi	r24, 0x03	; 3
    28fa:	19 f4       	brne	.+6      	; 0x2902 <LCD_u8GoToRowCol+0x58>
			{
				Local_u8Location = 0x54 + Copy_u8Col;
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	8c 5a       	subi	r24, 0xAC	; 172
    2900:	8b 83       	std	Y+3, r24	; 0x03

#if LCD_InitMode == EightBit_Init
			/*send address of the ROW & COL*/
			LCD_voidSendCommand(CURSOR_OFFEST | Local_u8Location);
#elif LCD_InitMode == FourBit_Init
			Local_u8Var = CURSOR_OFFEST | Local_u8Location;
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	80 68       	ori	r24, 0x80	; 128
    2906:	8a 83       	std	Y+2, r24	; 0x02
			LCD_voidSendCommand(Local_u8Var >> 4); 		//send upper nibble first
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	82 95       	swap	r24
    290c:	8f 70       	andi	r24, 0x0F	; 15
    290e:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
			LCD_voidSendCommand(Local_u8Var); 			//send lower nibble
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSendCommand>
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <LCD_u8GoToRowCol+0x7a>
#endif
		}
		else
			Local_u8ErrorStatus = LCD_E_PARAM_INVALID_COL_ID;
    291a:	8b e0       	ldi	r24, 0x0B	; 11
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <LCD_u8GoToRowCol+0x7a>

	}
	else
		Local_u8ErrorStatus = LCD_E_PARAM_INVALID_ROW_ID;
    2920:	8a e0       	ldi	r24, 0x0A	; 10
    2922:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8ErrorStatus;
    2924:	89 81       	ldd	r24, Y+1	; 0x01

}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <LCD_voidSendNumber>:


void LCD_voidSendNumber(s32 Copy_s32Number)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	2e 97       	sbiw	r28, 0x0e	; 14
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	6b 87       	std	Y+11, r22	; 0x0b
    294c:	7c 87       	std	Y+12, r23	; 0x0c
    294e:	8d 87       	std	Y+13, r24	; 0x0d
    2950:	9e 87       	std	Y+14, r25	; 0x0e
	u8 Local_u8String[10] = {'\0'};
    2952:	8a e0       	ldi	r24, 0x0A	; 10
    2954:	fe 01       	movw	r30, r28
    2956:	31 96       	adiw	r30, 0x01	; 1
    2958:	df 01       	movw	r26, r30
    295a:	98 2f       	mov	r25, r24
    295c:	1d 92       	st	X+, r1
    295e:	9a 95       	dec	r25
    2960:	e9 f7       	brne	.-6      	; 0x295c <LCD_voidSendNumber+0x26>

	/* convert Copy_s32Number to a string*/
	ConvertToString((char*)Local_u8String, Copy_s32Number);
    2962:	2b 85       	ldd	r18, Y+11	; 0x0b
    2964:	3c 85       	ldd	r19, Y+12	; 0x0c
    2966:	4d 85       	ldd	r20, Y+13	; 0x0d
    2968:	5e 85       	ldd	r21, Y+14	; 0x0e
    296a:	ce 01       	movw	r24, r28
    296c:	01 96       	adiw	r24, 0x01	; 1
    296e:	ba 01       	movw	r22, r20
    2970:	a9 01       	movw	r20, r18
    2972:	0e 94 67 1e 	call	0x3cce	; 0x3cce <ConvertToString>

	/* send ConvertToString */
	LCD_u8SendString((char*)Local_u8String);
    2976:	ce 01       	movw	r24, r28
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
}
    297e:	2e 96       	adiw	r28, 0x0e	; 14
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <LED_u8On>:


/********************************				Function Definitions				********************************/

u8 LED_u8On (u8 copy_u8Port, u8 copy_u8Pin)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	00 d0       	rcall	.+0      	; 0x2996 <LED_u8On+0x6>
    2996:	0f 92       	push	r0
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	8a 83       	std	Y+2, r24	; 0x02
    299e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    29a0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Port >= DIO_PORTA && copy_u8Port <= DIO_PORTD)
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	84 30       	cpi	r24, 0x04	; 4
    29a6:	60 f4       	brcc	.+24     	; 0x29c0 <LED_u8On+0x30>
	{
		if(copy_u8Pin >= DIO_PIN0 && copy_u8Pin <= DIO_PIN7)
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	88 30       	cpi	r24, 0x08	; 8
    29ac:	30 f4       	brcc	.+12     	; 0x29ba <LED_u8On+0x2a>
		{
			DIO_u8SetPinValue(copy_u8Port, copy_u8Pin, DIO_PIN_HIGH);
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	6b 81       	ldd	r22, Y+3	; 0x03
    29b2:	41 e0       	ldi	r20, 0x01	; 1
    29b4:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
    29b8:	05 c0       	rjmp	.+10     	; 0x29c4 <LED_u8On+0x34>
		}
		else
			Local_u8ErrorState = LED_E_PARAM_INVALID_PIN_ID;
    29ba:	8a e0       	ldi	r24, 0x0A	; 10
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <LED_u8On+0x34>
	}
	else
		Local_u8ErrorState = LED_E_PARAM_INVALID_PORT_ID;
    29c0:	8b e0       	ldi	r24, 0x0B	; 11
    29c2:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <LED_u8Off>:

u8 LED_u8Off (u8 copy_u8Port, u8 copy_u8Pin)
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <LED_u8Off+0x6>
    29d8:	0f 92       	push	r0
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	8a 83       	std	Y+2, r24	; 0x02
    29e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    29e2:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Port >= DIO_PORTA && copy_u8Port <= DIO_PORTD)
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	84 30       	cpi	r24, 0x04	; 4
    29e8:	60 f4       	brcc	.+24     	; 0x2a02 <LED_u8Off+0x30>
	{
		if(copy_u8Pin >= DIO_PIN0 && copy_u8Pin <= DIO_PIN7)
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	88 30       	cpi	r24, 0x08	; 8
    29ee:	30 f4       	brcc	.+12     	; 0x29fc <LED_u8Off+0x2a>
		{
			DIO_u8SetPinValue(copy_u8Port, copy_u8Pin, DIO_PIN_LOW);
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	6b 81       	ldd	r22, Y+3	; 0x03
    29f4:	40 e0       	ldi	r20, 0x00	; 0
    29f6:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_u8SetPinValue>
    29fa:	05 c0       	rjmp	.+10     	; 0x2a06 <LED_u8Off+0x34>
		}
		else
			Local_u8ErrorState = LED_E_PARAM_INVALID_PIN_ID;
    29fc:	8a e0       	ldi	r24, 0x0A	; 10
    29fe:	89 83       	std	Y+1, r24	; 0x01
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <LED_u8Off+0x34>
	}
	else
		Local_u8ErrorState = LED_E_PARAM_INVALID_PORT_ID;
    2a02:	8b e0       	ldi	r24, 0x0B	; 11
    2a04:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <LED_u8Tog>:

u8 LED_u8Tog (u8 copy_u8Port, u8 copy_u8Pin)
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <LED_u8Tog+0x6>
    2a1a:	0f 92       	push	r0
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	8a 83       	std	Y+2, r24	; 0x02
    2a22:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    2a24:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Port >= DIO_PORTA && copy_u8Port <= DIO_PORTD)
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	84 30       	cpi	r24, 0x04	; 4
    2a2a:	58 f4       	brcc	.+22     	; 0x2a42 <LED_u8Tog+0x2e>
	{
		if(copy_u8Pin >= DIO_PIN0 && copy_u8Pin <= DIO_PIN7)
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	88 30       	cpi	r24, 0x08	; 8
    2a30:	28 f4       	brcc	.+10     	; 0x2a3c <LED_u8Tog+0x28>
		{
			DIO_u8TogglePinValue(copy_u8Port, copy_u8Pin);
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	6b 81       	ldd	r22, Y+3	; 0x03
    2a36:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_u8TogglePinValue>
    2a3a:	05 c0       	rjmp	.+10     	; 0x2a46 <LED_u8Tog+0x32>
		}
		else
			Local_u8ErrorState = LED_E_PARAM_INVALID_PIN_ID;
    2a3c:	8a e0       	ldi	r24, 0x0A	; 10
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <LED_u8Tog+0x32>
	}
	else
		Local_u8ErrorState = LED_E_PARAM_INVALID_PORT_ID;
    2a42:	8b e0       	ldi	r24, 0x0B	; 11
    2a44:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <SERVO_u8SetAngle>:


/********************************				Function Definitions				********************************/

u8 SERVO_u8SetAngle (u8 copy_u8TimerChannel, u8 copy_u8Angle)
{
    2a54:	af 92       	push	r10
    2a56:	bf 92       	push	r11
    2a58:	cf 92       	push	r12
    2a5a:	df 92       	push	r13
    2a5c:	ef 92       	push	r14
    2a5e:	ff 92       	push	r15
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <SERVO_u8SetAngle+0x16>
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <SERVO_u8SetAngle+0x18>
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	8b 83       	std	Y+3, r24	; 0x03
    2a72:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK, Local_u8Duty = 0;
    2a74:	1a 82       	std	Y+2, r1	; 0x02
    2a76:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Angle <= 180)
    2a78:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7a:	85 3b       	cpi	r24, 0xB5	; 181
    2a7c:	f0 f5       	brcc	.+124    	; 0x2afa <SERVO_u8SetAngle+0xa6>
	{
		Local_u8Duty = s32Map(0,180,50,100,copy_u8Angle);
    2a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	a0 e0       	ldi	r26, 0x00	; 0
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <SERVO_u8SetAngle+0x36>
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <SERVO_u8SetAngle+0x38>
    2a8c:	ed b7       	in	r30, 0x3d	; 61
    2a8e:	fe b7       	in	r31, 0x3e	; 62
    2a90:	31 96       	adiw	r30, 0x01	; 1
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	70 e0       	ldi	r23, 0x00	; 0
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	24 eb       	ldi	r18, 0xB4	; 180
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	0f 2e       	mov	r0, r31
    2aac:	f2 e3       	ldi	r31, 0x32	; 50
    2aae:	ef 2e       	mov	r14, r31
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	ff 2e       	mov	r15, r31
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	0f 2f       	mov	r16, r31
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	1f 2f       	mov	r17, r31
    2abc:	f0 2d       	mov	r31, r0
    2abe:	0f 2e       	mov	r0, r31
    2ac0:	f4 e6       	ldi	r31, 0x64	; 100
    2ac2:	af 2e       	mov	r10, r31
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	bf 2e       	mov	r11, r31
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	cf 2e       	mov	r12, r31
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	df 2e       	mov	r13, r31
    2ad0:	f0 2d       	mov	r31, r0
    2ad2:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <s32Map>
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	89 83       	std	Y+1, r24	; 0x01
		TIMER1_u8GeneratePWM(copy_u8TimerChannel, 50,Local_u8Duty);
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	42 e3       	ldi	r20, 0x32	; 50
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <TIMER1_u8GeneratePWM>
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <SERVO_u8SetAngle+0xaa>
	}
	else
		Local_u8ErrorState = SERVO_E_PARAM_ANGLE_ID;
    2afa:	8a e0       	ldi	r24, 0x0A	; 10
    2afc:	8a 83       	std	Y+2, r24	; 0x02

	return Local_u8ErrorState;
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	1f 91       	pop	r17
    2b0e:	0f 91       	pop	r16
    2b10:	ff 90       	pop	r15
    2b12:	ef 90       	pop	r14
    2b14:	df 90       	pop	r13
    2b16:	cf 90       	pop	r12
    2b18:	bf 90       	pop	r11
    2b1a:	af 90       	pop	r10
    2b1c:	08 95       	ret

00002b1e <SERVO_voidStop>:

void SERVO_voidStop (void)
{
    2b1e:	df 93       	push	r29
    2b20:	cf 93       	push	r28
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidStop();
    2b26:	0e 94 14 1a 	call	0x3428	; 0x3428 <TIMER1_voidStop>
}
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <TIMER0_voidInit>:
/********************************				Function Definitions				********************************/

/********************************				 TIMER0  						********************************/

void TIMER0_voidInit(void)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
	/* Waveform Generation Mode */
#if (TIMER0_MODE >= TIMER_NORMAL && TIMER0_MODE <= TIMER_FAST_PWM)
	/*			WGM00						WGM01				 */
	TCCR0 |= (((TIMER0_MODE&0x01) << 6) | ((TIMER0_MODE>>1 & 0x01) << 3));
    2b38:	a3 e5       	ldi	r26, 0x53	; 83
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e3 e5       	ldi	r30, 0x53	; 83
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	88 64       	ori	r24, 0x48	; 72
    2b44:	8c 93       	st	X, r24
#endif

	/* Compare Match Output Mode */
#if (TIMER0_COMP_MODE >= TIMER_COMP_NORMAL && TIMER0_COMP_MODE <= TIMER_COMP_SET_OCx)
	/*			COM00						COM01				 */
	TCCR0 |= (((TIMER0_COMP_MODE&0x01) << 4) | ((TIMER0_COMP_MODE>>1 & 0x01) << 5));
    2b46:	a3 e5       	ldi	r26, 0x53	; 83
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e3 e5       	ldi	r30, 0x53	; 83
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	80 62       	ori	r24, 0x20	; 32
    2b52:	8c 93       	st	X, r24
#endif

	/* Force Output Compare */
#if (TIMER0_MODE == TIMER_FAST_PWM || TIMER0_MODE == TIMER_PWM)
	/* CLEAR Force Output Compare pin*/
	CLR_BIT(TCCR0, FOC0);
    2b54:	a3 e5       	ldi	r26, 0x53	; 83
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e3 e5       	ldi	r30, 0x53	; 83
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8f 77       	andi	r24, 0x7F	; 127
    2b60:	8c 93       	st	X, r24
#endif

	/* Preload value */
	TCNT0 = TIMER0_PRELOAD_VALUE;
    2b62:	e2 e5       	ldi	r30, 0x52	; 82
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	10 82       	st	Z, r1

	/* Compare value OCR0 */
	OCR0 = TIMER0_COMP_VALUE;
    2b68:	ec e5       	ldi	r30, 0x5C	; 92
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	10 82       	st	Z, r1

	/* Timer/Counter0 Overflow & Output Compare Match Interrupt Enable */
#if (TIMER0_OVF_INT <= TIMER_ENABLE && TIMER0_OVF_INT >= TIMER_DISABLE && \
		TIMER0_COMP_INT <= TIMER_ENABLE && TIMER0_COMP_INT >= TIMER_DISABLE)
	TIMSK |= (TIMER0_OVF_INT | (TIMER0_COMP_INT<<1));
    2b6e:	a9 e5       	ldi	r26, 0x59	; 89
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e9 e5       	ldi	r30, 0x59	; 89
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8c 93       	st	X, r24
#error "Wrong Timer0 Interrupt Enable selection"
#endif

	/* Clock Select / Prescaler */
#if (TIMER0_CLOCK_SELECT >= TIMER_NO_CLOCK && TIMER0_CLOCK_SELECT <= TIMER_EXT1_CLOCK)
	TCCR0 &= 0xF8;
    2b7a:	a3 e5       	ldi	r26, 0x53	; 83
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e3 e5       	ldi	r30, 0x53	; 83
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	88 7f       	andi	r24, 0xF8	; 248
    2b86:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_CLOCK_SELECT;
    2b88:	a3 e5       	ldi	r26, 0x53	; 83
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e3 e5       	ldi	r30, 0x53	; 83
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	83 60       	ori	r24, 0x03	; 3
    2b94:	8c 93       	st	X, r24

#else
#error "Wrong Timer0 Clock selection"
#endif

}
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	08 95       	ret

00002b9c <TIMER0_voidSetPreload>:

void TIMER0_voidSetPreload(u8 copy_u8Preload)
{
    2b9c:	df 93       	push	r29
    2b9e:	cf 93       	push	r28
    2ba0:	0f 92       	push	r0
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	89 83       	std	Y+1, r24	; 0x01
	/* Preload value */
	TCNT0 = copy_u8Preload;
    2ba8:	e2 e5       	ldi	r30, 0x52	; 82
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	80 83       	st	Z, r24
}
    2bb0:	0f 90       	pop	r0
    2bb2:	cf 91       	pop	r28
    2bb4:	df 91       	pop	r29
    2bb6:	08 95       	ret

00002bb8 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 copy_u8CompValue)
{
    2bb8:	df 93       	push	r29
    2bba:	cf 93       	push	r28
    2bbc:	0f 92       	push	r0
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	89 83       	std	Y+1, r24	; 0x01
	/* Compare value OCR0 */
	OCR0 = copy_u8CompValue;
    2bc4:	ec e5       	ldi	r30, 0x5C	; 92
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	80 83       	st	Z, r24
}
    2bcc:	0f 90       	pop	r0
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <TIMER0_u8EnableInterrupt>:

u8 TIMER0_u8EnableInterrupt(u8 copy_u8IntSource)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <TIMER0_u8EnableInterrupt+0x6>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    2be0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8IntSource == TIMER0_OVF || copy_u8IntSource == TIMER0_COMP)
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	88 23       	and	r24, r24
    2be6:	19 f0       	breq	.+6      	; 0x2bee <TIMER0_u8EnableInterrupt+0x1a>
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	81 30       	cpi	r24, 0x01	; 1
    2bec:	a1 f4       	brne	.+40     	; 0x2c16 <TIMER0_u8EnableInterrupt+0x42>
	{
		SET_BIT(TIMSK, copy_u8IntSource);
    2bee:	a9 e5       	ldi	r26, 0x59	; 89
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e9 e5       	ldi	r30, 0x59	; 89
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	48 2f       	mov	r20, r24
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	02 2e       	mov	r0, r18
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <TIMER0_u8EnableInterrupt+0x38>
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	0a 94       	dec	r0
    2c0e:	e2 f7       	brpl	.-8      	; 0x2c08 <TIMER0_u8EnableInterrupt+0x34>
    2c10:	84 2b       	or	r24, r20
    2c12:	8c 93       	st	X, r24
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <TIMER0_u8EnableInterrupt+0x46>
	}
	else
		Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_INT_ID;
    2c16:	8a e0       	ldi	r24, 0x0A	; 10
    2c18:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <TIMER0_u8DisableInterrupt>:

u8 TIMER0_u8DisableInterrupt(u8 copy_u8IntSource)
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <TIMER0_u8DisableInterrupt+0x6>
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    2c32:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8IntSource == TIMER0_OVF || copy_u8IntSource == TIMER0_COMP)
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	88 23       	and	r24, r24
    2c38:	19 f0       	breq	.+6      	; 0x2c40 <TIMER0_u8DisableInterrupt+0x1a>
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	81 30       	cpi	r24, 0x01	; 1
    2c3e:	a9 f4       	brne	.+42     	; 0x2c6a <TIMER0_u8DisableInterrupt+0x44>
	{
		CLR_BIT(TIMSK, copy_u8IntSource);
    2c40:	a9 e5       	ldi	r26, 0x59	; 89
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e9 e5       	ldi	r30, 0x59	; 89
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	48 2f       	mov	r20, r24
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	02 2e       	mov	r0, r18
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <TIMER0_u8DisableInterrupt+0x38>
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	0a 94       	dec	r0
    2c60:	e2 f7       	brpl	.-8      	; 0x2c5a <TIMER0_u8DisableInterrupt+0x34>
    2c62:	80 95       	com	r24
    2c64:	84 23       	and	r24, r20
    2c66:	8c 93       	st	X, r24
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <TIMER0_u8DisableInterrupt+0x48>
	}
	else
		Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_INT_ID;
    2c6a:	8a e0       	ldi	r24, 0x0A	; 10
    2c6c:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <TIMER0_voidForceOutputComp>:

void TIMER0_voidForceOutputComp(void)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, FOC0);
    2c82:	a3 e5       	ldi	r26, 0x53	; 83
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e3 e5       	ldi	r30, 0x53	; 83
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 68       	ori	r24, 0x80	; 128
    2c8e:	8c 93       	st	X, r24
}
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <TIMER0_u8GeneratePWM>:

u8 TIMER0_u8GeneratePWM(u32 copy_u32Freq, u16 copy_u16Duty)
{
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	27 97       	sbiw	r28, 0x07	; 7
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	6a 83       	std	Y+2, r22	; 0x02
    2cb0:	7b 83       	std	Y+3, r23	; 0x03
    2cb2:	8c 83       	std	Y+4, r24	; 0x04
    2cb4:	9d 83       	std	Y+5, r25	; 0x05
    2cb6:	5f 83       	std	Y+7, r21	; 0x07
    2cb8:	4e 83       	std	Y+6, r20	; 0x06
#if (TIMER0_MODE == TIMER_FAST_PWM || TIMER0_MODE == TIMER_PWM)
	u8 Local_u8ErrorStatus = OK;
    2cba:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u16Duty >= 0 && copy_u16Duty <= 1000)
    2cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc0:	23 e0       	ldi	r18, 0x03	; 3
    2cc2:	89 3e       	cpi	r24, 0xE9	; 233
    2cc4:	92 07       	cpc	r25, r18
    2cc6:	08 f0       	brcs	.+2      	; 0x2cca <TIMER0_u8GeneratePWM+0x34>
    2cc8:	ed c0       	rjmp	.+474    	; 0x2ea4 <TIMER0_u8GeneratePWM+0x20e>
	{
		if(copy_u32Freq >= 0 && copy_u32Freq <= Timer0_MaxFreq)
    2cca:	20 91 1c 01 	lds	r18, 0x011C
    2cce:	30 91 1d 01 	lds	r19, 0x011D
    2cd2:	40 91 1e 01 	lds	r20, 0x011E
    2cd6:	50 91 1f 01 	lds	r21, 0x011F
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cde:	ac 81       	ldd	r26, Y+4	; 0x04
    2ce0:	bd 81       	ldd	r27, Y+5	; 0x05
    2ce2:	28 17       	cp	r18, r24
    2ce4:	39 07       	cpc	r19, r25
    2ce6:	4a 07       	cpc	r20, r26
    2ce8:	5b 07       	cpc	r21, r27
    2cea:	08 f4       	brcc	.+2      	; 0x2cee <TIMER0_u8GeneratePWM+0x58>
    2cec:	d8 c0       	rjmp	.+432    	; 0x2e9e <TIMER0_u8GeneratePWM+0x208>
		{
			/* stop the timer first */
			TCCR0 &= 0xF8;
    2cee:	a3 e5       	ldi	r26, 0x53	; 83
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	e3 e5       	ldi	r30, 0x53	; 83
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	88 7f       	andi	r24, 0xF8	; 248
    2cfa:	8c 93       	st	X, r24
			TCCR0 |= TIMER_NO_CLOCK;
    2cfc:	a3 e5       	ldi	r26, 0x53	; 83
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	e3 e5       	ldi	r30, 0x53	; 83
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	8c 93       	st	X, r24

			/* Waveform Generation Mode */
			/*			WGM00						WGM01				 */
			TCCR0 |= (((TIMER0_MODE&0x01) << 6) | ((TIMER0_MODE>>1 & 0x01) << 3));
    2d08:	a3 e5       	ldi	r26, 0x53	; 83
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	e3 e5       	ldi	r30, 0x53	; 83
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	88 64       	ori	r24, 0x48	; 72
    2d14:	8c 93       	st	X, r24

			/* Compare Match Output Mode */
			/*			COM00						COM01				 */
			TCCR0 |= (((TIMER0_COMP_MODE&0x01) << 4) | ((TIMER0_COMP_MODE>>1 & 0x01) << 5));
    2d16:	a3 e5       	ldi	r26, 0x53	; 83
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e3 e5       	ldi	r30, 0x53	; 83
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	80 62       	ori	r24, 0x20	; 32
    2d22:	8c 93       	st	X, r24

			/* Preload value */
			TCNT0 = 0;
    2d24:	e2 e5       	ldi	r30, 0x52	; 82
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	10 82       	st	Z, r1

			/* Compare value OCR0 */
#if (TIMER0_COMP_MODE == TIMER_COMP_CLR_OCx)		//non-inverting
			OCR0 = (255UL * (copy_u16Duty + 1)) / 1000UL;
    2d2a:	0c e5       	ldi	r16, 0x5C	; 92
    2d2c:	10 e0       	ldi	r17, 0x00	; 0
    2d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d30:	9f 81       	ldd	r25, Y+7	; 0x07
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	cc 01       	movw	r24, r24
    2d36:	a0 e0       	ldi	r26, 0x00	; 0
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	2f ef       	ldi	r18, 0xFF	; 255
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 45 22 	call	0x448a	; 0x448a <__mulsi3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	28 ee       	ldi	r18, 0xE8	; 232
    2d50:	33 e0       	ldi	r19, 0x03	; 3
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	50 e0       	ldi	r21, 0x00	; 0
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__udivmodsi4>
    2d5e:	da 01       	movw	r26, r20
    2d60:	c9 01       	movw	r24, r18
    2d62:	f8 01       	movw	r30, r16
    2d64:	80 83       	st	Z, r24
#else
			Local_u8ErrorStatus = TIMER_E_INVALID_PWM_CONFIG;
#endif

			/* Clock Select / Prescaler */
			TCCR0 &= 0xF8;
    2d66:	a3 e5       	ldi	r26, 0x53	; 83
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e3 e5       	ldi	r30, 0x53	; 83
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	88 7f       	andi	r24, 0xF8	; 248
    2d72:	8c 93       	st	X, r24
			if(copy_u32Freq < (Timer0_MinFreq + 1))
    2d74:	80 91 2c 01 	lds	r24, 0x012C
    2d78:	90 91 2d 01 	lds	r25, 0x012D
    2d7c:	a0 91 2e 01 	lds	r26, 0x012E
    2d80:	b0 91 2f 01 	lds	r27, 0x012F
    2d84:	9c 01       	movw	r18, r24
    2d86:	ad 01       	movw	r20, r26
    2d88:	2f 5f       	subi	r18, 0xFF	; 255
    2d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	9b 81       	ldd	r25, Y+3	; 0x03
    2d94:	ac 81       	ldd	r26, Y+4	; 0x04
    2d96:	bd 81       	ldd	r27, Y+5	; 0x05
    2d98:	82 17       	cp	r24, r18
    2d9a:	93 07       	cpc	r25, r19
    2d9c:	a4 07       	cpc	r26, r20
    2d9e:	b5 07       	cpc	r27, r21
    2da0:	40 f4       	brcc	.+16     	; 0x2db2 <TIMER0_u8GeneratePWM+0x11c>
			{
				TCCR0 |= TIMER_CLOCK_1024;
    2da2:	a3 e5       	ldi	r26, 0x53	; 83
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e3 e5       	ldi	r30, 0x53	; 83
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	85 60       	ori	r24, 0x05	; 5
    2dae:	8c 93       	st	X, r24
    2db0:	7b c0       	rjmp	.+246    	; 0x2ea8 <TIMER0_u8GeneratePWM+0x212>
			}
			else if(copy_u32Freq < (Timer0_Pre256Freq + 1))
    2db2:	80 91 28 01 	lds	r24, 0x0128
    2db6:	90 91 29 01 	lds	r25, 0x0129
    2dba:	a0 91 2a 01 	lds	r26, 0x012A
    2dbe:	b0 91 2b 01 	lds	r27, 0x012B
    2dc2:	9c 01       	movw	r18, r24
    2dc4:	ad 01       	movw	r20, r26
    2dc6:	2f 5f       	subi	r18, 0xFF	; 255
    2dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dca:	4f 4f       	sbci	r20, 0xFF	; 255
    2dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd2:	ac 81       	ldd	r26, Y+4	; 0x04
    2dd4:	bd 81       	ldd	r27, Y+5	; 0x05
    2dd6:	82 17       	cp	r24, r18
    2dd8:	93 07       	cpc	r25, r19
    2dda:	a4 07       	cpc	r26, r20
    2ddc:	b5 07       	cpc	r27, r21
    2dde:	40 f4       	brcc	.+16     	; 0x2df0 <TIMER0_u8GeneratePWM+0x15a>
			{
				TCCR0 |= TIMER_CLOCK_256;
    2de0:	a3 e5       	ldi	r26, 0x53	; 83
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e3 e5       	ldi	r30, 0x53	; 83
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	84 60       	ori	r24, 0x04	; 4
    2dec:	8c 93       	st	X, r24
    2dee:	5c c0       	rjmp	.+184    	; 0x2ea8 <TIMER0_u8GeneratePWM+0x212>
			}
			else if(copy_u32Freq < (Timer0_Pre64Freq + 1))
    2df0:	80 91 24 01 	lds	r24, 0x0124
    2df4:	90 91 25 01 	lds	r25, 0x0125
    2df8:	a0 91 26 01 	lds	r26, 0x0126
    2dfc:	b0 91 27 01 	lds	r27, 0x0127
    2e00:	9c 01       	movw	r18, r24
    2e02:	ad 01       	movw	r20, r26
    2e04:	2f 5f       	subi	r18, 0xFF	; 255
    2e06:	3f 4f       	sbci	r19, 0xFF	; 255
    2e08:	4f 4f       	sbci	r20, 0xFF	; 255
    2e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e10:	ac 81       	ldd	r26, Y+4	; 0x04
    2e12:	bd 81       	ldd	r27, Y+5	; 0x05
    2e14:	82 17       	cp	r24, r18
    2e16:	93 07       	cpc	r25, r19
    2e18:	a4 07       	cpc	r26, r20
    2e1a:	b5 07       	cpc	r27, r21
    2e1c:	40 f4       	brcc	.+16     	; 0x2e2e <TIMER0_u8GeneratePWM+0x198>
			{
				TCCR0 |= TIMER_CLOCK_64;
    2e1e:	a3 e5       	ldi	r26, 0x53	; 83
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e3 e5       	ldi	r30, 0x53	; 83
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	83 60       	ori	r24, 0x03	; 3
    2e2a:	8c 93       	st	X, r24
    2e2c:	3d c0       	rjmp	.+122    	; 0x2ea8 <TIMER0_u8GeneratePWM+0x212>
			}
			else if(copy_u32Freq < (Timer0_Pre8Freq + 1))
    2e2e:	80 91 20 01 	lds	r24, 0x0120
    2e32:	90 91 21 01 	lds	r25, 0x0121
    2e36:	a0 91 22 01 	lds	r26, 0x0122
    2e3a:	b0 91 23 01 	lds	r27, 0x0123
    2e3e:	9c 01       	movw	r18, r24
    2e40:	ad 01       	movw	r20, r26
    2e42:	2f 5f       	subi	r18, 0xFF	; 255
    2e44:	3f 4f       	sbci	r19, 0xFF	; 255
    2e46:	4f 4f       	sbci	r20, 0xFF	; 255
    2e48:	5f 4f       	sbci	r21, 0xFF	; 255
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4e:	ac 81       	ldd	r26, Y+4	; 0x04
    2e50:	bd 81       	ldd	r27, Y+5	; 0x05
    2e52:	82 17       	cp	r24, r18
    2e54:	93 07       	cpc	r25, r19
    2e56:	a4 07       	cpc	r26, r20
    2e58:	b5 07       	cpc	r27, r21
    2e5a:	40 f4       	brcc	.+16     	; 0x2e6c <TIMER0_u8GeneratePWM+0x1d6>
			{
				TCCR0 |= TIMER_CLOCK_8;
    2e5c:	a3 e5       	ldi	r26, 0x53	; 83
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e3 e5       	ldi	r30, 0x53	; 83
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	82 60       	ori	r24, 0x02	; 2
    2e68:	8c 93       	st	X, r24
    2e6a:	1e c0       	rjmp	.+60     	; 0x2ea8 <TIMER0_u8GeneratePWM+0x212>
			}
			else if(copy_u32Freq < Timer0_MaxFreq)
    2e6c:	20 91 1c 01 	lds	r18, 0x011C
    2e70:	30 91 1d 01 	lds	r19, 0x011D
    2e74:	40 91 1e 01 	lds	r20, 0x011E
    2e78:	50 91 1f 01 	lds	r21, 0x011F
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e80:	ac 81       	ldd	r26, Y+4	; 0x04
    2e82:	bd 81       	ldd	r27, Y+5	; 0x05
    2e84:	82 17       	cp	r24, r18
    2e86:	93 07       	cpc	r25, r19
    2e88:	a4 07       	cpc	r26, r20
    2e8a:	b5 07       	cpc	r27, r21
    2e8c:	68 f4       	brcc	.+26     	; 0x2ea8 <TIMER0_u8GeneratePWM+0x212>
			{
				TCCR0 |= TIMER_NO_PRESCALER;
    2e8e:	a3 e5       	ldi	r26, 0x53	; 83
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	e3 e5       	ldi	r30, 0x53	; 83
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	81 60       	ori	r24, 0x01	; 1
    2e9a:	8c 93       	st	X, r24
    2e9c:	05 c0       	rjmp	.+10     	; 0x2ea8 <TIMER0_u8GeneratePWM+0x212>
			}

		}
		else
			Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_FREQ_ID;
    2e9e:	8f e0       	ldi	r24, 0x0F	; 15
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <TIMER0_u8GeneratePWM+0x212>

	}
	else
		Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_DUTY_ID;
    2ea4:	8e e0       	ldi	r24, 0x0E	; 14
    2ea6:	89 83       	std	Y+1, r24	; 0x01

#else
	Local_u8ErrorStatus = TIMER_E_INVALID_PWM_CONFIG;
#endif

	return Local_u8ErrorStatus;
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eaa:	27 96       	adiw	r28, 0x07	; 7
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	1f 91       	pop	r17
    2ebc:	0f 91       	pop	r16
    2ebe:	08 95       	ret

00002ec0 <TIMER0_voidStop>:




void TIMER0_voidStop(void)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	/* Clock Select / Prescaler */
	TCCR0 &= 0xFC;
    2ec8:	a3 e5       	ldi	r26, 0x53	; 83
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	e3 e5       	ldi	r30, 0x53	; 83
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	8c 7f       	andi	r24, 0xFC	; 252
    2ed4:	8c 93       	st	X, r24
	TCCR0 |= TIMER_NO_CLOCK;
    2ed6:	a3 e5       	ldi	r26, 0x53	; 83
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e3 e5       	ldi	r30, 0x53	; 83
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	8c 93       	st	X, r24
}
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <TIMER1_voidInit>:


/********************************				 TIMER1  						********************************/
void TIMER1_voidInit(void)
{
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
	/* Waveform Generation Mode */
#if (TIMER1_MODE >= TIMER1_NORMAL && TIMER1_MODE <= TIMER1_FAST_PWM_OCR1A)
	/*			WGM10						WGM11				 */
	TCCR1A |= (((TIMER1_MODE&0x01)) | ((TIMER1_MODE>>1 & 0x01) << 1));
    2ef0:	af e4       	ldi	r26, 0x4F	; 79
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	ef e4       	ldi	r30, 0x4F	; 79
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	82 60       	ori	r24, 0x02	; 2
    2efc:	8c 93       	st	X, r24

	/*			WGM12						WGM13				 */
	TCCR1B |= (((TIMER1_MODE>>2 &0x01) << 3) | ((TIMER1_MODE>>3 & 0x01) << 4));
    2efe:	ae e4       	ldi	r26, 0x4E	; 78
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	ee e4       	ldi	r30, 0x4E	; 78
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	88 61       	ori	r24, 0x18	; 24
    2f0a:	8c 93       	st	X, r24
#endif

	/* Compare Match Output Mode Channel A */
#if (TIMER1_COMP_CHANEL_A_MODE >= TIMER_COMP_NORMAL && TIMER1_COMP_CHANEL_A_MODE <= TIMER_COMP_SET_OCx)
	/*			COM1A0									COM1A1				 */
	TCCR1A |= (((TIMER1_COMP_CHANEL_A_MODE&0x01) << 6) | ((TIMER1_COMP_CHANEL_A_MODE>>1 & 0x01) << 7));
    2f0c:	af e4       	ldi	r26, 0x4F	; 79
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ef e4       	ldi	r30, 0x4F	; 79
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	80 68       	ori	r24, 0x80	; 128
    2f18:	8c 93       	st	X, r24
#endif

	/* Compare Match Output Mode Channel B */
#if (TIMER1_COMP_CHANEL_B_MODE >= TIMER_COMP_NORMAL && TIMER1_COMP_CHANEL_B_MODE <= TIMER_COMP_SET_OCx)
	/*			COM1B0										COM1B1				 */
	TCCR1A |= (((TIMER1_COMP_CHANEL_B_MODE&0x01) << 4) | ((TIMER1_COMP_CHANEL_B_MODE>>1 & 0x01) << 5));
    2f1a:	af e4       	ldi	r26, 0x4F	; 79
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	ef e4       	ldi	r30, 0x4F	; 79
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	80 62       	ori	r24, 0x20	; 32
    2f26:	8c 93       	st	X, r24
#else
#error "Wrong Timer1 Compare Match Output Channel B Mode selection"
#endif

	/* Preload value */
	TCNT1 = TIMER1_PRELOAD_VALUE;
    2f28:	ec e4       	ldi	r30, 0x4C	; 76
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	11 82       	std	Z+1, r1	; 0x01
    2f2e:	10 82       	st	Z, r1

	/* Compare value OCR1A & OCR1B */
	OCR1A = TIMER1_COMP_A_VALUE;
    2f30:	ea e4       	ldi	r30, 0x4A	; 74
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	11 82       	std	Z+1, r1	; 0x01
    2f36:	10 82       	st	Z, r1
	OCR1B = TIMER1_COMP_B_VALUE;
    2f38:	e8 e4       	ldi	r30, 0x48	; 72
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	11 82       	std	Z+1, r1	; 0x01
    2f3e:	10 82       	st	Z, r1

	/* Input Capture VALUE */
	ICR1 = TIMER1_IC_VALUE;
    2f40:	e6 e4       	ldi	r30, 0x46	; 70
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	88 e8       	ldi	r24, 0x88	; 136
    2f46:	93 e1       	ldi	r25, 0x13	; 19
    2f48:	91 83       	std	Z+1, r25	; 0x01
    2f4a:	80 83       	st	Z, r24
	/* Timer/Counter1 Overflow & Output Compare Match Interrupt Enable */
#if (TIMER1_OVF_INT <= TIMER_ENABLE && TIMER1_OVF_INT >= TIMER_DISABLE && \
		TIMER1_COMP_A_INT <= TIMER_ENABLE && TIMER1_COMP_A_INT >= TIMER_DISABLE && \
		TIMER1_COMP_B_INT <= TIMER_ENABLE && TIMER1_COMP_B_INT >= TIMER_DISABLE && \
		TIMER1_IC_INT <= TIMER_ENABLE && TIMER1_IC_INT >= TIMER_DISABLE)
	TIMSK |= ((TIMER1_OVF_INT << 2) | (TIMER1_COMP_B_INT<< 3) | (TIMER1_COMP_A_INT << 4) | (TIMER1_IC_INT << 5));
    2f4c:	a9 e5       	ldi	r26, 0x59	; 89
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	e9 e5       	ldi	r30, 0x59	; 89
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	8c 93       	st	X, r24
#error "Wrong Timer1 Interrupt Enable selection"
#endif

	/* Clock Select / Prescaler */
#if (TIMER1_CLOCK_SELECT >= TIMER_NO_CLOCK && TIMER1_CLOCK_SELECT <= TIMER_EXT1_CLOCK)
	TCCR1B &= 0xF8;
    2f58:	ae e4       	ldi	r26, 0x4E	; 78
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	ee e4       	ldi	r30, 0x4E	; 78
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	88 7f       	andi	r24, 0xF8	; 248
    2f64:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_CLOCK_SELECT;
    2f66:	ae e4       	ldi	r26, 0x4E	; 78
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	ee e4       	ldi	r30, 0x4E	; 78
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	83 60       	ori	r24, 0x03	; 3
    2f72:	8c 93       	st	X, r24

#else
#error "Wrong Timer1 Clock selection"
#endif

}
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload(u16 copy_u16Preload)
{
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <TIMER1_voidSetPreload+0x6>
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
	/* Preload value */
	TCNT1 = copy_u16Preload;
    2f88:	ec e4       	ldi	r30, 0x4C	; 76
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
}
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <TIMER1_voidSetCompMatchChannelAValue>:

void TIMER1_voidSetCompMatchChannelAValue(u16 copy_u16CompValue)
{
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <TIMER1_voidSetCompMatchChannelAValue+0x6>
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	9a 83       	std	Y+2, r25	; 0x02
    2faa:	89 83       	std	Y+1, r24	; 0x01
	/* Compare value OCR1A */
	OCR1A = copy_u16CompValue;
    2fac:	ea e4       	ldi	r30, 0x4A	; 74
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	80 83       	st	Z, r24
}
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <TIMER1_voidSetCompMatchChannelBValue>:

void TIMER1_voidSetCompMatchChannelBValue(u16 copy_u16CompValue)
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <TIMER1_voidSetCompMatchChannelBValue+0x6>
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	9a 83       	std	Y+2, r25	; 0x02
    2fce:	89 83       	std	Y+1, r24	; 0x01
	/* Compare value OCR1B */
	OCR1B = copy_u16CompValue;
    2fd0:	e8 e4       	ldi	r30, 0x48	; 72
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
}
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <TIMER1_u8GeneratePWM>:

u8 TIMER1_u8GeneratePWM(u8 copy_u8TimerChannel, u32 copy_u32Freq, u16 copy_u16Duty)
{
    2fe6:	cf 92       	push	r12
    2fe8:	df 92       	push	r13
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	2e 97       	sbiw	r28, 0x0e	; 14
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	88 87       	std	Y+8, r24	; 0x08
    3008:	49 87       	std	Y+9, r20	; 0x09
    300a:	5a 87       	std	Y+10, r21	; 0x0a
    300c:	6b 87       	std	Y+11, r22	; 0x0b
    300e:	7c 87       	std	Y+12, r23	; 0x0c
    3010:	3e 87       	std	Y+14, r19	; 0x0e
    3012:	2d 87       	std	Y+13, r18	; 0x0d
	u8 Local_u8ErrorStatus = OK;
    3014:	1f 82       	std	Y+7, r1	; 0x07
	u16 Local_u16Pre = 0;
    3016:	1e 82       	std	Y+6, r1	; 0x06
    3018:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp = 0;
    301a:	19 82       	std	Y+1, r1	; 0x01
    301c:	1a 82       	std	Y+2, r1	; 0x02
    301e:	1b 82       	std	Y+3, r1	; 0x03
    3020:	1c 82       	std	Y+4, r1	; 0x04

	if(copy_u8TimerChannel == TIMER1_CHANNEL_A || copy_u8TimerChannel == TIMER1_CHANNEL_B)
    3022:	88 85       	ldd	r24, Y+8	; 0x08
    3024:	88 23       	and	r24, r24
    3026:	21 f0       	breq	.+8      	; 0x3030 <TIMER1_u8GeneratePWM+0x4a>
    3028:	88 85       	ldd	r24, Y+8	; 0x08
    302a:	81 30       	cpi	r24, 0x01	; 1
    302c:	09 f0       	breq	.+2      	; 0x3030 <TIMER1_u8GeneratePWM+0x4a>
    302e:	ea c1       	rjmp	.+980    	; 0x3404 <TIMER1_u8GeneratePWM+0x41e>
	{
		if(copy_u16Duty >= 0 && copy_u16Duty <= 1000)
    3030:	8d 85       	ldd	r24, Y+13	; 0x0d
    3032:	9e 85       	ldd	r25, Y+14	; 0x0e
    3034:	23 e0       	ldi	r18, 0x03	; 3
    3036:	89 3e       	cpi	r24, 0xE9	; 233
    3038:	92 07       	cpc	r25, r18
    303a:	08 f0       	brcs	.+2      	; 0x303e <TIMER1_u8GeneratePWM+0x58>
    303c:	e0 c1       	rjmp	.+960    	; 0x33fe <TIMER1_u8GeneratePWM+0x418>
		{
			/* stop the timer first */
			TCCR1B &= 0xF8;
    303e:	ae e4       	ldi	r26, 0x4E	; 78
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	ee e4       	ldi	r30, 0x4E	; 78
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	88 7f       	andi	r24, 0xF8	; 248
    304a:	8c 93       	st	X, r24
			TCCR1B |= TIMER_NO_CLOCK;
    304c:	ae e4       	ldi	r26, 0x4E	; 78
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	ee e4       	ldi	r30, 0x4E	; 78
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	8c 93       	st	X, r24

			/* Waveform Generation Mode --> Fast PWM, ICR1 TOP*/
			/*			WGM10						WGM11				 */
			TCCR1A |= (((TIMER1_MODE&0x01)) | ((TIMER1_MODE>>1 & 0x01) << 1));
    3058:	af e4       	ldi	r26, 0x4F	; 79
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	ef e4       	ldi	r30, 0x4F	; 79
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	82 60       	ori	r24, 0x02	; 2
    3064:	8c 93       	st	X, r24

			/*			WGM12						WGM13				 */
			TCCR1B |= (((TIMER1_MODE>>2 &0x01) << 3) | ((TIMER1_MODE>>3 & 0x01) << 4));
    3066:	ae e4       	ldi	r26, 0x4E	; 78
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	ee e4       	ldi	r30, 0x4E	; 78
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	88 61       	ori	r24, 0x18	; 24
    3072:	8c 93       	st	X, r24

			/* Compare Match Output Mode Channel A or B --> Clear OC1A/OC1B on compare match,
																   Set OC1A/OC1B at TOP	*/
			if(copy_u8TimerChannel == TIMER1_CHANNEL_A)
    3074:	88 85       	ldd	r24, Y+8	; 0x08
    3076:	88 23       	and	r24, r24
    3078:	41 f4       	brne	.+16     	; 0x308a <TIMER1_u8GeneratePWM+0xa4>
			{
				/*			COM1A0									COM1A1				 */
				TCCR1A |= (((TIMER1_COMP_CHANEL_A_MODE&0x01) << 6) | ((TIMER1_COMP_CHANEL_A_MODE>>1 & 0x01) << 7));
    307a:	af e4       	ldi	r26, 0x4F	; 79
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	ef e4       	ldi	r30, 0x4F	; 79
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	80 68       	ori	r24, 0x80	; 128
    3086:	8c 93       	st	X, r24
    3088:	0a c0       	rjmp	.+20     	; 0x309e <TIMER1_u8GeneratePWM+0xb8>
			}
			else if(copy_u8TimerChannel == TIMER1_CHANNEL_B)
    308a:	88 85       	ldd	r24, Y+8	; 0x08
    308c:	81 30       	cpi	r24, 0x01	; 1
    308e:	39 f4       	brne	.+14     	; 0x309e <TIMER1_u8GeneratePWM+0xb8>
			{
				/*			COM1B0										COM1B1				 */
				TCCR1A |= (((TIMER1_COMP_CHANEL_B_MODE&0x01) << 4) | ((TIMER1_COMP_CHANEL_B_MODE>>1 & 0x01) << 5));
    3090:	af e4       	ldi	r26, 0x4F	; 79
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	ef e4       	ldi	r30, 0x4F	; 79
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	80 62       	ori	r24, 0x20	; 32
    309c:	8c 93       	st	X, r24
			}

			/* load the freq required in ICR1 or OCR1A or not based on TIMER1 mode*/
#if (TIMER1_MODE == TIMER1_FAST_PWM_ICR1)
			if(copy_u32Freq <= Timer1_MaxFreq )
    309e:	20 91 30 01 	lds	r18, 0x0130
    30a2:	30 91 31 01 	lds	r19, 0x0131
    30a6:	40 91 32 01 	lds	r20, 0x0132
    30aa:	50 91 33 01 	lds	r21, 0x0133
    30ae:	89 85       	ldd	r24, Y+9	; 0x09
    30b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b2:	ab 85       	ldd	r26, Y+11	; 0x0b
    30b4:	bc 85       	ldd	r27, Y+12	; 0x0c
    30b6:	28 17       	cp	r18, r24
    30b8:	39 07       	cpc	r19, r25
    30ba:	4a 07       	cpc	r20, r26
    30bc:	5b 07       	cpc	r21, r27
    30be:	08 f4       	brcc	.+2      	; 0x30c2 <TIMER1_u8GeneratePWM+0xdc>
    30c0:	03 c1       	rjmp	.+518    	; 0x32c8 <TIMER1_u8GeneratePWM+0x2e2>
			{
				Local_u32Temp = ((CPU_FREQ / (1UL * copy_u32Freq)) - 1);
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	94 e2       	ldi	r25, 0x24	; 36
    30c6:	a4 ef       	ldi	r26, 0xF4	; 244
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	29 85       	ldd	r18, Y+9	; 0x09
    30cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    30ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    30d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__udivmodsi4>
    30da:	da 01       	movw	r26, r20
    30dc:	c9 01       	movw	r24, r18
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	a1 09       	sbc	r26, r1
    30e2:	b1 09       	sbc	r27, r1
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	9a 83       	std	Y+2, r25	; 0x02
    30e8:	ab 83       	std	Y+3, r26	; 0x03
    30ea:	bc 83       	std	Y+4, r27	; 0x04
				if(Local_u32Temp > 65535)
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	9a 81       	ldd	r25, Y+2	; 0x02
    30f0:	ab 81       	ldd	r26, Y+3	; 0x03
    30f2:	bc 81       	ldd	r27, Y+4	; 0x04
    30f4:	80 30       	cpi	r24, 0x00	; 0
    30f6:	e0 e0       	ldi	r30, 0x00	; 0
    30f8:	9e 07       	cpc	r25, r30
    30fa:	e1 e0       	ldi	r30, 0x01	; 1
    30fc:	ae 07       	cpc	r26, r30
    30fe:	e0 e0       	ldi	r30, 0x00	; 0
    3100:	be 07       	cpc	r27, r30
    3102:	08 f4       	brcc	.+2      	; 0x3106 <TIMER1_u8GeneratePWM+0x120>
    3104:	d6 c0       	rjmp	.+428    	; 0x32b2 <TIMER1_u8GeneratePWM+0x2cc>
				{
					Local_u32Temp = ((CPU_FREQ / (8UL * copy_u32Freq)) - 1);
    3106:	89 85       	ldd	r24, Y+9	; 0x09
    3108:	9a 85       	ldd	r25, Y+10	; 0x0a
    310a:	ab 85       	ldd	r26, Y+11	; 0x0b
    310c:	bc 85       	ldd	r27, Y+12	; 0x0c
    310e:	88 0f       	add	r24, r24
    3110:	99 1f       	adc	r25, r25
    3112:	aa 1f       	adc	r26, r26
    3114:	bb 1f       	adc	r27, r27
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	aa 1f       	adc	r26, r26
    311c:	bb 1f       	adc	r27, r27
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	aa 1f       	adc	r26, r26
    3124:	bb 1f       	adc	r27, r27
    3126:	9c 01       	movw	r18, r24
    3128:	ad 01       	movw	r20, r26
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	94 e2       	ldi	r25, 0x24	; 36
    312e:	a4 ef       	ldi	r26, 0xF4	; 244
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	bc 01       	movw	r22, r24
    3134:	cd 01       	movw	r24, r26
    3136:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__udivmodsi4>
    313a:	da 01       	movw	r26, r20
    313c:	c9 01       	movw	r24, r18
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	a1 09       	sbc	r26, r1
    3142:	b1 09       	sbc	r27, r1
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	9a 83       	std	Y+2, r25	; 0x02
    3148:	ab 83       	std	Y+3, r26	; 0x03
    314a:	bc 83       	std	Y+4, r27	; 0x04
					if(Local_u32Temp > 65535)
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	ab 81       	ldd	r26, Y+3	; 0x03
    3152:	bc 81       	ldd	r27, Y+4	; 0x04
    3154:	80 30       	cpi	r24, 0x00	; 0
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	9f 07       	cpc	r25, r31
    315a:	f1 e0       	ldi	r31, 0x01	; 1
    315c:	af 07       	cpc	r26, r31
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	bf 07       	cpc	r27, r31
    3162:	08 f4       	brcc	.+2      	; 0x3166 <TIMER1_u8GeneratePWM+0x180>
    3164:	9b c0       	rjmp	.+310    	; 0x329c <TIMER1_u8GeneratePWM+0x2b6>
					{
						Local_u32Temp = ((CPU_FREQ / (64UL * copy_u32Freq)) - 1);
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	9a 85       	ldd	r25, Y+10	; 0x0a
    316a:	ab 85       	ldd	r26, Y+11	; 0x0b
    316c:	bc 85       	ldd	r27, Y+12	; 0x0c
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	aa 1f       	adc	r26, r26
    3174:	bb 1f       	adc	r27, r27
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	aa 1f       	adc	r26, r26
    317c:	bb 1f       	adc	r27, r27
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	aa 1f       	adc	r26, r26
    3184:	bb 1f       	adc	r27, r27
    3186:	88 0f       	add	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	aa 1f       	adc	r26, r26
    318c:	bb 1f       	adc	r27, r27
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	aa 1f       	adc	r26, r26
    3194:	bb 1f       	adc	r27, r27
    3196:	88 0f       	add	r24, r24
    3198:	99 1f       	adc	r25, r25
    319a:	aa 1f       	adc	r26, r26
    319c:	bb 1f       	adc	r27, r27
    319e:	9c 01       	movw	r18, r24
    31a0:	ad 01       	movw	r20, r26
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	94 e2       	ldi	r25, 0x24	; 36
    31a6:	a4 ef       	ldi	r26, 0xF4	; 244
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__udivmodsi4>
    31b2:	da 01       	movw	r26, r20
    31b4:	c9 01       	movw	r24, r18
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	a1 09       	sbc	r26, r1
    31ba:	b1 09       	sbc	r27, r1
    31bc:	89 83       	std	Y+1, r24	; 0x01
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	ab 83       	std	Y+3, r26	; 0x03
    31c2:	bc 83       	std	Y+4, r27	; 0x04
						if(Local_u32Temp > 65535)
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	ab 81       	ldd	r26, Y+3	; 0x03
    31ca:	bc 81       	ldd	r27, Y+4	; 0x04
    31cc:	80 30       	cpi	r24, 0x00	; 0
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	92 07       	cpc	r25, r18
    31d2:	21 e0       	ldi	r18, 0x01	; 1
    31d4:	a2 07       	cpc	r26, r18
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	b2 07       	cpc	r27, r18
    31da:	08 f4       	brcc	.+2      	; 0x31de <TIMER1_u8GeneratePWM+0x1f8>
    31dc:	54 c0       	rjmp	.+168    	; 0x3286 <TIMER1_u8GeneratePWM+0x2a0>
						{
							Local_u32Temp = ((CPU_FREQ / (256UL * copy_u32Freq)) - 1);
    31de:	89 85       	ldd	r24, Y+9	; 0x09
    31e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e2:	ab 85       	ldd	r26, Y+11	; 0x0b
    31e4:	bc 85       	ldd	r27, Y+12	; 0x0c
    31e6:	22 27       	eor	r18, r18
    31e8:	38 2f       	mov	r19, r24
    31ea:	49 2f       	mov	r20, r25
    31ec:	5a 2f       	mov	r21, r26
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	94 e2       	ldi	r25, 0x24	; 36
    31f2:	a4 ef       	ldi	r26, 0xF4	; 244
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	bc 01       	movw	r22, r24
    31f8:	cd 01       	movw	r24, r26
    31fa:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__udivmodsi4>
    31fe:	da 01       	movw	r26, r20
    3200:	c9 01       	movw	r24, r18
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	a1 09       	sbc	r26, r1
    3206:	b1 09       	sbc	r27, r1
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	9a 83       	std	Y+2, r25	; 0x02
    320c:	ab 83       	std	Y+3, r26	; 0x03
    320e:	bc 83       	std	Y+4, r27	; 0x04
							if(Local_u32Temp > 65535)
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	ab 81       	ldd	r26, Y+3	; 0x03
    3216:	bc 81       	ldd	r27, Y+4	; 0x04
    3218:	80 30       	cpi	r24, 0x00	; 0
    321a:	e0 e0       	ldi	r30, 0x00	; 0
    321c:	9e 07       	cpc	r25, r30
    321e:	e1 e0       	ldi	r30, 0x01	; 1
    3220:	ae 07       	cpc	r26, r30
    3222:	e0 e0       	ldi	r30, 0x00	; 0
    3224:	be 07       	cpc	r27, r30
    3226:	20 f1       	brcs	.+72     	; 0x3270 <TIMER1_u8GeneratePWM+0x28a>
							{
								Local_u16Pre = 1024;
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	94 e0       	ldi	r25, 0x04	; 4
    322c:	9e 83       	std	Y+6, r25	; 0x06
    322e:	8d 83       	std	Y+5, r24	; 0x05
								ICR1 = ((CPU_FREQ / (1024UL * copy_u32Freq)) - 1);
    3230:	06 e4       	ldi	r16, 0x46	; 70
    3232:	10 e0       	ldi	r17, 0x00	; 0
    3234:	89 85       	ldd	r24, Y+9	; 0x09
    3236:	9a 85       	ldd	r25, Y+10	; 0x0a
    3238:	ab 85       	ldd	r26, Y+11	; 0x0b
    323a:	bc 85       	ldd	r27, Y+12	; 0x0c
    323c:	9c 01       	movw	r18, r24
    323e:	ad 01       	movw	r20, r26
    3240:	01 2e       	mov	r0, r17
    3242:	1a e0       	ldi	r17, 0x0A	; 10
    3244:	22 0f       	add	r18, r18
    3246:	33 1f       	adc	r19, r19
    3248:	44 1f       	adc	r20, r20
    324a:	55 1f       	adc	r21, r21
    324c:	1a 95       	dec	r17
    324e:	d1 f7       	brne	.-12     	; 0x3244 <TIMER1_u8GeneratePWM+0x25e>
    3250:	10 2d       	mov	r17, r0
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	94 e2       	ldi	r25, 0x24	; 36
    3256:	a4 ef       	ldi	r26, 0xF4	; 244
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	bc 01       	movw	r22, r24
    325c:	cd 01       	movw	r24, r26
    325e:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__udivmodsi4>
    3262:	da 01       	movw	r26, r20
    3264:	c9 01       	movw	r24, r18
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f8 01       	movw	r30, r16
    326a:	91 83       	std	Z+1, r25	; 0x01
    326c:	80 83       	st	Z, r24
    326e:	2e c0       	rjmp	.+92     	; 0x32cc <TIMER1_u8GeneratePWM+0x2e6>
							}
							else
							{
								Local_u16Pre = 256;
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	91 e0       	ldi	r25, 0x01	; 1
    3274:	9e 83       	std	Y+6, r25	; 0x06
    3276:	8d 83       	std	Y+5, r24	; 0x05
								ICR1 = Local_u32Temp;
    3278:	e6 e4       	ldi	r30, 0x46	; 70
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	9a 81       	ldd	r25, Y+2	; 0x02
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
    3284:	23 c0       	rjmp	.+70     	; 0x32cc <TIMER1_u8GeneratePWM+0x2e6>
							}
						}
						else
						{
							Local_u16Pre = 64;
    3286:	80 e4       	ldi	r24, 0x40	; 64
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
							ICR1 = Local_u32Temp;
    328e:	e6 e4       	ldi	r30, 0x46	; 70
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	80 83       	st	Z, r24
    329a:	18 c0       	rjmp	.+48     	; 0x32cc <TIMER1_u8GeneratePWM+0x2e6>
						}
					}
					else
					{
						Local_u16Pre = 8;
    329c:	88 e0       	ldi	r24, 0x08	; 8
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	8d 83       	std	Y+5, r24	; 0x05
						ICR1 = Local_u32Temp;
    32a4:	e6 e4       	ldi	r30, 0x46	; 70
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	9a 81       	ldd	r25, Y+2	; 0x02
    32ac:	91 83       	std	Z+1, r25	; 0x01
    32ae:	80 83       	st	Z, r24
    32b0:	0d c0       	rjmp	.+26     	; 0x32cc <TIMER1_u8GeneratePWM+0x2e6>
					}
				}
				else
				{
					Local_u16Pre = 1;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
					ICR1 = Local_u32Temp;
    32ba:	e6 e4       	ldi	r30, 0x46	; 70
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	9a 81       	ldd	r25, Y+2	; 0x02
    32c2:	91 83       	std	Z+1, r25	; 0x01
    32c4:	80 83       	st	Z, r24
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <TIMER1_u8GeneratePWM+0x2e6>
				}
			}
			else
			{
				Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_FREQ_ID;
    32c8:	8f e0       	ldi	r24, 0x0F	; 15
    32ca:	8f 83       	std	Y+7, r24	; 0x07
			}

#endif	//end of ICR1 or OCR1A pwm mode

			/* load the Duty required value in OCR1x */
			if(copy_u8TimerChannel == TIMER1_CHANNEL_A)
    32cc:	88 85       	ldd	r24, Y+8	; 0x08
    32ce:	88 23       	and	r24, r24
    32d0:	29 f5       	brne	.+74     	; 0x331c <TIMER1_u8GeneratePWM+0x336>
#elif (TIMER1_MODE == TIMER1_PWM_9BIT || TIMER1_MODE == TIMER1_FAST_PWM_9BIT)
				OCR1A = (511UL * (copy_u16Duty + 1)) / 1000UL;
#elif (TIMER1_MODE == TIMER1_PWM_10BIT || TIMER1_MODE == TIMER1_FAST_PWM_10BIT)
				OCR1A = (1023UL * (copy_u16Duty + 1)) / 1000UL;
#elif (TIMER1_MODE == TIMER1_PWM_ICR1 || TIMER1_MODE == TIMER1_FAST_PWM_ICR1 || TIMER1_MODE == TIMER1_PWM_PFC_ICR1)
				OCR1A = (ICR1 * (u32)(copy_u16Duty)) / 1000UL;
    32d2:	0f 2e       	mov	r0, r31
    32d4:	fa e4       	ldi	r31, 0x4A	; 74
    32d6:	cf 2e       	mov	r12, r31
    32d8:	dd 24       	eor	r13, r13
    32da:	f0 2d       	mov	r31, r0
    32dc:	e6 e4       	ldi	r30, 0x46	; 70
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	91 81       	ldd	r25, Z+1	; 0x01
    32e4:	7c 01       	movw	r14, r24
    32e6:	00 e0       	ldi	r16, 0x00	; 0
    32e8:	10 e0       	ldi	r17, 0x00	; 0
    32ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ee:	9c 01       	movw	r18, r24
    32f0:	40 e0       	ldi	r20, 0x00	; 0
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	c8 01       	movw	r24, r16
    32f6:	b7 01       	movw	r22, r14
    32f8:	0e 94 45 22 	call	0x448a	; 0x448a <__mulsi3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	28 ee       	ldi	r18, 0xE8	; 232
    3302:	33 e0       	ldi	r19, 0x03	; 3
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	bc 01       	movw	r22, r24
    330a:	cd 01       	movw	r24, r26
    330c:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__udivmodsi4>
    3310:	da 01       	movw	r26, r20
    3312:	c9 01       	movw	r24, r18
    3314:	f6 01       	movw	r30, r12
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	80 83       	st	Z, r24
    331a:	27 c0       	rjmp	.+78     	; 0x336a <TIMER1_u8GeneratePWM+0x384>

#else
				Local_u8ErrorStatus = TIMER_E_INVALID_PWM_CONFIG;
#endif
			}
			else if(copy_u8TimerChannel == TIMER1_CHANNEL_B)
    331c:	88 85       	ldd	r24, Y+8	; 0x08
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	21 f5       	brne	.+72     	; 0x336a <TIMER1_u8GeneratePWM+0x384>
#elif (TIMER1_MODE == TIMER1_PWM_9BIT || TIMER1_MODE == TIMER1_FAST_PWM_9BIT)
				OCR1B = (511UL * (copy_u16Duty + 1)) / 1000UL;
#elif (TIMER1_MODE == TIMER1_PWM_10BIT || TIMER1_MODE == TIMER1_FAST_PWM_10BIT)
				OCR1B = (1023UL * (copy_u16Duty + 1)) / 1000UL;
#elif (TIMER1_MODE == TIMER1_PWM_ICR1 || TIMER1_MODE == TIMER1_FAST_PWM_ICR1 || TIMER1_MODE == TIMER1_PWM_PFC_ICR1)
				OCR1B = (ICR1 * (u32)(copy_u16Duty)) / 1000UL;
    3322:	0f 2e       	mov	r0, r31
    3324:	f8 e4       	ldi	r31, 0x48	; 72
    3326:	cf 2e       	mov	r12, r31
    3328:	dd 24       	eor	r13, r13
    332a:	f0 2d       	mov	r31, r0
    332c:	e6 e4       	ldi	r30, 0x46	; 70
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	91 81       	ldd	r25, Z+1	; 0x01
    3334:	7c 01       	movw	r14, r24
    3336:	00 e0       	ldi	r16, 0x00	; 0
    3338:	10 e0       	ldi	r17, 0x00	; 0
    333a:	8d 85       	ldd	r24, Y+13	; 0x0d
    333c:	9e 85       	ldd	r25, Y+14	; 0x0e
    333e:	9c 01       	movw	r18, r24
    3340:	40 e0       	ldi	r20, 0x00	; 0
    3342:	50 e0       	ldi	r21, 0x00	; 0
    3344:	c8 01       	movw	r24, r16
    3346:	b7 01       	movw	r22, r14
    3348:	0e 94 45 22 	call	0x448a	; 0x448a <__mulsi3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	28 ee       	ldi	r18, 0xE8	; 232
    3352:	33 e0       	ldi	r19, 0x03	; 3
    3354:	40 e0       	ldi	r20, 0x00	; 0
    3356:	50 e0       	ldi	r21, 0x00	; 0
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__udivmodsi4>
    3360:	da 01       	movw	r26, r20
    3362:	c9 01       	movw	r24, r18
    3364:	f6 01       	movw	r30, r12
    3366:	91 83       	std	Z+1, r25	; 0x01
    3368:	80 83       	st	Z, r24
#endif

			}

			/* start the timer with prescaler / 64 */
			TCCR1B &= 0xF8;
    336a:	ae e4       	ldi	r26, 0x4E	; 78
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	ee e4       	ldi	r30, 0x4E	; 78
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	88 7f       	andi	r24, 0xF8	; 248
    3376:	8c 93       	st	X, r24
#if (TIMER1_MODE == TIMER1_FAST_PWM_ICR1 || TIMER1_MODE == TIMER1_FAST_PWM_OCR1A || \
			TIMER1_MODE == TIMER1_PWM_ICR1 || TIMER1_MODE == TIMER1_PWM_OCR1A || \
					TIMER1_MODE == TIMER1_PWM_PFC_ICR1 || TIMER1_MODE == TIMER1_PWM_PFC_OCR1A)
		if(Local_u16Pre == 1024)
    3378:	8d 81       	ldd	r24, Y+5	; 0x05
    337a:	9e 81       	ldd	r25, Y+6	; 0x06
    337c:	f4 e0       	ldi	r31, 0x04	; 4
    337e:	80 30       	cpi	r24, 0x00	; 0
    3380:	9f 07       	cpc	r25, r31
    3382:	41 f4       	brne	.+16     	; 0x3394 <TIMER1_u8GeneratePWM+0x3ae>
		{
			TCCR1B |= TIMER_CLOCK_1024;
    3384:	ae e4       	ldi	r26, 0x4E	; 78
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	ee e4       	ldi	r30, 0x4E	; 78
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	85 60       	ori	r24, 0x05	; 5
    3390:	8c 93       	st	X, r24
    3392:	3a c0       	rjmp	.+116    	; 0x3408 <TIMER1_u8GeneratePWM+0x422>
		}
		else if(Local_u16Pre == 256)
    3394:	8d 81       	ldd	r24, Y+5	; 0x05
    3396:	9e 81       	ldd	r25, Y+6	; 0x06
    3398:	21 e0       	ldi	r18, 0x01	; 1
    339a:	80 30       	cpi	r24, 0x00	; 0
    339c:	92 07       	cpc	r25, r18
    339e:	41 f4       	brne	.+16     	; 0x33b0 <TIMER1_u8GeneratePWM+0x3ca>
		{
			TCCR1B |= TIMER_CLOCK_256;
    33a0:	ae e4       	ldi	r26, 0x4E	; 78
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	ee e4       	ldi	r30, 0x4E	; 78
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	84 60       	ori	r24, 0x04	; 4
    33ac:	8c 93       	st	X, r24
    33ae:	2c c0       	rjmp	.+88     	; 0x3408 <TIMER1_u8GeneratePWM+0x422>
		}
		else if(Local_u16Pre == 64)
    33b0:	8d 81       	ldd	r24, Y+5	; 0x05
    33b2:	9e 81       	ldd	r25, Y+6	; 0x06
    33b4:	80 34       	cpi	r24, 0x40	; 64
    33b6:	91 05       	cpc	r25, r1
    33b8:	41 f4       	brne	.+16     	; 0x33ca <TIMER1_u8GeneratePWM+0x3e4>
		{
			TCCR1B |= TIMER_CLOCK_64;
    33ba:	ae e4       	ldi	r26, 0x4E	; 78
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	ee e4       	ldi	r30, 0x4E	; 78
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	83 60       	ori	r24, 0x03	; 3
    33c6:	8c 93       	st	X, r24
    33c8:	1f c0       	rjmp	.+62     	; 0x3408 <TIMER1_u8GeneratePWM+0x422>
		}
		else if(Local_u16Pre == 8)
    33ca:	8d 81       	ldd	r24, Y+5	; 0x05
    33cc:	9e 81       	ldd	r25, Y+6	; 0x06
    33ce:	88 30       	cpi	r24, 0x08	; 8
    33d0:	91 05       	cpc	r25, r1
    33d2:	41 f4       	brne	.+16     	; 0x33e4 <TIMER1_u8GeneratePWM+0x3fe>
		{
			TCCR1B |= TIMER_CLOCK_8;
    33d4:	ae e4       	ldi	r26, 0x4E	; 78
    33d6:	b0 e0       	ldi	r27, 0x00	; 0
    33d8:	ee e4       	ldi	r30, 0x4E	; 78
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	80 81       	ld	r24, Z
    33de:	82 60       	ori	r24, 0x02	; 2
    33e0:	8c 93       	st	X, r24
    33e2:	12 c0       	rjmp	.+36     	; 0x3408 <TIMER1_u8GeneratePWM+0x422>
		}
		else if(Local_u16Pre == 1)
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	9e 81       	ldd	r25, Y+6	; 0x06
    33e8:	81 30       	cpi	r24, 0x01	; 1
    33ea:	91 05       	cpc	r25, r1
    33ec:	69 f4       	brne	.+26     	; 0x3408 <TIMER1_u8GeneratePWM+0x422>
		{
			TCCR1B |= TIMER_NO_PRESCALER;
    33ee:	ae e4       	ldi	r26, 0x4E	; 78
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	ee e4       	ldi	r30, 0x4E	; 78
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	80 81       	ld	r24, Z
    33f8:	81 60       	ori	r24, 0x01	; 1
    33fa:	8c 93       	st	X, r24
    33fc:	05 c0       	rjmp	.+10     	; 0x3408 <TIMER1_u8GeneratePWM+0x422>
		TCCR1B |= TIMER_NO_PRESCALER;
	}
#endif
		}
		else
			Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_DUTY_ID;
    33fe:	8e e0       	ldi	r24, 0x0E	; 14
    3400:	8f 83       	std	Y+7, r24	; 0x07
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <TIMER1_u8GeneratePWM+0x422>

	}
	else
		Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_CHANNEL_ID;
    3404:	80 e1       	ldi	r24, 0x10	; 16
    3406:	8f 83       	std	Y+7, r24	; 0x07

	return Local_u8ErrorStatus;
    3408:	8f 81       	ldd	r24, Y+7	; 0x07

}
    340a:	2e 96       	adiw	r28, 0x0e	; 14
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	1f 91       	pop	r17
    341c:	0f 91       	pop	r16
    341e:	ff 90       	pop	r15
    3420:	ef 90       	pop	r14
    3422:	df 90       	pop	r13
    3424:	cf 90       	pop	r12
    3426:	08 95       	ret

00003428 <TIMER1_voidStop>:

void TIMER1_voidStop(void)
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
	/* Clock Select / Prescaler */
	TCCR1B &= 0xF8;
    3430:	ae e4       	ldi	r26, 0x4E	; 78
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	ee e4       	ldi	r30, 0x4E	; 78
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	88 7f       	andi	r24, 0xF8	; 248
    343c:	8c 93       	st	X, r24
	TCCR1B |= TIMER_NO_CLOCK;
    343e:	ae e4       	ldi	r26, 0x4E	; 78
    3440:	b0 e0       	ldi	r27, 0x00	; 0
    3442:	ee e4       	ldi	r30, 0x4E	; 78
    3444:	f0 e0       	ldi	r31, 0x00	; 0
    3446:	80 81       	ld	r24, Z
    3448:	8c 93       	st	X, r24
}
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <TIMER2_voidInit>:

/********************************				 TIMER2  						********************************/

void TIMER2_voidInit(void)
{
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
	/* Waveform Generation Mode */
#if (TIMER2_MODE >= TIMER_NORMAL && TIMER2_MODE <= TIMER_FAST_PWM)
	/*			WGM20						WGM21				 */
	TCCR2 |= (((TIMER2_MODE&0x01) << 6) | ((TIMER2_MODE>>1 & 0x01) << 3));
    3458:	a5 e4       	ldi	r26, 0x45	; 69
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e5 e4       	ldi	r30, 0x45	; 69
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	8c 93       	st	X, r24
#endif

	/* Compare Match Output Mode */
#if (TIMER2_COMP_MODE >= TIMER_COMP_NORMAL && TIMER2_COMP_MODE <= TIMER_COMP_SET_OCx)
	/*			COM20						COM21				 */
	TCCR2 |= (((TIMER2_COMP_MODE&0x01) << 4) | ((TIMER2_COMP_MODE>>1 & 0x01) << 5));
    3464:	a5 e4       	ldi	r26, 0x45	; 69
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	e5 e4       	ldi	r30, 0x45	; 69
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	80 81       	ld	r24, Z
    346e:	80 63       	ori	r24, 0x30	; 48
    3470:	8c 93       	st	X, r24
	/* CLEAR Force Output Compare pin*/
	CLR_BIT(TCCR2, FOC2);
#endif

	/* Preload value */
	TCNT2 = TIMER2_PRELOAD_VALUE;
    3472:	e4 e4       	ldi	r30, 0x44	; 68
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	10 82       	st	Z, r1

	/* Compare value OCR0 */
	OCR2 = TIMER2_COMP_VALUE;
    3478:	e3 e4       	ldi	r30, 0x43	; 67
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	8a ef       	ldi	r24, 0xFA	; 250
    347e:	80 83       	st	Z, r24

	/* Timer/Counter2 Overflow & Output Compare Match Interrupt Enable */
#if (TIMER2_OVF_INT <= TIMER_ENABLE && TIMER2_OVF_INT >= TIMER_DISABLE && \
		TIMER2_COMP_INT <= TIMER_ENABLE && TIMER2_COMP_INT >= TIMER_DISABLE)
	TIMSK |= ((TIMER2_OVF_INT<<6) | (TIMER2_COMP_INT<<7));
    3480:	a9 e5       	ldi	r26, 0x59	; 89
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	e9 e5       	ldi	r30, 0x59	; 89
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	8c 93       	st	X, r24
#error "Wrong Timer2 Interrupt Enable selection"
#endif

	/* Clock Select / Prescaler */
#if (TIMER2_CLOCK_SELECT >= TIMER2_NO_CLOCK && TIMER2_CLOCK_SELECT <= TIMER2_CLOCK_1024)
	TCCR2 &= 0xF8;
    348c:	a5 e4       	ldi	r26, 0x45	; 69
    348e:	b0 e0       	ldi	r27, 0x00	; 0
    3490:	e5 e4       	ldi	r30, 0x45	; 69
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	88 7f       	andi	r24, 0xF8	; 248
    3498:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_CLOCK_SELECT;
    349a:	a5 e4       	ldi	r26, 0x45	; 69
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	e5 e4       	ldi	r30, 0x45	; 69
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	80 81       	ld	r24, Z
    34a4:	84 60       	ori	r24, 0x04	; 4
    34a6:	8c 93       	st	X, r24

#else
#error "Wrong Timer2 Clock selection"
#endif

}
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <TIMER2_voidSetPreload>:

void TIMER2_voidSetPreload(u8 copy_u8Preload)
{
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	0f 92       	push	r0
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	89 83       	std	Y+1, r24	; 0x01
	/* Preload value */
	TCNT2 = copy_u8Preload;
    34ba:	e4 e4       	ldi	r30, 0x44	; 68
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	80 83       	st	Z, r24
}
    34c2:	0f 90       	pop	r0
    34c4:	cf 91       	pop	r28
    34c6:	df 91       	pop	r29
    34c8:	08 95       	ret

000034ca <TIMER2_voidSetCompMatchValue>:

void TIMER2_voidSetCompMatchValue(u8 copy_u8CompValue)
{
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	0f 92       	push	r0
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	89 83       	std	Y+1, r24	; 0x01
	/* Compare value OCR2 */
	OCR2 = copy_u8CompValue;
    34d6:	e3 e4       	ldi	r30, 0x43	; 67
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	89 81       	ldd	r24, Y+1	; 0x01
    34dc:	80 83       	st	Z, r24
}
    34de:	0f 90       	pop	r0
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	08 95       	ret

000034e6 <TIMER2_voidForceOutputComp>:

void TIMER2_voidForceOutputComp(void)
{
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, FOC2);
    34ee:	a5 e4       	ldi	r26, 0x45	; 69
    34f0:	b0 e0       	ldi	r27, 0x00	; 0
    34f2:	e5 e4       	ldi	r30, 0x45	; 69
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	80 81       	ld	r24, Z
    34f8:	80 68       	ori	r24, 0x80	; 128
    34fa:	8c 93       	st	X, r24
}
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret

00003502 <TIMER2_u8Delayms>:

u8 TIMER2_u8Delayms(u16 copy_u16Delayms, pvFunction_t copy_pvFunc)
{
    3502:	ef 92       	push	r14
    3504:	ff 92       	push	r15
    3506:	0f 93       	push	r16
    3508:	1f 93       	push	r17
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
    3512:	29 97       	sbiw	r28, 0x09	; 9
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	de bf       	out	0x3e, r29	; 62
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	cd bf       	out	0x3d, r28	; 61
    351e:	9f 83       	std	Y+7, r25	; 0x07
    3520:	8e 83       	std	Y+6, r24	; 0x06
    3522:	79 87       	std	Y+9, r23	; 0x09
    3524:	68 87       	std	Y+8, r22	; 0x08
	u8 Local_u8ErrorStatus = OK;
    3526:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Value = 0;
    3528:	19 82       	std	Y+1, r1	; 0x01
    352a:	1a 82       	std	Y+2, r1	; 0x02
    352c:	1b 82       	std	Y+3, r1	; 0x03
    352e:	1c 82       	std	Y+4, r1	; 0x04

	if(copy_pvFunc != NULL)
    3530:	88 85       	ldd	r24, Y+8	; 0x08
    3532:	99 85       	ldd	r25, Y+9	; 0x09
    3534:	00 97       	sbiw	r24, 0x00	; 0
    3536:	09 f4       	brne	.+2      	; 0x353a <TIMER2_u8Delayms+0x38>
    3538:	9e c0       	rjmp	.+316    	; 0x3676 <TIMER2_u8Delayms+0x174>
	{
		if(Timer2_u8Flag == IDLE)
    353a:	80 91 34 01 	lds	r24, 0x0134
    353e:	82 30       	cpi	r24, 0x02	; 2
    3540:	09 f0       	breq	.+2      	; 0x3544 <TIMER2_u8Delayms+0x42>
    3542:	96 c0       	rjmp	.+300    	; 0x3670 <TIMER2_u8Delayms+0x16e>
		{
			/* Busy */
			Timer2_u8Flag = BUSY;
    3544:	83 e0       	ldi	r24, 0x03	; 3
    3546:	80 93 34 01 	sts	0x0134, r24

			/* stop the timer */
			TCCR2 &= 0xF8;
    354a:	a5 e4       	ldi	r26, 0x45	; 69
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	e5 e4       	ldi	r30, 0x45	; 69
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	80 81       	ld	r24, Z
    3554:	88 7f       	andi	r24, 0xF8	; 248
    3556:	8c 93       	st	X, r24
			TCCR2 |= TIMER2_NO_CLOCK;
    3558:	a5 e4       	ldi	r26, 0x45	; 69
    355a:	b0 e0       	ldi	r27, 0x00	; 0
    355c:	e5 e4       	ldi	r30, 0x45	; 69
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	80 81       	ld	r24, Z
    3562:	8c 93       	st	X, r24

			/* store the function to be called*/
			Timer_CallBack[TIMER2_COMP] = copy_pvFunc;
    3564:	88 85       	ldd	r24, Y+8	; 0x08
    3566:	99 85       	ldd	r25, Y+9	; 0x09
    3568:	90 93 49 01 	sts	0x0149, r25
    356c:	80 93 48 01 	sts	0x0148, r24

			/* Waveform Generation Mode --> CTC mode */
			/*			WGM20						WGM21				 */
			TCCR2 |= (((TIMER_CTC&0x01) << 6) | ((TIMER_CTC>>1 & 0x01) << 3));
    3570:	a5 e4       	ldi	r26, 0x45	; 69
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e5 e4       	ldi	r30, 0x45	; 69
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	88 60       	ori	r24, 0x08	; 8
    357c:	8c 93       	st	X, r24

			/* Compare Match Output Mode --> Normal */
			/*			COM20						COM21				 */
			TCCR2 |= (((TIMER_COMP_NORMAL&0x01) << 4) | ((TIMER_COMP_NORMAL>>1 & 0x01) << 5));
    357e:	a5 e4       	ldi	r26, 0x45	; 69
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	e5 e4       	ldi	r30, 0x45	; 69
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	8c 93       	st	X, r24

			/* Preload value = 0, to start from the beginning */
			TCNT2 = 0;
    358a:	e4 e4       	ldi	r30, 0x44	; 68
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	10 82       	st	Z, r1

			/* store the delay*/
			Timer2_u16Counter = copy_u16Delayms;
    3590:	8e 81       	ldd	r24, Y+6	; 0x06
    3592:	9f 81       	ldd	r25, Y+7	; 0x07
    3594:	90 93 39 01 	sts	0x0139, r25
    3598:	80 93 38 01 	sts	0x0138, r24

			//mask prescaler bits first
			TCCR2 &= 0xF8;
    359c:	a5 e4       	ldi	r26, 0x45	; 69
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	e5 e4       	ldi	r30, 0x45	; 69
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	88 7f       	andi	r24, 0xF8	; 248
    35a8:	8c 93       	st	X, r24
				TCCR2 |= TIMER2_CLOCK_8;
			}
			else if(CPU_FREQ <= 32000000UL)
			{
				/* compare value = 250, every 1 ms interrupt happens */
				Local_u32Value = 1000UL / (32000000UL / CPU_FREQ);
    35aa:	84 ef       	ldi	r24, 0xF4	; 244
    35ac:	91 e0       	ldi	r25, 0x01	; 1
    35ae:	a0 e0       	ldi	r26, 0x00	; 0
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	89 83       	std	Y+1, r24	; 0x01
    35b4:	9a 83       	std	Y+2, r25	; 0x02
    35b6:	ab 83       	std	Y+3, r26	; 0x03
    35b8:	bc 83       	std	Y+4, r27	; 0x04
				if(Local_u32Value > 255)
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	9a 81       	ldd	r25, Y+2	; 0x02
    35be:	ab 81       	ldd	r26, Y+3	; 0x03
    35c0:	bc 81       	ldd	r27, Y+4	; 0x04
    35c2:	8f 3f       	cpi	r24, 0xFF	; 255
    35c4:	91 05       	cpc	r25, r1
    35c6:	a1 05       	cpc	r26, r1
    35c8:	b1 05       	cpc	r27, r1
    35ca:	09 f0       	breq	.+2      	; 0x35ce <TIMER2_u8Delayms+0xcc>
    35cc:	08 f4       	brcc	.+2      	; 0x35d0 <TIMER2_u8Delayms+0xce>
    35ce:	3d c0       	rjmp	.+122    	; 0x364a <TIMER2_u8Delayms+0x148>
    35d0:	12 c0       	rjmp	.+36     	; 0x35f6 <TIMER2_u8Delayms+0xf4>
				{
					while(Local_u32Value > 255)
					{
						Local_u32Value /= 255;
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	ab 81       	ldd	r26, Y+3	; 0x03
    35d8:	bc 81       	ldd	r27, Y+4	; 0x04
    35da:	2f ef       	ldi	r18, 0xFF	; 255
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	bc 01       	movw	r22, r24
    35e4:	cd 01       	movw	r24, r26
    35e6:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__udivmodsi4>
    35ea:	da 01       	movw	r26, r20
    35ec:	c9 01       	movw	r24, r18
    35ee:	89 83       	std	Y+1, r24	; 0x01
    35f0:	9a 83       	std	Y+2, r25	; 0x02
    35f2:	ab 83       	std	Y+3, r26	; 0x03
    35f4:	bc 83       	std	Y+4, r27	; 0x04
			{
				/* compare value = 250, every 1 ms interrupt happens */
				Local_u32Value = 1000UL / (32000000UL / CPU_FREQ);
				if(Local_u32Value > 255)
				{
					while(Local_u32Value > 255)
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	9a 81       	ldd	r25, Y+2	; 0x02
    35fa:	ab 81       	ldd	r26, Y+3	; 0x03
    35fc:	bc 81       	ldd	r27, Y+4	; 0x04
    35fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3600:	91 05       	cpc	r25, r1
    3602:	a1 05       	cpc	r26, r1
    3604:	b1 05       	cpc	r27, r1
    3606:	09 f0       	breq	.+2      	; 0x360a <TIMER2_u8Delayms+0x108>
    3608:	20 f7       	brcc	.-56     	; 0x35d2 <TIMER2_u8Delayms+0xd0>
					{
						Local_u32Value /= 255;
					}
					Timer2_u16Counter *= (Local_u32Value + 1);
    360a:	80 91 38 01 	lds	r24, 0x0138
    360e:	90 91 39 01 	lds	r25, 0x0139
    3612:	7c 01       	movw	r14, r24
    3614:	00 e0       	ldi	r16, 0x00	; 0
    3616:	10 e0       	ldi	r17, 0x00	; 0
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	ab 81       	ldd	r26, Y+3	; 0x03
    361e:	bc 81       	ldd	r27, Y+4	; 0x04
    3620:	9c 01       	movw	r18, r24
    3622:	ad 01       	movw	r20, r26
    3624:	2f 5f       	subi	r18, 0xFF	; 255
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	4f 4f       	sbci	r20, 0xFF	; 255
    362a:	5f 4f       	sbci	r21, 0xFF	; 255
    362c:	c8 01       	movw	r24, r16
    362e:	b7 01       	movw	r22, r14
    3630:	0e 94 45 22 	call	0x448a	; 0x448a <__mulsi3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	90 93 39 01 	sts	0x0139, r25
    363c:	80 93 38 01 	sts	0x0138, r24
					OCR2 = 255;
    3640:	e3 e4       	ldi	r30, 0x43	; 67
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	8f ef       	ldi	r24, 0xFF	; 255
    3646:	80 83       	st	Z, r24
    3648:	04 c0       	rjmp	.+8      	; 0x3652 <TIMER2_u8Delayms+0x150>
				}
				else
					OCR2 = Local_u32Value;
    364a:	e3 e4       	ldi	r30, 0x43	; 67
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	80 83       	st	Z, r24
				/* Timer/Counter2 Output Compare Match Interrupt Enable */
				TIMSK |= (TIMER_ENABLE<<7);
    3652:	a9 e5       	ldi	r26, 0x59	; 89
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	e9 e5       	ldi	r30, 0x59	; 89
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	80 68       	ori	r24, 0x80	; 128
    365e:	8c 93       	st	X, r24

				/* start the timer by prescaler /64 ... tick time = 4 us*/
				TCCR2 |= TIMER2_CLOCK_32;
    3660:	a5 e4       	ldi	r26, 0x45	; 69
    3662:	b0 e0       	ldi	r27, 0x00	; 0
    3664:	e5 e4       	ldi	r30, 0x45	; 69
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	80 81       	ld	r24, Z
    366a:	83 60       	ori	r24, 0x03	; 3
    366c:	8c 93       	st	X, r24
    366e:	05 c0       	rjmp	.+10     	; 0x367a <TIMER2_u8Delayms+0x178>
				TCCR2 |= TIMER2_CLOCK_1024;
			}

		}
		else
			Local_u8ErrorStatus = TIMER_E_BUSY;
    3670:	8c e0       	ldi	r24, 0x0C	; 12
    3672:	8d 83       	std	Y+5, r24	; 0x05
    3674:	02 c0       	rjmp	.+4      	; 0x367a <TIMER2_u8Delayms+0x178>

	}
	else
		Local_u8ErrorStatus = TIMER_E_PARAM_POINTER;
    3676:	8b e0       	ldi	r24, 0x0B	; 11
    3678:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorStatus;
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    367c:	29 96       	adiw	r28, 0x09	; 9
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	1f 91       	pop	r17
    368e:	0f 91       	pop	r16
    3690:	ff 90       	pop	r15
    3692:	ef 90       	pop	r14
    3694:	08 95       	ret

00003696 <TIMER2_voidStop>:

void TIMER2_voidStop(void)
{
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
	/* Clock Select / Prescaler */
	TCCR2 &= 0xFC;
    369e:	a5 e4       	ldi	r26, 0x45	; 69
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	e5 e4       	ldi	r30, 0x45	; 69
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	80 81       	ld	r24, Z
    36a8:	8c 7f       	andi	r24, 0xFC	; 252
    36aa:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_NO_CLOCK;
    36ac:	a5 e4       	ldi	r26, 0x45	; 69
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e5 e4       	ldi	r30, 0x45	; 69
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	8c 93       	st	X, r24
}
    36b8:	cf 91       	pop	r28
    36ba:	df 91       	pop	r29
    36bc:	08 95       	ret

000036be <TIMER_u8EnableInterrupt>:


/********************	 Timers interrupt functions		****************/
u8 TIMER_u8EnableInterrupt(u8 copy_u8IntSource)
{
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	00 d0       	rcall	.+0      	; 0x36c4 <TIMER_u8EnableInterrupt+0x6>
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    36ca:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8IntSource >= TIMER0_OVF || copy_u8IntSource <= TIMER2_COMP)
	{
		SET_BIT(TIMSK, copy_u8IntSource);
    36cc:	a9 e5       	ldi	r26, 0x59	; 89
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	e9 e5       	ldi	r30, 0x59	; 89
    36d2:	f0 e0       	ldi	r31, 0x00	; 0
    36d4:	80 81       	ld	r24, Z
    36d6:	48 2f       	mov	r20, r24
    36d8:	8a 81       	ldd	r24, Y+2	; 0x02
    36da:	28 2f       	mov	r18, r24
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	02 2e       	mov	r0, r18
    36e4:	02 c0       	rjmp	.+4      	; 0x36ea <TIMER_u8EnableInterrupt+0x2c>
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	0a 94       	dec	r0
    36ec:	e2 f7       	brpl	.-8      	; 0x36e6 <TIMER_u8EnableInterrupt+0x28>
    36ee:	84 2b       	or	r24, r20
    36f0:	8c 93       	st	X, r24
	}
	else
		Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_INT_ID;

	return Local_u8ErrorStatus;
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	08 95       	ret

000036fe <TIMER_u8DisableInterrupt>:

u8 TIMER_u8DisableInterrupt(u8 copy_u8IntSource)
{
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	00 d0       	rcall	.+0      	; 0x3704 <TIMER_u8DisableInterrupt+0x6>
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    370a:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8IntSource >= TIMER0_OVF || copy_u8IntSource <= TIMER2_COMP)
	{
		CLR_BIT(TIMSK, copy_u8IntSource);
    370c:	a9 e5       	ldi	r26, 0x59	; 89
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	e9 e5       	ldi	r30, 0x59	; 89
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	48 2f       	mov	r20, r24
    3718:	8a 81       	ldd	r24, Y+2	; 0x02
    371a:	28 2f       	mov	r18, r24
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	02 2e       	mov	r0, r18
    3724:	02 c0       	rjmp	.+4      	; 0x372a <TIMER_u8DisableInterrupt+0x2c>
    3726:	88 0f       	add	r24, r24
    3728:	99 1f       	adc	r25, r25
    372a:	0a 94       	dec	r0
    372c:	e2 f7       	brpl	.-8      	; 0x3726 <TIMER_u8DisableInterrupt+0x28>
    372e:	80 95       	com	r24
    3730:	84 23       	and	r24, r20
    3732:	8c 93       	st	X, r24
	}
	else
		Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_INT_ID;

	return Local_u8ErrorStatus;
    3734:	89 81       	ldd	r24, Y+1	; 0x01
}
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	08 95       	ret

00003740 <TIMER_u8SetCallBack>:

u8 TIMER_u8SetCallBack(u8 copy_u8TimerSource, pvFunction_t copy_pvFunc)
{
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	00 d0       	rcall	.+0      	; 0x3746 <TIMER_u8SetCallBack+0x6>
    3746:	00 d0       	rcall	.+0      	; 0x3748 <TIMER_u8SetCallBack+0x8>
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	8a 83       	std	Y+2, r24	; 0x02
    374e:	7c 83       	std	Y+4, r23	; 0x04
    3750:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus = OK;
    3752:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8TimerSource >= TIMER0_OVF && copy_u8TimerSource <= TIMER2_COMP)
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	88 30       	cpi	r24, 0x08	; 8
    3758:	a0 f4       	brcc	.+40     	; 0x3782 <TIMER_u8SetCallBack+0x42>
	{
		if(copy_pvFunc != NULL)
    375a:	8b 81       	ldd	r24, Y+3	; 0x03
    375c:	9c 81       	ldd	r25, Y+4	; 0x04
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	69 f0       	breq	.+26     	; 0x377c <TIMER_u8SetCallBack+0x3c>
		{
			Timer_CallBack[copy_u8TimerSource] = copy_pvFunc;
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	88 2f       	mov	r24, r24
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	88 0f       	add	r24, r24
    376a:	99 1f       	adc	r25, r25
    376c:	fc 01       	movw	r30, r24
    376e:	e6 5c       	subi	r30, 0xC6	; 198
    3770:	fe 4f       	sbci	r31, 0xFE	; 254
    3772:	8b 81       	ldd	r24, Y+3	; 0x03
    3774:	9c 81       	ldd	r25, Y+4	; 0x04
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
    377a:	05 c0       	rjmp	.+10     	; 0x3786 <TIMER_u8SetCallBack+0x46>
		}
		else
			Local_u8ErrorStatus = TIMER_E_PARAM_POINTER;
    377c:	8b e0       	ldi	r24, 0x0B	; 11
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <TIMER_u8SetCallBack+0x46>
	}
	else
		Local_u8ErrorStatus = TIMER_E_PARAM_INVALID_INT_ID;
    3782:	8a e0       	ldi	r24, 0x0A	; 10
    3784:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
    3786:	89 81       	ldd	r24, Y+1	; 0x01
}
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	cf 91       	pop	r28
    3792:	df 91       	pop	r29
    3794:	08 95       	ret

00003796 <__vector_11>:
 * !comment  :  ISR Function TIMER. 						 			      *
 ******************************************************************************/
/* Timer/Counter0 Overflow */
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    3796:	1f 92       	push	r1
    3798:	0f 92       	push	r0
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	0f 92       	push	r0
    379e:	11 24       	eor	r1, r1
    37a0:	2f 93       	push	r18
    37a2:	3f 93       	push	r19
    37a4:	4f 93       	push	r20
    37a6:	5f 93       	push	r21
    37a8:	6f 93       	push	r22
    37aa:	7f 93       	push	r23
    37ac:	8f 93       	push	r24
    37ae:	9f 93       	push	r25
    37b0:	af 93       	push	r26
    37b2:	bf 93       	push	r27
    37b4:	ef 93       	push	r30
    37b6:	ff 93       	push	r31
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
	if(Timer_CallBack[TIMER0_OVF] != NULL)
    37c0:	80 91 3a 01 	lds	r24, 0x013A
    37c4:	90 91 3b 01 	lds	r25, 0x013B
    37c8:	00 97       	sbiw	r24, 0x00	; 0
    37ca:	29 f0       	breq	.+10     	; 0x37d6 <__vector_11+0x40>
	{
		Timer_CallBack[TIMER0_OVF]();
    37cc:	e0 91 3a 01 	lds	r30, 0x013A
    37d0:	f0 91 3b 01 	lds	r31, 0x013B
    37d4:	09 95       	icall
	}
}
    37d6:	cf 91       	pop	r28
    37d8:	df 91       	pop	r29
    37da:	ff 91       	pop	r31
    37dc:	ef 91       	pop	r30
    37de:	bf 91       	pop	r27
    37e0:	af 91       	pop	r26
    37e2:	9f 91       	pop	r25
    37e4:	8f 91       	pop	r24
    37e6:	7f 91       	pop	r23
    37e8:	6f 91       	pop	r22
    37ea:	5f 91       	pop	r21
    37ec:	4f 91       	pop	r20
    37ee:	3f 91       	pop	r19
    37f0:	2f 91       	pop	r18
    37f2:	0f 90       	pop	r0
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	0f 90       	pop	r0
    37f8:	1f 90       	pop	r1
    37fa:	18 95       	reti

000037fc <__vector_10>:

/* Timer/Counter0 Compare Match */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    37fc:	1f 92       	push	r1
    37fe:	0f 92       	push	r0
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	0f 92       	push	r0
    3804:	11 24       	eor	r1, r1
    3806:	2f 93       	push	r18
    3808:	3f 93       	push	r19
    380a:	4f 93       	push	r20
    380c:	5f 93       	push	r21
    380e:	6f 93       	push	r22
    3810:	7f 93       	push	r23
    3812:	8f 93       	push	r24
    3814:	9f 93       	push	r25
    3816:	af 93       	push	r26
    3818:	bf 93       	push	r27
    381a:	ef 93       	push	r30
    381c:	ff 93       	push	r31
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
	if(Timer_CallBack[TIMER0_COMP] != NULL)
    3826:	80 91 3c 01 	lds	r24, 0x013C
    382a:	90 91 3d 01 	lds	r25, 0x013D
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	29 f0       	breq	.+10     	; 0x383c <__vector_10+0x40>
	{
		Timer_CallBack[TIMER0_COMP]();
    3832:	e0 91 3c 01 	lds	r30, 0x013C
    3836:	f0 91 3d 01 	lds	r31, 0x013D
    383a:	09 95       	icall
	}
}
    383c:	cf 91       	pop	r28
    383e:	df 91       	pop	r29
    3840:	ff 91       	pop	r31
    3842:	ef 91       	pop	r30
    3844:	bf 91       	pop	r27
    3846:	af 91       	pop	r26
    3848:	9f 91       	pop	r25
    384a:	8f 91       	pop	r24
    384c:	7f 91       	pop	r23
    384e:	6f 91       	pop	r22
    3850:	5f 91       	pop	r21
    3852:	4f 91       	pop	r20
    3854:	3f 91       	pop	r19
    3856:	2f 91       	pop	r18
    3858:	0f 90       	pop	r0
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	0f 90       	pop	r0
    385e:	1f 90       	pop	r1
    3860:	18 95       	reti

00003862 <__vector_9>:

/* Timer/Counter1 Overflow */
void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    3862:	1f 92       	push	r1
    3864:	0f 92       	push	r0
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	0f 92       	push	r0
    386a:	11 24       	eor	r1, r1
    386c:	2f 93       	push	r18
    386e:	3f 93       	push	r19
    3870:	4f 93       	push	r20
    3872:	5f 93       	push	r21
    3874:	6f 93       	push	r22
    3876:	7f 93       	push	r23
    3878:	8f 93       	push	r24
    387a:	9f 93       	push	r25
    387c:	af 93       	push	r26
    387e:	bf 93       	push	r27
    3880:	ef 93       	push	r30
    3882:	ff 93       	push	r31
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
	if(Timer_CallBack[TIMER1_OVF] != NULL)
    388c:	80 91 3e 01 	lds	r24, 0x013E
    3890:	90 91 3f 01 	lds	r25, 0x013F
    3894:	00 97       	sbiw	r24, 0x00	; 0
    3896:	29 f0       	breq	.+10     	; 0x38a2 <__vector_9+0x40>
	{
		Timer_CallBack[TIMER1_OVF]();
    3898:	e0 91 3e 01 	lds	r30, 0x013E
    389c:	f0 91 3f 01 	lds	r31, 0x013F
    38a0:	09 95       	icall
	}
}
    38a2:	cf 91       	pop	r28
    38a4:	df 91       	pop	r29
    38a6:	ff 91       	pop	r31
    38a8:	ef 91       	pop	r30
    38aa:	bf 91       	pop	r27
    38ac:	af 91       	pop	r26
    38ae:	9f 91       	pop	r25
    38b0:	8f 91       	pop	r24
    38b2:	7f 91       	pop	r23
    38b4:	6f 91       	pop	r22
    38b6:	5f 91       	pop	r21
    38b8:	4f 91       	pop	r20
    38ba:	3f 91       	pop	r19
    38bc:	2f 91       	pop	r18
    38be:	0f 90       	pop	r0
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	0f 90       	pop	r0
    38c4:	1f 90       	pop	r1
    38c6:	18 95       	reti

000038c8 <__vector_8>:

/* Timer/Counter1 Compare Match B */
void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
    38c8:	1f 92       	push	r1
    38ca:	0f 92       	push	r0
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	0f 92       	push	r0
    38d0:	11 24       	eor	r1, r1
    38d2:	2f 93       	push	r18
    38d4:	3f 93       	push	r19
    38d6:	4f 93       	push	r20
    38d8:	5f 93       	push	r21
    38da:	6f 93       	push	r22
    38dc:	7f 93       	push	r23
    38de:	8f 93       	push	r24
    38e0:	9f 93       	push	r25
    38e2:	af 93       	push	r26
    38e4:	bf 93       	push	r27
    38e6:	ef 93       	push	r30
    38e8:	ff 93       	push	r31
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
	if(Timer_CallBack[TIMER1_COMPB] != NULL)
    38f2:	80 91 40 01 	lds	r24, 0x0140
    38f6:	90 91 41 01 	lds	r25, 0x0141
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	29 f0       	breq	.+10     	; 0x3908 <__vector_8+0x40>
	{
		Timer_CallBack[TIMER1_COMPB]();
    38fe:	e0 91 40 01 	lds	r30, 0x0140
    3902:	f0 91 41 01 	lds	r31, 0x0141
    3906:	09 95       	icall
	}
}
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	ff 91       	pop	r31
    390e:	ef 91       	pop	r30
    3910:	bf 91       	pop	r27
    3912:	af 91       	pop	r26
    3914:	9f 91       	pop	r25
    3916:	8f 91       	pop	r24
    3918:	7f 91       	pop	r23
    391a:	6f 91       	pop	r22
    391c:	5f 91       	pop	r21
    391e:	4f 91       	pop	r20
    3920:	3f 91       	pop	r19
    3922:	2f 91       	pop	r18
    3924:	0f 90       	pop	r0
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	0f 90       	pop	r0
    392a:	1f 90       	pop	r1
    392c:	18 95       	reti

0000392e <__vector_7>:

/* Timer/Counter1 Compare Match A */
void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
    392e:	1f 92       	push	r1
    3930:	0f 92       	push	r0
    3932:	0f b6       	in	r0, 0x3f	; 63
    3934:	0f 92       	push	r0
    3936:	11 24       	eor	r1, r1
    3938:	2f 93       	push	r18
    393a:	3f 93       	push	r19
    393c:	4f 93       	push	r20
    393e:	5f 93       	push	r21
    3940:	6f 93       	push	r22
    3942:	7f 93       	push	r23
    3944:	8f 93       	push	r24
    3946:	9f 93       	push	r25
    3948:	af 93       	push	r26
    394a:	bf 93       	push	r27
    394c:	ef 93       	push	r30
    394e:	ff 93       	push	r31
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
	if(Timer_CallBack[TIMER1_COMPA] != NULL)
    3958:	80 91 42 01 	lds	r24, 0x0142
    395c:	90 91 43 01 	lds	r25, 0x0143
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	29 f0       	breq	.+10     	; 0x396e <__vector_7+0x40>
	{
		Timer_CallBack[TIMER1_COMPA]();
    3964:	e0 91 42 01 	lds	r30, 0x0142
    3968:	f0 91 43 01 	lds	r31, 0x0143
    396c:	09 95       	icall
	}
}
    396e:	cf 91       	pop	r28
    3970:	df 91       	pop	r29
    3972:	ff 91       	pop	r31
    3974:	ef 91       	pop	r30
    3976:	bf 91       	pop	r27
    3978:	af 91       	pop	r26
    397a:	9f 91       	pop	r25
    397c:	8f 91       	pop	r24
    397e:	7f 91       	pop	r23
    3980:	6f 91       	pop	r22
    3982:	5f 91       	pop	r21
    3984:	4f 91       	pop	r20
    3986:	3f 91       	pop	r19
    3988:	2f 91       	pop	r18
    398a:	0f 90       	pop	r0
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	0f 90       	pop	r0
    3990:	1f 90       	pop	r1
    3992:	18 95       	reti

00003994 <__vector_6>:

/* Timer/Counter1 Capture Event */
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    3994:	1f 92       	push	r1
    3996:	0f 92       	push	r0
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	0f 92       	push	r0
    399c:	11 24       	eor	r1, r1
    399e:	2f 93       	push	r18
    39a0:	3f 93       	push	r19
    39a2:	4f 93       	push	r20
    39a4:	5f 93       	push	r21
    39a6:	6f 93       	push	r22
    39a8:	7f 93       	push	r23
    39aa:	8f 93       	push	r24
    39ac:	9f 93       	push	r25
    39ae:	af 93       	push	r26
    39b0:	bf 93       	push	r27
    39b2:	ef 93       	push	r30
    39b4:	ff 93       	push	r31
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
	if(Timer_CallBack[TIMER1_CAPT] != NULL)
    39be:	80 91 44 01 	lds	r24, 0x0144
    39c2:	90 91 45 01 	lds	r25, 0x0145
    39c6:	00 97       	sbiw	r24, 0x00	; 0
    39c8:	29 f0       	breq	.+10     	; 0x39d4 <__vector_6+0x40>
	{
		Timer_CallBack[TIMER1_CAPT]();
    39ca:	e0 91 44 01 	lds	r30, 0x0144
    39ce:	f0 91 45 01 	lds	r31, 0x0145
    39d2:	09 95       	icall
	}
}
    39d4:	cf 91       	pop	r28
    39d6:	df 91       	pop	r29
    39d8:	ff 91       	pop	r31
    39da:	ef 91       	pop	r30
    39dc:	bf 91       	pop	r27
    39de:	af 91       	pop	r26
    39e0:	9f 91       	pop	r25
    39e2:	8f 91       	pop	r24
    39e4:	7f 91       	pop	r23
    39e6:	6f 91       	pop	r22
    39e8:	5f 91       	pop	r21
    39ea:	4f 91       	pop	r20
    39ec:	3f 91       	pop	r19
    39ee:	2f 91       	pop	r18
    39f0:	0f 90       	pop	r0
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	0f 90       	pop	r0
    39f6:	1f 90       	pop	r1
    39f8:	18 95       	reti

000039fa <__vector_5>:

/* Timer/Counter2 Overflow */
void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
    39fa:	1f 92       	push	r1
    39fc:	0f 92       	push	r0
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	0f 92       	push	r0
    3a02:	11 24       	eor	r1, r1
    3a04:	2f 93       	push	r18
    3a06:	3f 93       	push	r19
    3a08:	4f 93       	push	r20
    3a0a:	5f 93       	push	r21
    3a0c:	6f 93       	push	r22
    3a0e:	7f 93       	push	r23
    3a10:	8f 93       	push	r24
    3a12:	9f 93       	push	r25
    3a14:	af 93       	push	r26
    3a16:	bf 93       	push	r27
    3a18:	ef 93       	push	r30
    3a1a:	ff 93       	push	r31
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
	if(Timer_CallBack[TIMER2_OVF] != NULL)
    3a24:	80 91 46 01 	lds	r24, 0x0146
    3a28:	90 91 47 01 	lds	r25, 0x0147
    3a2c:	00 97       	sbiw	r24, 0x00	; 0
    3a2e:	29 f0       	breq	.+10     	; 0x3a3a <__vector_5+0x40>
	{
		Timer_CallBack[TIMER2_OVF]();
    3a30:	e0 91 46 01 	lds	r30, 0x0146
    3a34:	f0 91 47 01 	lds	r31, 0x0147
    3a38:	09 95       	icall
	}
}
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	ff 91       	pop	r31
    3a40:	ef 91       	pop	r30
    3a42:	bf 91       	pop	r27
    3a44:	af 91       	pop	r26
    3a46:	9f 91       	pop	r25
    3a48:	8f 91       	pop	r24
    3a4a:	7f 91       	pop	r23
    3a4c:	6f 91       	pop	r22
    3a4e:	5f 91       	pop	r21
    3a50:	4f 91       	pop	r20
    3a52:	3f 91       	pop	r19
    3a54:	2f 91       	pop	r18
    3a56:	0f 90       	pop	r0
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	0f 90       	pop	r0
    3a5c:	1f 90       	pop	r1
    3a5e:	18 95       	reti

00003a60 <__vector_4>:

/* Timer/Counter2 Compare Match */
void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    3a60:	1f 92       	push	r1
    3a62:	0f 92       	push	r0
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	0f 92       	push	r0
    3a68:	11 24       	eor	r1, r1
    3a6a:	2f 93       	push	r18
    3a6c:	3f 93       	push	r19
    3a6e:	4f 93       	push	r20
    3a70:	5f 93       	push	r21
    3a72:	6f 93       	push	r22
    3a74:	7f 93       	push	r23
    3a76:	8f 93       	push	r24
    3a78:	9f 93       	push	r25
    3a7a:	af 93       	push	r26
    3a7c:	bf 93       	push	r27
    3a7e:	ef 93       	push	r30
    3a80:	ff 93       	push	r31
    3a82:	df 93       	push	r29
    3a84:	cf 93       	push	r28
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
	Timer2_u16DelayCounter++;
    3a8a:	80 91 36 01 	lds	r24, 0x0136
    3a8e:	90 91 37 01 	lds	r25, 0x0137
    3a92:	01 96       	adiw	r24, 0x01	; 1
    3a94:	90 93 37 01 	sts	0x0137, r25
    3a98:	80 93 36 01 	sts	0x0136, r24

	if(Timer2_u16DelayCounter == Timer2_u16Counter)
    3a9c:	20 91 36 01 	lds	r18, 0x0136
    3aa0:	30 91 37 01 	lds	r19, 0x0137
    3aa4:	80 91 38 01 	lds	r24, 0x0138
    3aa8:	90 91 39 01 	lds	r25, 0x0139
    3aac:	28 17       	cp	r18, r24
    3aae:	39 07       	cpc	r19, r25
    3ab0:	31 f5       	brne	.+76     	; 0x3afe <__vector_4+0x9e>
	{
		if(Timer_CallBack[TIMER2_COMP] != NULL)
    3ab2:	80 91 48 01 	lds	r24, 0x0148
    3ab6:	90 91 49 01 	lds	r25, 0x0149
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	29 f0       	breq	.+10     	; 0x3ac8 <__vector_4+0x68>
		{
			Timer_CallBack[TIMER2_COMP]();
    3abe:	e0 91 48 01 	lds	r30, 0x0148
    3ac2:	f0 91 49 01 	lds	r31, 0x0149
    3ac6:	09 95       	icall
		}

		Timer2_u16DelayCounter = 0;
    3ac8:	10 92 37 01 	sts	0x0137, r1
    3acc:	10 92 36 01 	sts	0x0136, r1
		Timer2_u8Flag = IDLE;
    3ad0:	82 e0       	ldi	r24, 0x02	; 2
    3ad2:	80 93 34 01 	sts	0x0134, r24

		/* Timer/Counter2 Output Compare Match Interrupt Disable */
		CLR_BIT(TIMSK, TIMER2_COMP);
    3ad6:	a9 e5       	ldi	r26, 0x59	; 89
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	e9 e5       	ldi	r30, 0x59	; 89
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	80 81       	ld	r24, Z
    3ae0:	8f 77       	andi	r24, 0x7F	; 127
    3ae2:	8c 93       	st	X, r24

		/* stop the timer */
		TCCR2 &= 0xFC;
    3ae4:	a5 e4       	ldi	r26, 0x45	; 69
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	e5 e4       	ldi	r30, 0x45	; 69
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	80 81       	ld	r24, Z
    3aee:	8c 7f       	andi	r24, 0xFC	; 252
    3af0:	8c 93       	st	X, r24
		TCCR2 |= TIMER2_NO_CLOCK;
    3af2:	a5 e4       	ldi	r26, 0x45	; 69
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	e5 e4       	ldi	r30, 0x45	; 69
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	80 81       	ld	r24, Z
    3afc:	8c 93       	st	X, r24
	}


}
    3afe:	cf 91       	pop	r28
    3b00:	df 91       	pop	r29
    3b02:	ff 91       	pop	r31
    3b04:	ef 91       	pop	r30
    3b06:	bf 91       	pop	r27
    3b08:	af 91       	pop	r26
    3b0a:	9f 91       	pop	r25
    3b0c:	8f 91       	pop	r24
    3b0e:	7f 91       	pop	r23
    3b10:	6f 91       	pop	r22
    3b12:	5f 91       	pop	r21
    3b14:	4f 91       	pop	r20
    3b16:	3f 91       	pop	r19
    3b18:	2f 91       	pop	r18
    3b1a:	0f 90       	pop	r0
    3b1c:	0f be       	out	0x3f, r0	; 63
    3b1e:	0f 90       	pop	r0
    3b20:	1f 90       	pop	r1
    3b22:	18 95       	reti

00003b24 <s32Map>:
#include "STD_TYPES.h"
#include "User_Functions.h"


s32 s32Map (s32 InputMin, s32 InputMax, s32 OutputMin, s32 OutputMax, s32 InputValue)
{
    3b24:	af 92       	push	r10
    3b26:	bf 92       	push	r11
    3b28:	cf 92       	push	r12
    3b2a:	df 92       	push	r13
    3b2c:	ef 92       	push	r14
    3b2e:	ff 92       	push	r15
    3b30:	0f 93       	push	r16
    3b32:	1f 93       	push	r17
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	a4 97       	sbiw	r28, 0x24	; 36
    3b3e:	0f b6       	in	r0, 0x3f	; 63
    3b40:	f8 94       	cli
    3b42:	de bf       	out	0x3e, r29	; 62
    3b44:	0f be       	out	0x3f, r0	; 63
    3b46:	cd bf       	out	0x3d, r28	; 61
    3b48:	69 8b       	std	Y+17, r22	; 0x11
    3b4a:	7a 8b       	std	Y+18, r23	; 0x12
    3b4c:	8b 8b       	std	Y+19, r24	; 0x13
    3b4e:	9c 8b       	std	Y+20, r25	; 0x14
    3b50:	2d 8b       	std	Y+21, r18	; 0x15
    3b52:	3e 8b       	std	Y+22, r19	; 0x16
    3b54:	4f 8b       	std	Y+23, r20	; 0x17
    3b56:	58 8f       	std	Y+24, r21	; 0x18
    3b58:	e9 8e       	std	Y+25, r14	; 0x19
    3b5a:	fa 8e       	std	Y+26, r15	; 0x1a
    3b5c:	0b 8f       	std	Y+27, r16	; 0x1b
    3b5e:	1c 8f       	std	Y+28, r17	; 0x1c
    3b60:	ad 8e       	std	Y+29, r10	; 0x1d
    3b62:	be 8e       	std	Y+30, r11	; 0x1e
    3b64:	cf 8e       	std	Y+31, r12	; 0x1f
    3b66:	d8 a2       	std	Y+32, r13	; 0x20
	/*y is output, x is input
	 * (y-y1)/(x-x1) = (y2-y1)/(x2-x1)
	 * */
	s32 s32Local_OutputDiference = OutputMax - OutputMin;
    3b68:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3b6a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3b6c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3b6e:	58 a1       	ldd	r21, Y+32	; 0x20
    3b70:	89 8d       	ldd	r24, Y+25	; 0x19
    3b72:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b74:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3b76:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3b78:	79 01       	movw	r14, r18
    3b7a:	8a 01       	movw	r16, r20
    3b7c:	e8 1a       	sub	r14, r24
    3b7e:	f9 0a       	sbc	r15, r25
    3b80:	0a 0b       	sbc	r16, r26
    3b82:	1b 0b       	sbc	r17, r27
    3b84:	d8 01       	movw	r26, r16
    3b86:	c7 01       	movw	r24, r14
    3b88:	8d 87       	std	Y+13, r24	; 0x0d
    3b8a:	9e 87       	std	Y+14, r25	; 0x0e
    3b8c:	af 87       	std	Y+15, r26	; 0x0f
    3b8e:	b8 8b       	std	Y+16, r27	; 0x10
	s32 s32Local_InputDiference = InputMax - InputMin;
    3b90:	2d 89       	ldd	r18, Y+21	; 0x15
    3b92:	3e 89       	ldd	r19, Y+22	; 0x16
    3b94:	4f 89       	ldd	r20, Y+23	; 0x17
    3b96:	58 8d       	ldd	r21, Y+24	; 0x18
    3b98:	89 89       	ldd	r24, Y+17	; 0x11
    3b9a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b9c:	ab 89       	ldd	r26, Y+19	; 0x13
    3b9e:	bc 89       	ldd	r27, Y+20	; 0x14
    3ba0:	79 01       	movw	r14, r18
    3ba2:	8a 01       	movw	r16, r20
    3ba4:	e8 1a       	sub	r14, r24
    3ba6:	f9 0a       	sbc	r15, r25
    3ba8:	0a 0b       	sbc	r16, r26
    3baa:	1b 0b       	sbc	r17, r27
    3bac:	d8 01       	movw	r26, r16
    3bae:	c7 01       	movw	r24, r14
    3bb0:	89 87       	std	Y+9, r24	; 0x09
    3bb2:	9a 87       	std	Y+10, r25	; 0x0a
    3bb4:	ab 87       	std	Y+11, r26	; 0x0b
    3bb6:	bc 87       	std	Y+12, r27	; 0x0c
	s32 s32Local_InputCalculation = InputValue - InputMin;
    3bb8:	29 a9       	ldd	r18, Y+49	; 0x31
    3bba:	3a a9       	ldd	r19, Y+50	; 0x32
    3bbc:	4b a9       	ldd	r20, Y+51	; 0x33
    3bbe:	5c a9       	ldd	r21, Y+52	; 0x34
    3bc0:	89 89       	ldd	r24, Y+17	; 0x11
    3bc2:	9a 89       	ldd	r25, Y+18	; 0x12
    3bc4:	ab 89       	ldd	r26, Y+19	; 0x13
    3bc6:	bc 89       	ldd	r27, Y+20	; 0x14
    3bc8:	79 01       	movw	r14, r18
    3bca:	8a 01       	movw	r16, r20
    3bcc:	e8 1a       	sub	r14, r24
    3bce:	f9 0a       	sbc	r15, r25
    3bd0:	0a 0b       	sbc	r16, r26
    3bd2:	1b 0b       	sbc	r17, r27
    3bd4:	d8 01       	movw	r26, r16
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	8d 83       	std	Y+5, r24	; 0x05
    3bda:	9e 83       	std	Y+6, r25	; 0x06
    3bdc:	af 83       	std	Y+7, r26	; 0x07
    3bde:	b8 87       	std	Y+8, r27	; 0x08

	s32 s32Local_Output = (s32) ((s32Local_OutputDiference * s32Local_InputCalculation) / s32Local_InputDiference);
    3be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be4:	af 85       	ldd	r26, Y+15	; 0x0f
    3be6:	b8 89       	ldd	r27, Y+16	; 0x10
    3be8:	2d 81       	ldd	r18, Y+5	; 0x05
    3bea:	3e 81       	ldd	r19, Y+6	; 0x06
    3bec:	4f 81       	ldd	r20, Y+7	; 0x07
    3bee:	58 85       	ldd	r21, Y+8	; 0x08
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	cd 01       	movw	r24, r26
    3bf4:	0e 94 45 22 	call	0x448a	; 0x448a <__mulsi3>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	29 85       	ldd	r18, Y+9	; 0x09
    3bfe:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c00:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c02:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	0e 94 86 22 	call	0x450c	; 0x450c <__divmodsi4>
    3c0c:	da 01       	movw	r26, r20
    3c0e:	c9 01       	movw	r24, r18
    3c10:	89 83       	std	Y+1, r24	; 0x01
    3c12:	9a 83       	std	Y+2, r25	; 0x02
    3c14:	ab 83       	std	Y+3, r26	; 0x03
    3c16:	bc 83       	std	Y+4, r27	; 0x04
	s32Local_Output += OutputMin;
    3c18:	29 81       	ldd	r18, Y+1	; 0x01
    3c1a:	3a 81       	ldd	r19, Y+2	; 0x02
    3c1c:	4b 81       	ldd	r20, Y+3	; 0x03
    3c1e:	5c 81       	ldd	r21, Y+4	; 0x04
    3c20:	89 8d       	ldd	r24, Y+25	; 0x19
    3c22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3c24:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3c26:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3c28:	82 0f       	add	r24, r18
    3c2a:	93 1f       	adc	r25, r19
    3c2c:	a4 1f       	adc	r26, r20
    3c2e:	b5 1f       	adc	r27, r21
    3c30:	89 83       	std	Y+1, r24	; 0x01
    3c32:	9a 83       	std	Y+2, r25	; 0x02
    3c34:	ab 83       	std	Y+3, r26	; 0x03
    3c36:	bc 83       	std	Y+4, r27	; 0x04

	if(s32Local_Output <= OutputMin)
    3c38:	29 81       	ldd	r18, Y+1	; 0x01
    3c3a:	3a 81       	ldd	r19, Y+2	; 0x02
    3c3c:	4b 81       	ldd	r20, Y+3	; 0x03
    3c3e:	5c 81       	ldd	r21, Y+4	; 0x04
    3c40:	89 8d       	ldd	r24, Y+25	; 0x19
    3c42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3c44:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3c46:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3c48:	82 17       	cp	r24, r18
    3c4a:	93 07       	cpc	r25, r19
    3c4c:	a4 07       	cpc	r26, r20
    3c4e:	b5 07       	cpc	r27, r21
    3c50:	4c f0       	brlt	.+18     	; 0x3c64 <s32Map+0x140>
		return OutputMin;
    3c52:	89 8d       	ldd	r24, Y+25	; 0x19
    3c54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3c56:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3c58:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3c5a:	89 a3       	std	Y+33, r24	; 0x21
    3c5c:	9a a3       	std	Y+34, r25	; 0x22
    3c5e:	ab a3       	std	Y+35, r26	; 0x23
    3c60:	bc a3       	std	Y+36, r27	; 0x24
    3c62:	1e c0       	rjmp	.+60     	; 0x3ca0 <s32Map+0x17c>
	else if(s32Local_Output >= OutputMax)
    3c64:	29 81       	ldd	r18, Y+1	; 0x01
    3c66:	3a 81       	ldd	r19, Y+2	; 0x02
    3c68:	4b 81       	ldd	r20, Y+3	; 0x03
    3c6a:	5c 81       	ldd	r21, Y+4	; 0x04
    3c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c70:	af 8d       	ldd	r26, Y+31	; 0x1f
    3c72:	b8 a1       	ldd	r27, Y+32	; 0x20
    3c74:	28 17       	cp	r18, r24
    3c76:	39 07       	cpc	r19, r25
    3c78:	4a 07       	cpc	r20, r26
    3c7a:	5b 07       	cpc	r21, r27
    3c7c:	4c f0       	brlt	.+18     	; 0x3c90 <s32Map+0x16c>
		return OutputMax;
    3c7e:	ed 8c       	ldd	r14, Y+29	; 0x1d
    3c80:	fe 8c       	ldd	r15, Y+30	; 0x1e
    3c82:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3c84:	18 a1       	ldd	r17, Y+32	; 0x20
    3c86:	e9 a2       	std	Y+33, r14	; 0x21
    3c88:	fa a2       	std	Y+34, r15	; 0x22
    3c8a:	0b a3       	std	Y+35, r16	; 0x23
    3c8c:	1c a3       	std	Y+36, r17	; 0x24
    3c8e:	08 c0       	rjmp	.+16     	; 0x3ca0 <s32Map+0x17c>
	else
		return s32Local_Output;
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	9a 81       	ldd	r25, Y+2	; 0x02
    3c94:	ab 81       	ldd	r26, Y+3	; 0x03
    3c96:	bc 81       	ldd	r27, Y+4	; 0x04
    3c98:	89 a3       	std	Y+33, r24	; 0x21
    3c9a:	9a a3       	std	Y+34, r25	; 0x22
    3c9c:	ab a3       	std	Y+35, r26	; 0x23
    3c9e:	bc a3       	std	Y+36, r27	; 0x24
    3ca0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ca2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ca4:	ab a1       	ldd	r26, Y+35	; 0x23
    3ca6:	bc a1       	ldd	r27, Y+36	; 0x24

}
    3ca8:	bc 01       	movw	r22, r24
    3caa:	cd 01       	movw	r24, r26
    3cac:	a4 96       	adiw	r28, 0x24	; 36
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	f8 94       	cli
    3cb2:	de bf       	out	0x3e, r29	; 62
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	cd bf       	out	0x3d, r28	; 61
    3cb8:	cf 91       	pop	r28
    3cba:	df 91       	pop	r29
    3cbc:	1f 91       	pop	r17
    3cbe:	0f 91       	pop	r16
    3cc0:	ff 90       	pop	r15
    3cc2:	ef 90       	pop	r14
    3cc4:	df 90       	pop	r13
    3cc6:	cf 90       	pop	r12
    3cc8:	bf 90       	pop	r11
    3cca:	af 90       	pop	r10
    3ccc:	08 95       	ret

00003cce <ConvertToString>:


void ConvertToString(char* Copy_String, s32 s32Copy_Number)
{
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	67 97       	sbiw	r28, 0x17	; 23
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	9b 8b       	std	Y+19, r25	; 0x13
    3ce4:	8a 8b       	std	Y+18, r24	; 0x12
    3ce6:	4c 8b       	std	Y+20, r20	; 0x14
    3ce8:	5d 8b       	std	Y+21, r21	; 0x15
    3cea:	6e 8b       	std	Y+22, r22	; 0x16
    3cec:	7f 8b       	std	Y+23, r23	; 0x17
	s32 s32Local_Temp1 = 0, s32Local_Length = 0, s32Local_Remainder = 0, s32Local_Temp2 = 0;
    3cee:	1e 86       	std	Y+14, r1	; 0x0e
    3cf0:	1f 86       	std	Y+15, r1	; 0x0f
    3cf2:	18 8a       	std	Y+16, r1	; 0x10
    3cf4:	19 8a       	std	Y+17, r1	; 0x11
    3cf6:	1a 86       	std	Y+10, r1	; 0x0a
    3cf8:	1b 86       	std	Y+11, r1	; 0x0b
    3cfa:	1c 86       	std	Y+12, r1	; 0x0c
    3cfc:	1d 86       	std	Y+13, r1	; 0x0d
    3cfe:	1e 82       	std	Y+6, r1	; 0x06
    3d00:	1f 82       	std	Y+7, r1	; 0x07
    3d02:	18 86       	std	Y+8, r1	; 0x08
    3d04:	19 86       	std	Y+9, r1	; 0x09
    3d06:	1a 82       	std	Y+2, r1	; 0x02
    3d08:	1b 82       	std	Y+3, r1	; 0x03
    3d0a:	1c 82       	std	Y+4, r1	; 0x04
    3d0c:	1d 82       	std	Y+5, r1	; 0x05

	if(s32Copy_Number == 0)
    3d0e:	8c 89       	ldd	r24, Y+20	; 0x14
    3d10:	9d 89       	ldd	r25, Y+21	; 0x15
    3d12:	ae 89       	ldd	r26, Y+22	; 0x16
    3d14:	bf 89       	ldd	r27, Y+23	; 0x17
    3d16:	00 97       	sbiw	r24, 0x00	; 0
    3d18:	a1 05       	cpc	r26, r1
    3d1a:	b1 05       	cpc	r27, r1
    3d1c:	c1 f4       	brne	.+48     	; 0x3d4e <ConvertToString+0x80>
	{
		Copy_String[0] = '0';
    3d1e:	ea 89       	ldd	r30, Y+18	; 0x12
    3d20:	fb 89       	ldd	r31, Y+19	; 0x13
    3d22:	80 e3       	ldi	r24, 0x30	; 48
    3d24:	80 83       	st	Z, r24
		s32Local_Length++;
    3d26:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d28:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d2a:	ac 85       	ldd	r26, Y+12	; 0x0c
    3d2c:	bd 85       	ldd	r27, Y+13	; 0x0d
    3d2e:	01 96       	adiw	r24, 0x01	; 1
    3d30:	a1 1d       	adc	r26, r1
    3d32:	b1 1d       	adc	r27, r1
    3d34:	8a 87       	std	Y+10, r24	; 0x0a
    3d36:	9b 87       	std	Y+11, r25	; 0x0b
    3d38:	ac 87       	std	Y+12, r26	; 0x0c
    3d3a:	bd 87       	std	Y+13, r27	; 0x0d
		Copy_String[s32Local_Length] = '\0';
    3d3c:	2a 85       	ldd	r18, Y+10	; 0x0a
    3d3e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3d40:	8a 89       	ldd	r24, Y+18	; 0x12
    3d42:	9b 89       	ldd	r25, Y+19	; 0x13
    3d44:	fc 01       	movw	r30, r24
    3d46:	e2 0f       	add	r30, r18
    3d48:	f3 1f       	adc	r31, r19
    3d4a:	10 82       	st	Z, r1
    3d4c:	b2 c0       	rjmp	.+356    	; 0x3eb2 <ConvertToString+0x1e4>
	}
	else
	{
		s32Local_Temp2 = s32Copy_Number;
    3d4e:	8c 89       	ldd	r24, Y+20	; 0x14
    3d50:	9d 89       	ldd	r25, Y+21	; 0x15
    3d52:	ae 89       	ldd	r26, Y+22	; 0x16
    3d54:	bf 89       	ldd	r27, Y+23	; 0x17
    3d56:	8a 83       	std	Y+2, r24	; 0x02
    3d58:	9b 83       	std	Y+3, r25	; 0x03
    3d5a:	ac 83       	std	Y+4, r26	; 0x04
    3d5c:	bd 83       	std	Y+5, r27	; 0x05
		if(s32Local_Temp2<0)
    3d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d60:	9b 81       	ldd	r25, Y+3	; 0x03
    3d62:	ac 81       	ldd	r26, Y+4	; 0x04
    3d64:	bd 81       	ldd	r27, Y+5	; 0x05
    3d66:	bb 23       	and	r27, r27
    3d68:	d4 f4       	brge	.+52     	; 0x3d9e <ConvertToString+0xd0>
		{
			s32Local_Length++;
    3d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d6e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3d70:	bd 85       	ldd	r27, Y+13	; 0x0d
    3d72:	01 96       	adiw	r24, 0x01	; 1
    3d74:	a1 1d       	adc	r26, r1
    3d76:	b1 1d       	adc	r27, r1
    3d78:	8a 87       	std	Y+10, r24	; 0x0a
    3d7a:	9b 87       	std	Y+11, r25	; 0x0b
    3d7c:	ac 87       	std	Y+12, r26	; 0x0c
    3d7e:	bd 87       	std	Y+13, r27	; 0x0d
			s32Copy_Number *= -1;
    3d80:	8c 89       	ldd	r24, Y+20	; 0x14
    3d82:	9d 89       	ldd	r25, Y+21	; 0x15
    3d84:	ae 89       	ldd	r26, Y+22	; 0x16
    3d86:	bf 89       	ldd	r27, Y+23	; 0x17
    3d88:	b0 95       	com	r27
    3d8a:	a0 95       	com	r26
    3d8c:	90 95       	com	r25
    3d8e:	81 95       	neg	r24
    3d90:	9f 4f       	sbci	r25, 0xFF	; 255
    3d92:	af 4f       	sbci	r26, 0xFF	; 255
    3d94:	bf 4f       	sbci	r27, 0xFF	; 255
    3d96:	8c 8b       	std	Y+20, r24	; 0x14
    3d98:	9d 8b       	std	Y+21, r25	; 0x15
    3d9a:	ae 8b       	std	Y+22, r26	; 0x16
    3d9c:	bf 8b       	std	Y+23, r27	; 0x17
		}

		s32Local_Temp1 = s32Copy_Number;
    3d9e:	8c 89       	ldd	r24, Y+20	; 0x14
    3da0:	9d 89       	ldd	r25, Y+21	; 0x15
    3da2:	ae 89       	ldd	r26, Y+22	; 0x16
    3da4:	bf 89       	ldd	r27, Y+23	; 0x17
    3da6:	8e 87       	std	Y+14, r24	; 0x0e
    3da8:	9f 87       	std	Y+15, r25	; 0x0f
    3daa:	a8 8b       	std	Y+16, r26	; 0x10
    3dac:	b9 8b       	std	Y+17, r27	; 0x11
    3dae:	1d c0       	rjmp	.+58     	; 0x3dea <ConvertToString+0x11c>
		while(s32Local_Temp1 > 0)
		{
			s32Local_Temp1 /= 10;
    3db0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3db2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3db4:	a8 89       	ldd	r26, Y+16	; 0x10
    3db6:	b9 89       	ldd	r27, Y+17	; 0x11
    3db8:	2a e0       	ldi	r18, 0x0A	; 10
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	50 e0       	ldi	r21, 0x00	; 0
    3dc0:	bc 01       	movw	r22, r24
    3dc2:	cd 01       	movw	r24, r26
    3dc4:	0e 94 86 22 	call	0x450c	; 0x450c <__divmodsi4>
    3dc8:	da 01       	movw	r26, r20
    3dca:	c9 01       	movw	r24, r18
    3dcc:	8e 87       	std	Y+14, r24	; 0x0e
    3dce:	9f 87       	std	Y+15, r25	; 0x0f
    3dd0:	a8 8b       	std	Y+16, r26	; 0x10
    3dd2:	b9 8b       	std	Y+17, r27	; 0x11
			s32Local_Length++;
    3dd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dd8:	ac 85       	ldd	r26, Y+12	; 0x0c
    3dda:	bd 85       	ldd	r27, Y+13	; 0x0d
    3ddc:	01 96       	adiw	r24, 0x01	; 1
    3dde:	a1 1d       	adc	r26, r1
    3de0:	b1 1d       	adc	r27, r1
    3de2:	8a 87       	std	Y+10, r24	; 0x0a
    3de4:	9b 87       	std	Y+11, r25	; 0x0b
    3de6:	ac 87       	std	Y+12, r26	; 0x0c
    3de8:	bd 87       	std	Y+13, r27	; 0x0d
			s32Local_Length++;
			s32Copy_Number *= -1;
		}

		s32Local_Temp1 = s32Copy_Number;
		while(s32Local_Temp1 > 0)
    3dea:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dec:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dee:	a8 89       	ldd	r26, Y+16	; 0x10
    3df0:	b9 89       	ldd	r27, Y+17	; 0x11
    3df2:	18 16       	cp	r1, r24
    3df4:	19 06       	cpc	r1, r25
    3df6:	1a 06       	cpc	r1, r26
    3df8:	1b 06       	cpc	r1, r27
    3dfa:	d4 f2       	brlt	.-76     	; 0x3db0 <ConvertToString+0xe2>
		{
			s32Local_Temp1 /= 10;
			s32Local_Length++;
		}

		for(u8 i = 0; i<s32Local_Length; i++)
    3dfc:	19 82       	std	Y+1, r1	; 0x01
    3dfe:	38 c0       	rjmp	.+112    	; 0x3e70 <ConvertToString+0x1a2>
		{
			s32Local_Remainder = s32Copy_Number % 10;
    3e00:	8c 89       	ldd	r24, Y+20	; 0x14
    3e02:	9d 89       	ldd	r25, Y+21	; 0x15
    3e04:	ae 89       	ldd	r26, Y+22	; 0x16
    3e06:	bf 89       	ldd	r27, Y+23	; 0x17
    3e08:	2a e0       	ldi	r18, 0x0A	; 10
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e0       	ldi	r20, 0x00	; 0
    3e0e:	50 e0       	ldi	r21, 0x00	; 0
    3e10:	bc 01       	movw	r22, r24
    3e12:	cd 01       	movw	r24, r26
    3e14:	0e 94 86 22 	call	0x450c	; 0x450c <__divmodsi4>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	8e 83       	std	Y+6, r24	; 0x06
    3e1e:	9f 83       	std	Y+7, r25	; 0x07
    3e20:	a8 87       	std	Y+8, r26	; 0x08
    3e22:	b9 87       	std	Y+9, r27	; 0x09
			s32Copy_Number = s32Copy_Number / 10;
    3e24:	8c 89       	ldd	r24, Y+20	; 0x14
    3e26:	9d 89       	ldd	r25, Y+21	; 0x15
    3e28:	ae 89       	ldd	r26, Y+22	; 0x16
    3e2a:	bf 89       	ldd	r27, Y+23	; 0x17
    3e2c:	2a e0       	ldi	r18, 0x0A	; 10
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e0       	ldi	r20, 0x00	; 0
    3e32:	50 e0       	ldi	r21, 0x00	; 0
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	0e 94 86 22 	call	0x450c	; 0x450c <__divmodsi4>
    3e3c:	da 01       	movw	r26, r20
    3e3e:	c9 01       	movw	r24, r18
    3e40:	8c 8b       	std	Y+20, r24	; 0x14
    3e42:	9d 8b       	std	Y+21, r25	; 0x15
    3e44:	ae 8b       	std	Y+22, r26	; 0x16
    3e46:	bf 8b       	std	Y+23, r27	; 0x17
			Copy_String[s32Local_Length - (i+1)] = s32Local_Remainder + '0';
    3e48:	2a 85       	ldd	r18, Y+10	; 0x0a
    3e4a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3e4c:	89 81       	ldd	r24, Y+1	; 0x01
    3e4e:	88 2f       	mov	r24, r24
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	80 95       	com	r24
    3e54:	90 95       	com	r25
    3e56:	28 0f       	add	r18, r24
    3e58:	39 1f       	adc	r19, r25
    3e5a:	8a 89       	ldd	r24, Y+18	; 0x12
    3e5c:	9b 89       	ldd	r25, Y+19	; 0x13
    3e5e:	fc 01       	movw	r30, r24
    3e60:	e2 0f       	add	r30, r18
    3e62:	f3 1f       	adc	r31, r19
    3e64:	8e 81       	ldd	r24, Y+6	; 0x06
    3e66:	80 5d       	subi	r24, 0xD0	; 208
    3e68:	80 83       	st	Z, r24
		{
			s32Local_Temp1 /= 10;
			s32Local_Length++;
		}

		for(u8 i = 0; i<s32Local_Length; i++)
    3e6a:	89 81       	ldd	r24, Y+1	; 0x01
    3e6c:	8f 5f       	subi	r24, 0xFF	; 255
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	28 2f       	mov	r18, r24
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	40 e0       	ldi	r20, 0x00	; 0
    3e78:	50 e0       	ldi	r21, 0x00	; 0
    3e7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e7e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3e80:	bd 85       	ldd	r27, Y+13	; 0x0d
    3e82:	28 17       	cp	r18, r24
    3e84:	39 07       	cpc	r19, r25
    3e86:	4a 07       	cpc	r20, r26
    3e88:	5b 07       	cpc	r21, r27
    3e8a:	0c f4       	brge	.+2      	; 0x3e8e <ConvertToString+0x1c0>
    3e8c:	b9 cf       	rjmp	.-142    	; 0x3e00 <ConvertToString+0x132>
			s32Local_Remainder = s32Copy_Number % 10;
			s32Copy_Number = s32Copy_Number / 10;
			Copy_String[s32Local_Length - (i+1)] = s32Local_Remainder + '0';
		}

		if(s32Local_Temp2 < 0)
    3e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e90:	9b 81       	ldd	r25, Y+3	; 0x03
    3e92:	ac 81       	ldd	r26, Y+4	; 0x04
    3e94:	bd 81       	ldd	r27, Y+5	; 0x05
    3e96:	bb 23       	and	r27, r27
    3e98:	24 f4       	brge	.+8      	; 0x3ea2 <ConvertToString+0x1d4>
			Copy_String[0] = '-';
    3e9a:	ea 89       	ldd	r30, Y+18	; 0x12
    3e9c:	fb 89       	ldd	r31, Y+19	; 0x13
    3e9e:	8d e2       	ldi	r24, 0x2D	; 45
    3ea0:	80 83       	st	Z, r24

		Copy_String[s32Local_Length] = '\0';
    3ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ea4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ea6:	2a 89       	ldd	r18, Y+18	; 0x12
    3ea8:	3b 89       	ldd	r19, Y+19	; 0x13
    3eaa:	f9 01       	movw	r30, r18
    3eac:	e8 0f       	add	r30, r24
    3eae:	f9 1f       	adc	r31, r25
    3eb0:	10 82       	st	Z, r1
	}
}
    3eb2:	67 96       	adiw	r28, 0x17	; 23
    3eb4:	0f b6       	in	r0, 0x3f	; 63
    3eb6:	f8 94       	cli
    3eb8:	de bf       	out	0x3e, r29	; 62
    3eba:	0f be       	out	0x3f, r0	; 63
    3ebc:	cd bf       	out	0x3d, r28	; 61
    3ebe:	cf 91       	pop	r28
    3ec0:	df 91       	pop	r29
    3ec2:	08 95       	ret

00003ec4 <ConvertToint>:
s32 ConvertToint(const char* Copy_String)
{
    3ec4:	df 93       	push	r29
    3ec6:	cf 93       	push	r28
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
    3ecc:	28 97       	sbiw	r28, 0x08	; 8
    3ece:	0f b6       	in	r0, 0x3f	; 63
    3ed0:	f8 94       	cli
    3ed2:	de bf       	out	0x3e, r29	; 62
    3ed4:	0f be       	out	0x3f, r0	; 63
    3ed6:	cd bf       	out	0x3d, r28	; 61
    3ed8:	98 87       	std	Y+8, r25	; 0x08
    3eda:	8f 83       	std	Y+7, r24	; 0x07
	s32 s32Local_Number = 0;
    3edc:	1b 82       	std	Y+3, r1	; 0x03
    3ede:	1c 82       	std	Y+4, r1	; 0x04
    3ee0:	1d 82       	std	Y+5, r1	; 0x05
    3ee2:	1e 82       	std	Y+6, r1	; 0x06
	s8 u8Local_sign = 1, u8Local_Iterator = 0;
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	8a 83       	std	Y+2, r24	; 0x02
    3ee8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_String[0] == '-')
    3eea:	ef 81       	ldd	r30, Y+7	; 0x07
    3eec:	f8 85       	ldd	r31, Y+8	; 0x08
    3eee:	80 81       	ld	r24, Z
    3ef0:	8d 32       	cpi	r24, 0x2D	; 45
    3ef2:	09 f0       	breq	.+2      	; 0x3ef6 <ConvertToint+0x32>
    3ef4:	52 c0       	rjmp	.+164    	; 0x3f9a <ConvertToint+0xd6>
	{
		u8Local_sign = -1;
    3ef6:	8f ef       	ldi	r24, 0xFF	; 255
    3ef8:	8a 83       	std	Y+2, r24	; 0x02
		u8Local_Iterator = 1;
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	89 83       	std	Y+1, r24	; 0x01
    3efe:	4d c0       	rjmp	.+154    	; 0x3f9a <ConvertToint+0xd6>
	}

	while(Copy_String[u8Local_Iterator] != '\0')
	{
		if((Copy_String[u8Local_Iterator] - '0' < 0) || (Copy_String[u8Local_Iterator] - '0' > 9))
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	28 2f       	mov	r18, r24
    3f04:	33 27       	eor	r19, r19
    3f06:	27 fd       	sbrc	r18, 7
    3f08:	30 95       	com	r19
    3f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f0c:	98 85       	ldd	r25, Y+8	; 0x08
    3f0e:	fc 01       	movw	r30, r24
    3f10:	e2 0f       	add	r30, r18
    3f12:	f3 1f       	adc	r31, r19
    3f14:	80 81       	ld	r24, Z
    3f16:	88 2f       	mov	r24, r24
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	c0 97       	sbiw	r24, 0x30	; 48
    3f1c:	99 23       	and	r25, r25
    3f1e:	0c f4       	brge	.+2      	; 0x3f22 <ConvertToint+0x5e>
    3f20:	4a c0       	rjmp	.+148    	; 0x3fb6 <ConvertToint+0xf2>
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	28 2f       	mov	r18, r24
    3f26:	33 27       	eor	r19, r19
    3f28:	27 fd       	sbrc	r18, 7
    3f2a:	30 95       	com	r19
    3f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f2e:	98 85       	ldd	r25, Y+8	; 0x08
    3f30:	fc 01       	movw	r30, r24
    3f32:	e2 0f       	add	r30, r18
    3f34:	f3 1f       	adc	r31, r19
    3f36:	80 81       	ld	r24, Z
    3f38:	88 2f       	mov	r24, r24
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	c0 97       	sbiw	r24, 0x30	; 48
    3f3e:	8a 30       	cpi	r24, 0x0A	; 10
    3f40:	91 05       	cpc	r25, r1
    3f42:	cc f5       	brge	.+114    	; 0x3fb6 <ConvertToint+0xf2>
			break;
		s32Local_Number = (s32Local_Number*10) + (Copy_String[u8Local_Iterator] - '0');
    3f44:	8b 81       	ldd	r24, Y+3	; 0x03
    3f46:	9c 81       	ldd	r25, Y+4	; 0x04
    3f48:	ad 81       	ldd	r26, Y+5	; 0x05
    3f4a:	be 81       	ldd	r27, Y+6	; 0x06
    3f4c:	2a e0       	ldi	r18, 0x0A	; 10
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	40 e0       	ldi	r20, 0x00	; 0
    3f52:	50 e0       	ldi	r21, 0x00	; 0
    3f54:	bc 01       	movw	r22, r24
    3f56:	cd 01       	movw	r24, r26
    3f58:	0e 94 45 22 	call	0x448a	; 0x448a <__mulsi3>
    3f5c:	ab 01       	movw	r20, r22
    3f5e:	bc 01       	movw	r22, r24
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	28 2f       	mov	r18, r24
    3f64:	33 27       	eor	r19, r19
    3f66:	27 fd       	sbrc	r18, 7
    3f68:	30 95       	com	r19
    3f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f6c:	98 85       	ldd	r25, Y+8	; 0x08
    3f6e:	fc 01       	movw	r30, r24
    3f70:	e2 0f       	add	r30, r18
    3f72:	f3 1f       	adc	r31, r19
    3f74:	80 81       	ld	r24, Z
    3f76:	88 2f       	mov	r24, r24
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	c0 97       	sbiw	r24, 0x30	; 48
    3f7c:	aa 27       	eor	r26, r26
    3f7e:	97 fd       	sbrc	r25, 7
    3f80:	a0 95       	com	r26
    3f82:	ba 2f       	mov	r27, r26
    3f84:	84 0f       	add	r24, r20
    3f86:	95 1f       	adc	r25, r21
    3f88:	a6 1f       	adc	r26, r22
    3f8a:	b7 1f       	adc	r27, r23
    3f8c:	8b 83       	std	Y+3, r24	; 0x03
    3f8e:	9c 83       	std	Y+4, r25	; 0x04
    3f90:	ad 83       	std	Y+5, r26	; 0x05
    3f92:	be 83       	std	Y+6, r27	; 0x06
		u8Local_Iterator++;
    3f94:	89 81       	ldd	r24, Y+1	; 0x01
    3f96:	8f 5f       	subi	r24, 0xFF	; 255
    3f98:	89 83       	std	Y+1, r24	; 0x01
	{
		u8Local_sign = -1;
		u8Local_Iterator = 1;
	}

	while(Copy_String[u8Local_Iterator] != '\0')
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	28 2f       	mov	r18, r24
    3f9e:	33 27       	eor	r19, r19
    3fa0:	27 fd       	sbrc	r18, 7
    3fa2:	30 95       	com	r19
    3fa4:	8f 81       	ldd	r24, Y+7	; 0x07
    3fa6:	98 85       	ldd	r25, Y+8	; 0x08
    3fa8:	fc 01       	movw	r30, r24
    3faa:	e2 0f       	add	r30, r18
    3fac:	f3 1f       	adc	r31, r19
    3fae:	80 81       	ld	r24, Z
    3fb0:	88 23       	and	r24, r24
    3fb2:	09 f0       	breq	.+2      	; 0x3fb6 <ConvertToint+0xf2>
    3fb4:	a5 cf       	rjmp	.-182    	; 0x3f00 <ConvertToint+0x3c>
			break;
		s32Local_Number = (s32Local_Number*10) + (Copy_String[u8Local_Iterator] - '0');
		u8Local_Iterator++;
	}

	s32Local_Number *= u8Local_sign;
    3fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb8:	28 2f       	mov	r18, r24
    3fba:	33 27       	eor	r19, r19
    3fbc:	27 fd       	sbrc	r18, 7
    3fbe:	30 95       	com	r19
    3fc0:	43 2f       	mov	r20, r19
    3fc2:	53 2f       	mov	r21, r19
    3fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc8:	ad 81       	ldd	r26, Y+5	; 0x05
    3fca:	be 81       	ldd	r27, Y+6	; 0x06
    3fcc:	bc 01       	movw	r22, r24
    3fce:	cd 01       	movw	r24, r26
    3fd0:	0e 94 45 22 	call	0x448a	; 0x448a <__mulsi3>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	8b 83       	std	Y+3, r24	; 0x03
    3fda:	9c 83       	std	Y+4, r25	; 0x04
    3fdc:	ad 83       	std	Y+5, r26	; 0x05
    3fde:	be 83       	std	Y+6, r27	; 0x06
	return s32Local_Number;
    3fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe4:	ad 81       	ldd	r26, Y+5	; 0x05
    3fe6:	be 81       	ldd	r27, Y+6	; 0x06
}
    3fe8:	bc 01       	movw	r22, r24
    3fea:	cd 01       	movw	r24, r26
    3fec:	28 96       	adiw	r28, 0x08	; 8
    3fee:	0f b6       	in	r0, 0x3f	; 63
    3ff0:	f8 94       	cli
    3ff2:	de bf       	out	0x3e, r29	; 62
    3ff4:	0f be       	out	0x3f, r0	; 63
    3ff6:	cd bf       	out	0x3d, r28	; 61
    3ff8:	cf 91       	pop	r28
    3ffa:	df 91       	pop	r29
    3ffc:	08 95       	ret

00003ffe <StringCompare>:

u8 StringCompare(const char* pu8Copy_String1, const char* pu8Copy_String2)
{
    3ffe:	df 93       	push	r29
    4000:	cf 93       	push	r28
    4002:	00 d0       	rcall	.+0      	; 0x4004 <StringCompare+0x6>
    4004:	00 d0       	rcall	.+0      	; 0x4006 <StringCompare+0x8>
    4006:	0f 92       	push	r0
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
    400c:	9b 83       	std	Y+3, r25	; 0x03
    400e:	8a 83       	std	Y+2, r24	; 0x02
    4010:	7d 83       	std	Y+5, r23	; 0x05
    4012:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8Local_Flag = 0;
    4014:	19 82       	std	Y+1, r1	; 0x01

	if(*pu8Copy_String1 != '\0' && *pu8Copy_String2 != '\0')
    4016:	ea 81       	ldd	r30, Y+2	; 0x02
    4018:	fb 81       	ldd	r31, Y+3	; 0x03
    401a:	80 81       	ld	r24, Z
    401c:	88 23       	and	r24, r24
    401e:	09 f4       	brne	.+2      	; 0x4022 <StringCompare+0x24>
    4020:	44 c0       	rjmp	.+136    	; 0x40aa <StringCompare+0xac>
    4022:	ec 81       	ldd	r30, Y+4	; 0x04
    4024:	fd 81       	ldd	r31, Y+5	; 0x05
    4026:	80 81       	ld	r24, Z
    4028:	88 23       	and	r24, r24
    402a:	09 f4       	brne	.+2      	; 0x402e <StringCompare+0x30>
    402c:	3e c0       	rjmp	.+124    	; 0x40aa <StringCompare+0xac>
    402e:	32 c0       	rjmp	.+100    	; 0x4094 <StringCompare+0x96>
	{
		while(*pu8Copy_String1 != '\0' || *pu8Copy_String2 != '\0')
		{
			if(*pu8Copy_String1 == *pu8Copy_String2)
    4030:	ea 81       	ldd	r30, Y+2	; 0x02
    4032:	fb 81       	ldd	r31, Y+3	; 0x03
    4034:	90 81       	ld	r25, Z
    4036:	ec 81       	ldd	r30, Y+4	; 0x04
    4038:	fd 81       	ldd	r31, Y+5	; 0x05
    403a:	80 81       	ld	r24, Z
    403c:	98 17       	cp	r25, r24
    403e:	59 f4       	brne	.+22     	; 0x4056 <StringCompare+0x58>
			{
				pu8Copy_String1++;
    4040:	8a 81       	ldd	r24, Y+2	; 0x02
    4042:	9b 81       	ldd	r25, Y+3	; 0x03
    4044:	01 96       	adiw	r24, 0x01	; 1
    4046:	9b 83       	std	Y+3, r25	; 0x03
    4048:	8a 83       	std	Y+2, r24	; 0x02
				pu8Copy_String2++;
    404a:	8c 81       	ldd	r24, Y+4	; 0x04
    404c:	9d 81       	ldd	r25, Y+5	; 0x05
    404e:	01 96       	adiw	r24, 0x01	; 1
    4050:	9d 83       	std	Y+5, r25	; 0x05
    4052:	8c 83       	std	Y+4, r24	; 0x04
    4054:	1f c0       	rjmp	.+62     	; 0x4094 <StringCompare+0x96>
			}
			else if((*pu8Copy_String1 == '\0' && *pu8Copy_String2 != '\0') || (*pu8Copy_String1 != '\0' && *pu8Copy_String2 == '\0') || (*pu8Copy_String1 != *pu8Copy_String2))
    4056:	ea 81       	ldd	r30, Y+2	; 0x02
    4058:	fb 81       	ldd	r31, Y+3	; 0x03
    405a:	80 81       	ld	r24, Z
    405c:	88 23       	and	r24, r24
    405e:	29 f4       	brne	.+10     	; 0x406a <StringCompare+0x6c>
    4060:	ec 81       	ldd	r30, Y+4	; 0x04
    4062:	fd 81       	ldd	r31, Y+5	; 0x05
    4064:	80 81       	ld	r24, Z
    4066:	88 23       	and	r24, r24
    4068:	91 f4       	brne	.+36     	; 0x408e <StringCompare+0x90>
    406a:	ea 81       	ldd	r30, Y+2	; 0x02
    406c:	fb 81       	ldd	r31, Y+3	; 0x03
    406e:	80 81       	ld	r24, Z
    4070:	88 23       	and	r24, r24
    4072:	29 f0       	breq	.+10     	; 0x407e <StringCompare+0x80>
    4074:	ec 81       	ldd	r30, Y+4	; 0x04
    4076:	fd 81       	ldd	r31, Y+5	; 0x05
    4078:	80 81       	ld	r24, Z
    407a:	88 23       	and	r24, r24
    407c:	41 f0       	breq	.+16     	; 0x408e <StringCompare+0x90>
    407e:	ea 81       	ldd	r30, Y+2	; 0x02
    4080:	fb 81       	ldd	r31, Y+3	; 0x03
    4082:	90 81       	ld	r25, Z
    4084:	ec 81       	ldd	r30, Y+4	; 0x04
    4086:	fd 81       	ldd	r31, Y+5	; 0x05
    4088:	80 81       	ld	r24, Z
    408a:	98 17       	cp	r25, r24
    408c:	19 f0       	breq	.+6      	; 0x4094 <StringCompare+0x96>
			{
				u8Local_Flag=1;
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	89 83       	std	Y+1, r24	; 0x01
    4092:	0d c0       	rjmp	.+26     	; 0x40ae <StringCompare+0xb0>
{
	u8 u8Local_Flag = 0;

	if(*pu8Copy_String1 != '\0' && *pu8Copy_String2 != '\0')
	{
		while(*pu8Copy_String1 != '\0' || *pu8Copy_String2 != '\0')
    4094:	ea 81       	ldd	r30, Y+2	; 0x02
    4096:	fb 81       	ldd	r31, Y+3	; 0x03
    4098:	80 81       	ld	r24, Z
    409a:	88 23       	and	r24, r24
    409c:	49 f6       	brne	.-110    	; 0x4030 <StringCompare+0x32>
    409e:	ec 81       	ldd	r30, Y+4	; 0x04
    40a0:	fd 81       	ldd	r31, Y+5	; 0x05
    40a2:	80 81       	ld	r24, Z
    40a4:	88 23       	and	r24, r24
    40a6:	21 f6       	brne	.-120    	; 0x4030 <StringCompare+0x32>
    40a8:	02 c0       	rjmp	.+4      	; 0x40ae <StringCompare+0xb0>
			}

		}
	}
	else
		u8Local_Flag=1;
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	89 83       	std	Y+1, r24	; 0x01

	return u8Local_Flag;
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	0f 90       	pop	r0
    40ba:	cf 91       	pop	r28
    40bc:	df 91       	pop	r29
    40be:	08 95       	ret

000040c0 <StringLength>:

u8 StringLength(const char* pu8Copy_String)
{
    40c0:	df 93       	push	r29
    40c2:	cf 93       	push	r28
    40c4:	00 d0       	rcall	.+0      	; 0x40c6 <StringLength+0x6>
    40c6:	00 d0       	rcall	.+0      	; 0x40c8 <StringLength+0x8>
    40c8:	cd b7       	in	r28, 0x3d	; 61
    40ca:	de b7       	in	r29, 0x3e	; 62
    40cc:	9c 83       	std	Y+4, r25	; 0x04
    40ce:	8b 83       	std	Y+3, r24	; 0x03
	u16 u16LocalCounter = 0;
    40d0:	1a 82       	std	Y+2, r1	; 0x02
    40d2:	19 82       	std	Y+1, r1	; 0x01
    40d4:	0a c0       	rjmp	.+20     	; 0x40ea <StringLength+0x2a>
	while (*pu8Copy_String != 0 || *pu8Copy_String != '\0')
	{
		u16LocalCounter++;
    40d6:	89 81       	ldd	r24, Y+1	; 0x01
    40d8:	9a 81       	ldd	r25, Y+2	; 0x02
    40da:	01 96       	adiw	r24, 0x01	; 1
    40dc:	9a 83       	std	Y+2, r25	; 0x02
    40de:	89 83       	std	Y+1, r24	; 0x01
		pu8Copy_String++;
    40e0:	8b 81       	ldd	r24, Y+3	; 0x03
    40e2:	9c 81       	ldd	r25, Y+4	; 0x04
    40e4:	01 96       	adiw	r24, 0x01	; 1
    40e6:	9c 83       	std	Y+4, r25	; 0x04
    40e8:	8b 83       	std	Y+3, r24	; 0x03
}

u8 StringLength(const char* pu8Copy_String)
{
	u16 u16LocalCounter = 0;
	while (*pu8Copy_String != 0 || *pu8Copy_String != '\0')
    40ea:	eb 81       	ldd	r30, Y+3	; 0x03
    40ec:	fc 81       	ldd	r31, Y+4	; 0x04
    40ee:	80 81       	ld	r24, Z
    40f0:	88 23       	and	r24, r24
    40f2:	89 f7       	brne	.-30     	; 0x40d6 <StringLength+0x16>
    40f4:	eb 81       	ldd	r30, Y+3	; 0x03
    40f6:	fc 81       	ldd	r31, Y+4	; 0x04
    40f8:	80 81       	ld	r24, Z
    40fa:	88 23       	and	r24, r24
    40fc:	61 f7       	brne	.-40     	; 0x40d6 <StringLength+0x16>
	{
		u16LocalCounter++;
		pu8Copy_String++;
	}

	return u16LocalCounter;
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    4100:	0f 90       	pop	r0
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	cf 91       	pop	r28
    410a:	df 91       	pop	r29
    410c:	08 95       	ret

0000410e <StringReset>:

void StringReset(char* pu8Copy_String, u8 copy_u8Length)
{
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	00 d0       	rcall	.+0      	; 0x4114 <StringReset+0x6>
    4114:	00 d0       	rcall	.+0      	; 0x4116 <StringReset+0x8>
    4116:	cd b7       	in	r28, 0x3d	; 61
    4118:	de b7       	in	r29, 0x3e	; 62
    411a:	9b 83       	std	Y+3, r25	; 0x03
    411c:	8a 83       	std	Y+2, r24	; 0x02
    411e:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8LocalCounter = 0;
    4120:	19 82       	std	Y+1, r1	; 0x01
    4122:	0c c0       	rjmp	.+24     	; 0x413c <StringReset+0x2e>
	while(u8LocalCounter < copy_u8Length)
	{
		*(pu8Copy_String + u8LocalCounter) = 0;
    4124:	89 81       	ldd	r24, Y+1	; 0x01
    4126:	28 2f       	mov	r18, r24
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	8a 81       	ldd	r24, Y+2	; 0x02
    412c:	9b 81       	ldd	r25, Y+3	; 0x03
    412e:	fc 01       	movw	r30, r24
    4130:	e2 0f       	add	r30, r18
    4132:	f3 1f       	adc	r31, r19
    4134:	10 82       	st	Z, r1
		u8LocalCounter++;
    4136:	89 81       	ldd	r24, Y+1	; 0x01
    4138:	8f 5f       	subi	r24, 0xFF	; 255
    413a:	89 83       	std	Y+1, r24	; 0x01
}

void StringReset(char* pu8Copy_String, u8 copy_u8Length)
{
	u8 u8LocalCounter = 0;
	while(u8LocalCounter < copy_u8Length)
    413c:	99 81       	ldd	r25, Y+1	; 0x01
    413e:	8c 81       	ldd	r24, Y+4	; 0x04
    4140:	98 17       	cp	r25, r24
    4142:	80 f3       	brcs	.-32     	; 0x4124 <StringReset+0x16>
	{
		*(pu8Copy_String + u8LocalCounter) = 0;
		u8LocalCounter++;
	}
}
    4144:	0f 90       	pop	r0
    4146:	0f 90       	pop	r0
    4148:	0f 90       	pop	r0
    414a:	0f 90       	pop	r0
    414c:	cf 91       	pop	r28
    414e:	df 91       	pop	r29
    4150:	08 95       	ret

00004152 <main>:

#define NOT_PRESSED			0x00


void main()
{
    4152:	0f 93       	push	r16
    4154:	1f 93       	push	r17
    4156:	df 93       	push	r29
    4158:	cf 93       	push	r28
    415a:	cd b7       	in	r28, 0x3d	; 61
    415c:	de b7       	in	r29, 0x3e	; 62
    415e:	a8 97       	sbiw	r28, 0x28	; 40
    4160:	0f b6       	in	r0, 0x3f	; 63
    4162:	f8 94       	cli
    4164:	de bf       	out	0x3e, r29	; 62
    4166:	0f be       	out	0x3f, r0	; 63
    4168:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Trials = 0, Local_u8Iterator = 0;
    416a:	18 8a       	std	Y+16, r1	; 0x10
    416c:	1f 86       	std	Y+15, r1	; 0x0f
	u8 Local_u8Pass[4] = "123", Local_u8Password[20] = {NOT_PRESSED};
    416e:	80 91 f0 00 	lds	r24, 0x00F0
    4172:	90 91 f1 00 	lds	r25, 0x00F1
    4176:	a0 91 f2 00 	lds	r26, 0x00F2
    417a:	b0 91 f3 00 	lds	r27, 0x00F3
    417e:	89 8b       	std	Y+17, r24	; 0x11
    4180:	9a 8b       	std	Y+18, r25	; 0x12
    4182:	ab 8b       	std	Y+19, r26	; 0x13
    4184:	bc 8b       	std	Y+20, r27	; 0x14
    4186:	84 e1       	ldi	r24, 0x14	; 20
    4188:	fe 01       	movw	r30, r28
    418a:	75 96       	adiw	r30, 0x15	; 21
    418c:	df 01       	movw	r26, r30
    418e:	98 2f       	mov	r25, r24
    4190:	1d 92       	st	X+, r1
    4192:	9a 95       	dec	r25
    4194:	e9 f7       	brne	.-6      	; 0x4190 <main+0x3e>

	DIO_voidInit();
    4196:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	LCD_voidInit();
    419a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <LCD_voidInit>


	LCD_u8GoToRowCol(LCD_ROW0, LCD_COL2);
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	62 e0       	ldi	r22, 0x02	; 2
    41a2:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
	LCD_u8SendString("Welcome to Smart");
    41a6:	80 e6       	ldi	r24, 0x60	; 96
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
	LCD_u8GoToRowCol(LCD_ROW1, LCD_COL4);
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	64 e0       	ldi	r22, 0x04	; 4
    41b2:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
	LCD_u8SendString("Door System");
    41b6:	81 e7       	ldi	r24, 0x71	; 113
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	aa e7       	ldi	r26, 0x7A	; 122
    41c4:	b4 e4       	ldi	r27, 0x44	; 68
    41c6:	8b 87       	std	Y+11, r24	; 0x0b
    41c8:	9c 87       	std	Y+12, r25	; 0x0c
    41ca:	ad 87       	std	Y+13, r26	; 0x0d
    41cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    41d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	4a e7       	ldi	r20, 0x7A	; 122
    41dc:	55 e4       	ldi	r21, 0x45	; 69
    41de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	8f 83       	std	Y+7, r24	; 0x07
    41e8:	98 87       	std	Y+8, r25	; 0x08
    41ea:	a9 87       	std	Y+9, r26	; 0x09
    41ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41ee:	6f 81       	ldd	r22, Y+7	; 0x07
    41f0:	78 85       	ldd	r23, Y+8	; 0x08
    41f2:	89 85       	ldd	r24, Y+9	; 0x09
    41f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	40 e8       	ldi	r20, 0x80	; 128
    41fc:	5f e3       	ldi	r21, 0x3F	; 63
    41fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4202:	88 23       	and	r24, r24
    4204:	2c f4       	brge	.+10     	; 0x4210 <main+0xbe>
		__ticks = 1;
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	9e 83       	std	Y+6, r25	; 0x06
    420c:	8d 83       	std	Y+5, r24	; 0x05
    420e:	3f c0       	rjmp	.+126    	; 0x428e <main+0x13c>
	else if (__tmp > 65535)
    4210:	6f 81       	ldd	r22, Y+7	; 0x07
    4212:	78 85       	ldd	r23, Y+8	; 0x08
    4214:	89 85       	ldd	r24, Y+9	; 0x09
    4216:	9a 85       	ldd	r25, Y+10	; 0x0a
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	3f ef       	ldi	r19, 0xFF	; 255
    421c:	4f e7       	ldi	r20, 0x7F	; 127
    421e:	57 e4       	ldi	r21, 0x47	; 71
    4220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4224:	18 16       	cp	r1, r24
    4226:	4c f5       	brge	.+82     	; 0x427a <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4228:	6b 85       	ldd	r22, Y+11	; 0x0b
    422a:	7c 85       	ldd	r23, Y+12	; 0x0c
    422c:	8d 85       	ldd	r24, Y+13	; 0x0d
    422e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	40 e2       	ldi	r20, 0x20	; 32
    4236:	51 e4       	ldi	r21, 0x41	; 65
    4238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423c:	dc 01       	movw	r26, r24
    423e:	cb 01       	movw	r24, r22
    4240:	bc 01       	movw	r22, r24
    4242:	cd 01       	movw	r24, r26
    4244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	9e 83       	std	Y+6, r25	; 0x06
    424e:	8d 83       	std	Y+5, r24	; 0x05
    4250:	0f c0       	rjmp	.+30     	; 0x4270 <main+0x11e>
    4252:	80 e9       	ldi	r24, 0x90	; 144
    4254:	91 e0       	ldi	r25, 0x01	; 1
    4256:	9c 83       	std	Y+4, r25	; 0x04
    4258:	8b 83       	std	Y+3, r24	; 0x03
    425a:	8b 81       	ldd	r24, Y+3	; 0x03
    425c:	9c 81       	ldd	r25, Y+4	; 0x04
    425e:	01 97       	sbiw	r24, 0x01	; 1
    4260:	f1 f7       	brne	.-4      	; 0x425e <main+0x10c>
    4262:	9c 83       	std	Y+4, r25	; 0x04
    4264:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4266:	8d 81       	ldd	r24, Y+5	; 0x05
    4268:	9e 81       	ldd	r25, Y+6	; 0x06
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	9e 83       	std	Y+6, r25	; 0x06
    426e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4270:	8d 81       	ldd	r24, Y+5	; 0x05
    4272:	9e 81       	ldd	r25, Y+6	; 0x06
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	69 f7       	brne	.-38     	; 0x4252 <main+0x100>
    4278:	14 c0       	rjmp	.+40     	; 0x42a2 <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427a:	6f 81       	ldd	r22, Y+7	; 0x07
    427c:	78 85       	ldd	r23, Y+8	; 0x08
    427e:	89 85       	ldd	r24, Y+9	; 0x09
    4280:	9a 85       	ldd	r25, Y+10	; 0x0a
    4282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	9e 83       	std	Y+6, r25	; 0x06
    428c:	8d 83       	std	Y+5, r24	; 0x05
    428e:	8d 81       	ldd	r24, Y+5	; 0x05
    4290:	9e 81       	ldd	r25, Y+6	; 0x06
    4292:	9a 83       	std	Y+2, r25	; 0x02
    4294:	89 83       	std	Y+1, r24	; 0x01
    4296:	89 81       	ldd	r24, Y+1	; 0x01
    4298:	9a 81       	ldd	r25, Y+2	; 0x02
    429a:	01 97       	sbiw	r24, 0x01	; 1
    429c:	f1 f7       	brne	.-4      	; 0x429a <main+0x148>
    429e:	9a 83       	std	Y+2, r25	; 0x02
    42a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	LCD_voidClearDisplay();
    42a2:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_voidClearDisplay>
	LCD_u8GoToRowCol(LCD_ROW0, LCD_COL0);
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	60 e0       	ldi	r22, 0x00	; 0
    42aa:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
	LCD_u8SendString("Enter Password:");
    42ae:	8d e7       	ldi	r24, 0x7D	; 125
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
	LCD_u8GoToRowCol(LCD_ROW3, LCD_COL0);
    42b6:	83 e0       	ldi	r24, 0x03	; 3
    42b8:	60 e0       	ldi	r22, 0x00	; 0
    42ba:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
	LCD_u8SendString("Enter ON/C to enter");
    42be:	8d e8       	ldi	r24, 0x8D	; 141
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
    42c6:	bc c0       	rjmp	.+376    	; 0x4440 <main+0x2ee>

	while(1)
	{
		while(Local_u8Trials < 3)
		{
			LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	60 e0       	ldi	r22, 0x00	; 0
    42cc:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
    42d0:	7b c0       	rjmp	.+246    	; 0x43c8 <main+0x276>
			while(Local_u8Iterator < 20)
			{
				do
				{
					Local_u8Password[Local_u8Iterator] = KEYPAD_u8GetPressedKey();
    42d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d4:	08 2f       	mov	r16, r24
    42d6:	10 e0       	ldi	r17, 0x00	; 0
    42d8:	0e 94 3f 0c 	call	0x187e	; 0x187e <KEYPAD_u8GetPressedKey>
    42dc:	28 2f       	mov	r18, r24
    42de:	ce 01       	movw	r24, r28
    42e0:	45 96       	adiw	r24, 0x15	; 21
    42e2:	fc 01       	movw	r30, r24
    42e4:	e0 0f       	add	r30, r16
    42e6:	f1 1f       	adc	r31, r17
    42e8:	20 83       	st	Z, r18

					if(Local_u8Password[Local_u8Iterator] == '/' || Local_u8Password[Local_u8Iterator] == '*' ||
    42ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    42ec:	28 2f       	mov	r18, r24
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	ce 01       	movw	r24, r28
    42f2:	45 96       	adiw	r24, 0x15	; 21
    42f4:	fc 01       	movw	r30, r24
    42f6:	e2 0f       	add	r30, r18
    42f8:	f3 1f       	adc	r31, r19
    42fa:	80 81       	ld	r24, Z
    42fc:	8f 32       	cpi	r24, 0x2F	; 47
    42fe:	61 f1       	breq	.+88     	; 0x4358 <main+0x206>
    4300:	8f 85       	ldd	r24, Y+15	; 0x0f
    4302:	28 2f       	mov	r18, r24
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	ce 01       	movw	r24, r28
    4308:	45 96       	adiw	r24, 0x15	; 21
    430a:	fc 01       	movw	r30, r24
    430c:	e2 0f       	add	r30, r18
    430e:	f3 1f       	adc	r31, r19
    4310:	80 81       	ld	r24, Z
    4312:	8a 32       	cpi	r24, 0x2A	; 42
    4314:	09 f1       	breq	.+66     	; 0x4358 <main+0x206>
    4316:	8f 85       	ldd	r24, Y+15	; 0x0f
    4318:	28 2f       	mov	r18, r24
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	ce 01       	movw	r24, r28
    431e:	45 96       	adiw	r24, 0x15	; 21
    4320:	fc 01       	movw	r30, r24
    4322:	e2 0f       	add	r30, r18
    4324:	f3 1f       	adc	r31, r19
    4326:	80 81       	ld	r24, Z
    4328:	8d 32       	cpi	r24, 0x2D	; 45
    432a:	b1 f0       	breq	.+44     	; 0x4358 <main+0x206>
    432c:	8f 85       	ldd	r24, Y+15	; 0x0f
    432e:	28 2f       	mov	r18, r24
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	ce 01       	movw	r24, r28
    4334:	45 96       	adiw	r24, 0x15	; 21
    4336:	fc 01       	movw	r30, r24
    4338:	e2 0f       	add	r30, r18
    433a:	f3 1f       	adc	r31, r19
    433c:	80 81       	ld	r24, Z
    433e:	8b 32       	cpi	r24, 0x2B	; 43
    4340:	59 f0       	breq	.+22     	; 0x4358 <main+0x206>
    4342:	8f 85       	ldd	r24, Y+15	; 0x0f
    4344:	28 2f       	mov	r18, r24
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	ce 01       	movw	r24, r28
    434a:	45 96       	adiw	r24, 0x15	; 21
    434c:	fc 01       	movw	r30, r24
    434e:	e2 0f       	add	r30, r18
    4350:	f3 1f       	adc	r31, r19
    4352:	80 81       	ld	r24, Z
    4354:	8d 33       	cpi	r24, 0x3D	; 61
    4356:	49 f4       	brne	.+18     	; 0x436a <main+0x218>
							Local_u8Password[Local_u8Iterator] == '-' || Local_u8Password[Local_u8Iterator] == '+' ||
							Local_u8Password[Local_u8Iterator] == '=')
						Local_u8Password[Local_u8Iterator] = 0x00;
    4358:	8f 85       	ldd	r24, Y+15	; 0x0f
    435a:	28 2f       	mov	r18, r24
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	ce 01       	movw	r24, r28
    4360:	45 96       	adiw	r24, 0x15	; 21
    4362:	fc 01       	movw	r30, r24
    4364:	e2 0f       	add	r30, r18
    4366:	f3 1f       	adc	r31, r19
    4368:	10 82       	st	Z, r1

				}while(Local_u8Password[Local_u8Iterator] == 0x00);
    436a:	8f 85       	ldd	r24, Y+15	; 0x0f
    436c:	28 2f       	mov	r18, r24
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	ce 01       	movw	r24, r28
    4372:	45 96       	adiw	r24, 0x15	; 21
    4374:	fc 01       	movw	r30, r24
    4376:	e2 0f       	add	r30, r18
    4378:	f3 1f       	adc	r31, r19
    437a:	80 81       	ld	r24, Z
    437c:	88 23       	and	r24, r24
    437e:	09 f4       	brne	.+2      	; 0x4382 <main+0x230>
    4380:	a8 cf       	rjmp	.-176    	; 0x42d2 <main+0x180>

				if(Local_u8Password[Local_u8Iterator] == '.')
    4382:	8f 85       	ldd	r24, Y+15	; 0x0f
    4384:	28 2f       	mov	r18, r24
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	ce 01       	movw	r24, r28
    438a:	45 96       	adiw	r24, 0x15	; 21
    438c:	fc 01       	movw	r30, r24
    438e:	e2 0f       	add	r30, r18
    4390:	f3 1f       	adc	r31, r19
    4392:	80 81       	ld	r24, Z
    4394:	8e 32       	cpi	r24, 0x2E	; 46
    4396:	51 f4       	brne	.+20     	; 0x43ac <main+0x25a>
				{
					Local_u8Password[Local_u8Iterator] = NOT_PRESSED;
    4398:	8f 85       	ldd	r24, Y+15	; 0x0f
    439a:	28 2f       	mov	r18, r24
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	ce 01       	movw	r24, r28
    43a0:	45 96       	adiw	r24, 0x15	; 21
    43a2:	fc 01       	movw	r30, r24
    43a4:	e2 0f       	add	r30, r18
    43a6:	f3 1f       	adc	r31, r19
    43a8:	10 82       	st	Z, r1
    43aa:	12 c0       	rjmp	.+36     	; 0x43d0 <main+0x27e>
					break;
				}

				LCD_voidSendCharacter(Local_u8Password[Local_u8Iterator]);
    43ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    43ae:	28 2f       	mov	r18, r24
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	ce 01       	movw	r24, r28
    43b4:	45 96       	adiw	r24, 0x15	; 21
    43b6:	fc 01       	movw	r30, r24
    43b8:	e2 0f       	add	r30, r18
    43ba:	f3 1f       	adc	r31, r19
    43bc:	80 81       	ld	r24, Z
    43be:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_voidSendCharacter>
				Local_u8Iterator++;
    43c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    43c4:	8f 5f       	subi	r24, 0xFF	; 255
    43c6:	8f 87       	std	Y+15, r24	; 0x0f
	while(1)
	{
		while(Local_u8Trials < 3)
		{
			LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
			while(Local_u8Iterator < 20)
    43c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    43ca:	84 31       	cpi	r24, 0x14	; 20
    43cc:	08 f4       	brcc	.+2      	; 0x43d0 <main+0x27e>
    43ce:	81 cf       	rjmp	.-254    	; 0x42d2 <main+0x180>

				LCD_voidSendCharacter(Local_u8Password[Local_u8Iterator]);
				Local_u8Iterator++;
			}

			if(0 == StringCompare((const char*) Local_u8Pass, (const char*) Local_u8Password))
    43d0:	ce 01       	movw	r24, r28
    43d2:	41 96       	adiw	r24, 0x11	; 17
    43d4:	9e 01       	movw	r18, r28
    43d6:	2b 5e       	subi	r18, 0xEB	; 235
    43d8:	3f 4f       	sbci	r19, 0xFF	; 255
    43da:	b9 01       	movw	r22, r18
    43dc:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <StringCompare>
    43e0:	88 23       	and	r24, r24
    43e2:	a9 f4       	brne	.+42     	; 0x440e <main+0x2bc>
			{
				LCD_voidClearDisplay();
    43e4:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_voidClearDisplay>
				LCD_u8GoToRowCol(LCD_ROW0, LCD_COL0);
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	60 e0       	ldi	r22, 0x00	; 0
    43ec:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
				LCD_u8SendString("Welcome Home!");
    43f0:	81 ea       	ldi	r24, 0xA1	; 161
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
				SERVO_u8SetAngle(TIMER1_CHANNEL_B, 90);
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	6a e5       	ldi	r22, 0x5A	; 90
    43fc:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SERVO_u8SetAngle>
				LED_u8On(DIO_PORTD, DIO_PIN2);
    4400:	83 e0       	ldi	r24, 0x03	; 3
    4402:	62 e0       	ldi	r22, 0x02	; 2
    4404:	0e 94 c8 14 	call	0x2990	; 0x2990 <LED_u8On>
				Local_u8Trials = 4;
    4408:	84 e0       	ldi	r24, 0x04	; 4
    440a:	88 8b       	std	Y+16, r24	; 0x10
    440c:	1d c0       	rjmp	.+58     	; 0x4448 <main+0x2f6>
				break;
			}
			else
			{
				Local_u8Iterator = 0;
    440e:	1f 86       	std	Y+15, r1	; 0x0f
				StringReset((char*) Local_u8Password, 20);
    4410:	ce 01       	movw	r24, r28
    4412:	45 96       	adiw	r24, 0x15	; 21
    4414:	64 e1       	ldi	r22, 0x14	; 20
    4416:	0e 94 87 20 	call	0x410e	; 0x410e <StringReset>
				LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
    441a:	81 e0       	ldi	r24, 0x01	; 1
    441c:	60 e0       	ldi	r22, 0x00	; 0
    441e:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
				LCD_u8SendString("                    ");
    4422:	8f ea       	ldi	r24, 0xAF	; 175
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
				LCD_u8GoToRowCol(LCD_ROW2, LCD_COL0);
    442a:	82 e0       	ldi	r24, 0x02	; 2
    442c:	60 e0       	ldi	r22, 0x00	; 0
    442e:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
				LCD_u8SendString("Wrong Password");
    4432:	84 ec       	ldi	r24, 0xC4	; 196
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
			}

			Local_u8Trials++;
    443a:	88 89       	ldd	r24, Y+16	; 0x10
    443c:	8f 5f       	subi	r24, 0xFF	; 255
    443e:	88 8b       	std	Y+16, r24	; 0x10
	LCD_u8SendString("Enter ON/C to enter");


	while(1)
	{
		while(Local_u8Trials < 3)
    4440:	88 89       	ldd	r24, Y+16	; 0x10
    4442:	83 30       	cpi	r24, 0x03	; 3
    4444:	08 f4       	brcc	.+2      	; 0x4448 <main+0x2f6>
    4446:	40 cf       	rjmp	.-384    	; 0x42c8 <main+0x176>

			Local_u8Trials++;

		}

		if(Local_u8Trials == 3)
    4448:	88 89       	ldd	r24, Y+16	; 0x10
    444a:	83 30       	cpi	r24, 0x03	; 3
    444c:	c9 f7       	brne	.-14     	; 0x4440 <main+0x2ee>
		{
			Local_u8Trials++;
    444e:	88 89       	ldd	r24, Y+16	; 0x10
    4450:	8f 5f       	subi	r24, 0xFF	; 255
    4452:	88 8b       	std	Y+16, r24	; 0x10

			LCD_voidClearDisplay();
    4454:	0e 94 44 11 	call	0x2288	; 0x2288 <LCD_voidClearDisplay>
			LCD_u8GoToRowCol(LCD_ROW0, LCD_COL0);
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	60 e0       	ldi	r22, 0x00	; 0
    445c:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
			LCD_u8SendString("Thieeeeeef!!!");
    4460:	83 ed       	ldi	r24, 0xD3	; 211
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
			LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	60 e0       	ldi	r22, 0x00	; 0
    446c:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_u8GoToRowCol>
			LCD_u8SendString("Calling 911 !!");
    4470:	81 ee       	ldi	r24, 0xE1	; 225
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_u8SendString>
			LED_u8On(DIO_PORTD, DIO_PIN0);
    4478:	83 e0       	ldi	r24, 0x03	; 3
    447a:	60 e0       	ldi	r22, 0x00	; 0
    447c:	0e 94 c8 14 	call	0x2990	; 0x2990 <LED_u8On>
			LED_u8On(DIO_PORTD, DIO_PIN1);
    4480:	83 e0       	ldi	r24, 0x03	; 3
    4482:	61 e0       	ldi	r22, 0x01	; 1
    4484:	0e 94 c8 14 	call	0x2990	; 0x2990 <LED_u8On>
    4488:	db cf       	rjmp	.-74     	; 0x4440 <main+0x2ee>

0000448a <__mulsi3>:
    448a:	62 9f       	mul	r22, r18
    448c:	d0 01       	movw	r26, r0
    448e:	73 9f       	mul	r23, r19
    4490:	f0 01       	movw	r30, r0
    4492:	82 9f       	mul	r24, r18
    4494:	e0 0d       	add	r30, r0
    4496:	f1 1d       	adc	r31, r1
    4498:	64 9f       	mul	r22, r20
    449a:	e0 0d       	add	r30, r0
    449c:	f1 1d       	adc	r31, r1
    449e:	92 9f       	mul	r25, r18
    44a0:	f0 0d       	add	r31, r0
    44a2:	83 9f       	mul	r24, r19
    44a4:	f0 0d       	add	r31, r0
    44a6:	74 9f       	mul	r23, r20
    44a8:	f0 0d       	add	r31, r0
    44aa:	65 9f       	mul	r22, r21
    44ac:	f0 0d       	add	r31, r0
    44ae:	99 27       	eor	r25, r25
    44b0:	72 9f       	mul	r23, r18
    44b2:	b0 0d       	add	r27, r0
    44b4:	e1 1d       	adc	r30, r1
    44b6:	f9 1f       	adc	r31, r25
    44b8:	63 9f       	mul	r22, r19
    44ba:	b0 0d       	add	r27, r0
    44bc:	e1 1d       	adc	r30, r1
    44be:	f9 1f       	adc	r31, r25
    44c0:	bd 01       	movw	r22, r26
    44c2:	cf 01       	movw	r24, r30
    44c4:	11 24       	eor	r1, r1
    44c6:	08 95       	ret

000044c8 <__udivmodsi4>:
    44c8:	a1 e2       	ldi	r26, 0x21	; 33
    44ca:	1a 2e       	mov	r1, r26
    44cc:	aa 1b       	sub	r26, r26
    44ce:	bb 1b       	sub	r27, r27
    44d0:	fd 01       	movw	r30, r26
    44d2:	0d c0       	rjmp	.+26     	; 0x44ee <__udivmodsi4_ep>

000044d4 <__udivmodsi4_loop>:
    44d4:	aa 1f       	adc	r26, r26
    44d6:	bb 1f       	adc	r27, r27
    44d8:	ee 1f       	adc	r30, r30
    44da:	ff 1f       	adc	r31, r31
    44dc:	a2 17       	cp	r26, r18
    44de:	b3 07       	cpc	r27, r19
    44e0:	e4 07       	cpc	r30, r20
    44e2:	f5 07       	cpc	r31, r21
    44e4:	20 f0       	brcs	.+8      	; 0x44ee <__udivmodsi4_ep>
    44e6:	a2 1b       	sub	r26, r18
    44e8:	b3 0b       	sbc	r27, r19
    44ea:	e4 0b       	sbc	r30, r20
    44ec:	f5 0b       	sbc	r31, r21

000044ee <__udivmodsi4_ep>:
    44ee:	66 1f       	adc	r22, r22
    44f0:	77 1f       	adc	r23, r23
    44f2:	88 1f       	adc	r24, r24
    44f4:	99 1f       	adc	r25, r25
    44f6:	1a 94       	dec	r1
    44f8:	69 f7       	brne	.-38     	; 0x44d4 <__udivmodsi4_loop>
    44fa:	60 95       	com	r22
    44fc:	70 95       	com	r23
    44fe:	80 95       	com	r24
    4500:	90 95       	com	r25
    4502:	9b 01       	movw	r18, r22
    4504:	ac 01       	movw	r20, r24
    4506:	bd 01       	movw	r22, r26
    4508:	cf 01       	movw	r24, r30
    450a:	08 95       	ret

0000450c <__divmodsi4>:
    450c:	97 fb       	bst	r25, 7
    450e:	09 2e       	mov	r0, r25
    4510:	05 26       	eor	r0, r21
    4512:	0e d0       	rcall	.+28     	; 0x4530 <__divmodsi4_neg1>
    4514:	57 fd       	sbrc	r21, 7
    4516:	04 d0       	rcall	.+8      	; 0x4520 <__divmodsi4_neg2>
    4518:	d7 df       	rcall	.-82     	; 0x44c8 <__udivmodsi4>
    451a:	0a d0       	rcall	.+20     	; 0x4530 <__divmodsi4_neg1>
    451c:	00 1c       	adc	r0, r0
    451e:	38 f4       	brcc	.+14     	; 0x452e <__divmodsi4_exit>

00004520 <__divmodsi4_neg2>:
    4520:	50 95       	com	r21
    4522:	40 95       	com	r20
    4524:	30 95       	com	r19
    4526:	21 95       	neg	r18
    4528:	3f 4f       	sbci	r19, 0xFF	; 255
    452a:	4f 4f       	sbci	r20, 0xFF	; 255
    452c:	5f 4f       	sbci	r21, 0xFF	; 255

0000452e <__divmodsi4_exit>:
    452e:	08 95       	ret

00004530 <__divmodsi4_neg1>:
    4530:	f6 f7       	brtc	.-4      	; 0x452e <__divmodsi4_exit>
    4532:	90 95       	com	r25
    4534:	80 95       	com	r24
    4536:	70 95       	com	r23
    4538:	61 95       	neg	r22
    453a:	7f 4f       	sbci	r23, 0xFF	; 255
    453c:	8f 4f       	sbci	r24, 0xFF	; 255
    453e:	9f 4f       	sbci	r25, 0xFF	; 255
    4540:	08 95       	ret

00004542 <__prologue_saves__>:
    4542:	2f 92       	push	r2
    4544:	3f 92       	push	r3
    4546:	4f 92       	push	r4
    4548:	5f 92       	push	r5
    454a:	6f 92       	push	r6
    454c:	7f 92       	push	r7
    454e:	8f 92       	push	r8
    4550:	9f 92       	push	r9
    4552:	af 92       	push	r10
    4554:	bf 92       	push	r11
    4556:	cf 92       	push	r12
    4558:	df 92       	push	r13
    455a:	ef 92       	push	r14
    455c:	ff 92       	push	r15
    455e:	0f 93       	push	r16
    4560:	1f 93       	push	r17
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	cd b7       	in	r28, 0x3d	; 61
    4568:	de b7       	in	r29, 0x3e	; 62
    456a:	ca 1b       	sub	r28, r26
    456c:	db 0b       	sbc	r29, r27
    456e:	0f b6       	in	r0, 0x3f	; 63
    4570:	f8 94       	cli
    4572:	de bf       	out	0x3e, r29	; 62
    4574:	0f be       	out	0x3f, r0	; 63
    4576:	cd bf       	out	0x3d, r28	; 61
    4578:	09 94       	ijmp

0000457a <__epilogue_restores__>:
    457a:	2a 88       	ldd	r2, Y+18	; 0x12
    457c:	39 88       	ldd	r3, Y+17	; 0x11
    457e:	48 88       	ldd	r4, Y+16	; 0x10
    4580:	5f 84       	ldd	r5, Y+15	; 0x0f
    4582:	6e 84       	ldd	r6, Y+14	; 0x0e
    4584:	7d 84       	ldd	r7, Y+13	; 0x0d
    4586:	8c 84       	ldd	r8, Y+12	; 0x0c
    4588:	9b 84       	ldd	r9, Y+11	; 0x0b
    458a:	aa 84       	ldd	r10, Y+10	; 0x0a
    458c:	b9 84       	ldd	r11, Y+9	; 0x09
    458e:	c8 84       	ldd	r12, Y+8	; 0x08
    4590:	df 80       	ldd	r13, Y+7	; 0x07
    4592:	ee 80       	ldd	r14, Y+6	; 0x06
    4594:	fd 80       	ldd	r15, Y+5	; 0x05
    4596:	0c 81       	ldd	r16, Y+4	; 0x04
    4598:	1b 81       	ldd	r17, Y+3	; 0x03
    459a:	aa 81       	ldd	r26, Y+2	; 0x02
    459c:	b9 81       	ldd	r27, Y+1	; 0x01
    459e:	ce 0f       	add	r28, r30
    45a0:	d1 1d       	adc	r29, r1
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	ed 01       	movw	r28, r26
    45ae:	08 95       	ret

000045b0 <_exit>:
    45b0:	f8 94       	cli

000045b2 <__stop_program>:
    45b2:	ff cf       	rjmp	.-2      	; 0x45b2 <__stop_program>
