
Smart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  000045c2  00004656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080015a  0080015a  00004750  2**0
                  ALLOC
  3 .stab         000042e4  00000000  00000000  00004750  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001795  00000000  00000000  00008a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a329  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c4fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e580  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <main>
      8a:	0c 94 df 22 	jmp	0x45be	; 0x45be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e2       	ldi	r26, 0x2E	; 46
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e2       	ldi	r24, 0x2E	; 46
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b0 22 	jmp	0x4560	; 0x4560 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e2       	ldi	r22, 0x2E	; 46
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cc 22 	jmp	0x4598	; 0x4598 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
/*Global flag to indicate if Auto Trigger is running or not*/
static u8 ADC_u8AutoTrigger = NOT_WORKING;

/********************************				Function Definitions				********************************/
void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* Voltage Reference Selection */
#if ADC_REF_VOLT == ADC_AREF
	CLR_BIT(ADMUX,REFS0);			CLR_BIT(ADMUX,REFS1);
#elif ADC_REF_VOLT == ADC_AVCC
	SET_BIT(ADMUX,REFS0);			CLR_BIT(ADMUX,REFS1);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24
#error "Wrong ADC reference volt selection"
#endif

	/* ADC Left Adjust */
#if ADC_ADJUST == ADC_RIGHT
	CLR_BIT(ADMUX,ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
#else
#error "Wrong ADC left adjust selection"
#endif

	/* ADC Prescaler */
	ADCSRA &= 0xF8;			//mask prescaler bits first
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	88 7f       	andi	r24, 0xF8	; 248
     cdc:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALER;
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	86 60       	ori	r24, 0x06	; 6
     cea:	8c 93       	st	X, r24

	//enable ADC
	SET_BIT(ADCSRA, ADEN);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	8c 93       	st	X, r24
}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <ADC_u8SingleConversionSynch>:

u8 ADC_u8SingleConversionSynch(u8 copy_u8AdcChannel, u16* copy_pu16AdcData)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	28 97       	sbiw	r28, 0x08	; 8
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	8e 83       	std	Y+6, r24	; 0x06
     d16:	78 87       	std	Y+8, r23	; 0x08
     d18:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorStatus = OK;
     d1a:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Timeout = 0;
     d1c:	19 82       	std	Y+1, r1	; 0x01
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	1b 82       	std	Y+3, r1	; 0x03
     d22:	1c 82       	std	Y+4, r1	; 0x04

	if(copy_u8AdcChannel <= ADC_CHANNEL7)
     d24:	8e 81       	ldd	r24, Y+6	; 0x06
     d26:	88 30       	cpi	r24, 0x08	; 8
     d28:	08 f0       	brcs	.+2      	; 0xd2c <ADC_u8SingleConversionSynch+0x2c>
     d2a:	6e c0       	rjmp	.+220    	; 0xe08 <ADC_u8SingleConversionSynch+0x108>
	{
		if(copy_pu16AdcData != NULL)
     d2c:	8f 81       	ldd	r24, Y+7	; 0x07
     d2e:	98 85       	ldd	r25, Y+8	; 0x08
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	09 f4       	brne	.+2      	; 0xd36 <ADC_u8SingleConversionSynch+0x36>
     d34:	66 c0       	rjmp	.+204    	; 0xe02 <ADC_u8SingleConversionSynch+0x102>
		{
			if(ADC_u8State == IDLE)
     d36:	80 91 36 01 	lds	r24, 0x0136
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	09 f0       	breq	.+2      	; 0xd40 <ADC_u8SingleConversionSynch+0x40>
     d3e:	5e c0       	rjmp	.+188    	; 0xdfc <ADC_u8SingleConversionSynch+0xfc>
			{
				/*ADC busy now*/
				ADC_u8State = BUSY;
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	80 93 36 01 	sts	0x0136, r24

				//select channel
				ADMUX &= 0xE0;		/* clear MUX bits in the ADMUX register */
     d46:	a7 e2       	ldi	r26, 0x27	; 39
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e7 e2       	ldi	r30, 0x27	; 39
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 7e       	andi	r24, 0xE0	; 224
     d52:	8c 93       	st	X, r24
				ADMUX |= copy_u8AdcChannel;	/* Set required channel into the MUX bits in ADMUX register */
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	90 81       	ld	r25, Z
     d5e:	8e 81       	ldd	r24, Y+6	; 0x06
     d60:	89 2b       	or	r24, r25
     d62:	8c 93       	st	X, r24

				/* ADC Start Conversion */
				SET_BIT(ADCSRA, ADSC);
     d64:	a6 e2       	ldi	r26, 0x26	; 38
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e6 e2       	ldi	r30, 0x26	; 38
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 64       	ori	r24, 0x40	; 64
     d70:	8c 93       	st	X, r24
     d72:	0b c0       	rjmp	.+22     	; 0xd8a <ADC_u8SingleConversionSynch+0x8a>
				/* Busy wait polling till conversion complete
				 * using also Timeout to make sure ADC conversion time not take too long or exit
				 * */
				while(GET_BIT(ADCSRA,ADIF) == 0 && (Local_u32Timeout != ADC_TIMEOUT))
				{
					Local_u32Timeout++;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	ab 81       	ldd	r26, Y+3	; 0x03
     d7a:	bc 81       	ldd	r27, Y+4	; 0x04
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	a1 1d       	adc	r26, r1
     d80:	b1 1d       	adc	r27, r1
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	ab 83       	std	Y+3, r26	; 0x03
     d88:	bc 83       	std	Y+4, r27	; 0x04
				SET_BIT(ADCSRA, ADSC);

				/* Busy wait polling till conversion complete
				 * using also Timeout to make sure ADC conversion time not take too long or exit
				 * */
				while(GET_BIT(ADCSRA,ADIF) == 0 && (Local_u32Timeout != ADC_TIMEOUT))
     d8a:	e6 e2       	ldi	r30, 0x26	; 38
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	82 95       	swap	r24
     d92:	8f 70       	andi	r24, 0x0F	; 15
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	81 70       	andi	r24, 0x01	; 1
     d9a:	90 70       	andi	r25, 0x00	; 0
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	61 f4       	brne	.+24     	; 0xdb8 <ADC_u8SingleConversionSynch+0xb8>
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	ab 81       	ldd	r26, Y+3	; 0x03
     da6:	bc 81       	ldd	r27, Y+4	; 0x04
     da8:	88 38       	cpi	r24, 0x88	; 136
     daa:	23 e1       	ldi	r18, 0x13	; 19
     dac:	92 07       	cpc	r25, r18
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	a2 07       	cpc	r26, r18
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	b2 07       	cpc	r27, r18
     db6:	f1 f6       	brne	.-68     	; 0xd74 <ADC_u8SingleConversionSynch+0x74>
				{
					Local_u32Timeout++;
				}

				//check if the loop was broken by timeout or conversion is complete
				if(Local_u32Timeout < ADC_TIMEOUT)
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	ab 81       	ldd	r26, Y+3	; 0x03
     dbe:	bc 81       	ldd	r27, Y+4	; 0x04
     dc0:	88 38       	cpi	r24, 0x88	; 136
     dc2:	23 e1       	ldi	r18, 0x13	; 19
     dc4:	92 07       	cpc	r25, r18
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	a2 07       	cpc	r26, r18
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	b2 07       	cpc	r27, r18
     dce:	98 f4       	brcc	.+38     	; 0xdf6 <ADC_u8SingleConversionSynch+0xf6>
				{
					/* Clear the ADC complete conversion Flag */
					SET_BIT(ADCSRA, ADIF);
     dd0:	a6 e2       	ldi	r26, 0x26	; 38
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e6 e2       	ldi	r30, 0x26	; 38
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 61       	ori	r24, 0x10	; 16
     ddc:	8c 93       	st	X, r24

					/* Read the value of the ADC Registers */
#if ADC_RESULT == ADC_10BIT
					/* ADC Left Adjust */
#if ADC_ADJUST == ADC_RIGHT
					*copy_pu16AdcData = ADC_DATA;
     dde:	e4 e2       	ldi	r30, 0x24	; 36
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	ef 81       	ldd	r30, Y+7	; 0x07
     de8:	f8 85       	ldd	r31, Y+8	; 0x08
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	80 83       	st	Z, r24
#else
#error "Wrong ADC result selection"
#endif

					/*ADC is now IDLE*/
					ADC_u8State = IDLE;
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	80 93 36 01 	sts	0x0136, r24
     df4:	0b c0       	rjmp	.+22     	; 0xe0c <ADC_u8SingleConversionSynch+0x10c>

				}
				else
					Local_u8ErrorStatus = ADC_E_TIMEOUT;
     df6:	8c e0       	ldi	r24, 0x0C	; 12
     df8:	8d 83       	std	Y+5, r24	; 0x05
     dfa:	08 c0       	rjmp	.+16     	; 0xe0c <ADC_u8SingleConversionSynch+0x10c>
			}
			else
				Local_u8ErrorStatus = ADC_E_BUSY;
     dfc:	8d e0       	ldi	r24, 0x0D	; 13
     dfe:	8d 83       	std	Y+5, r24	; 0x05
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <ADC_u8SingleConversionSynch+0x10c>

		}
		else
			Local_u8ErrorStatus = ADC_E_PARAM_POINTER;
     e02:	8b e0       	ldi	r24, 0x0B	; 11
     e04:	8d 83       	std	Y+5, r24	; 0x05
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <ADC_u8SingleConversionSynch+0x10c>
	}
	else
		Local_u8ErrorStatus = ADC_E_PARAM_INVALID_CHANNEL_ID;
     e08:	8a e0       	ldi	r24, 0x0A	; 10
     e0a:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorStatus;
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e0e:	28 96       	adiw	r28, 0x08	; 8
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <ADC_u8SingleConversionAsynch>:

u8 ADC_u8SingleConversionAsynch(u8 copy_u8AdcChannel, u16* copy_pu16AdcData, pvFunction_t copy_pvNotificationFunc)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <ADC_u8SingleConversionAsynch+0x6>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <ADC_u8SingleConversionAsynch+0x8>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <ADC_u8SingleConversionAsynch+0xa>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	7c 83       	std	Y+4, r23	; 0x04
     e32:	6b 83       	std	Y+3, r22	; 0x03
     e34:	5e 83       	std	Y+6, r21	; 0x06
     e36:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorStatus = OK;
     e38:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8AdcChannel <= ADC_CHANNEL7)
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	88 30       	cpi	r24, 0x08	; 8
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <ADC_u8SingleConversionAsynch+0x22>
     e40:	3f c0       	rjmp	.+126    	; 0xec0 <ADC_u8SingleConversionAsynch+0xa0>
	{
		if(copy_pu16AdcData != NULL && copy_pvNotificationFunc != NULL)
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	c1 f1       	breq	.+112    	; 0xeba <ADC_u8SingleConversionAsynch+0x9a>
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	a1 f1       	breq	.+104    	; 0xeba <ADC_u8SingleConversionAsynch+0x9a>
		{
			if(ADC_u8State == IDLE)
     e52:	80 91 36 01 	lds	r24, 0x0136
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	69 f5       	brne	.+90     	; 0xeb4 <ADC_u8SingleConversionAsynch+0x94>
			{
				/*ADC busy now*/
				ADC_u8State = BUSY;
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	80 93 36 01 	sts	0x0136, r24
				/*Initialize the global result pointer*/
				ADC_pu16ConversionResult = copy_pu16AdcData;
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	90 93 5b 01 	sts	0x015B, r25
     e68:	80 93 5a 01 	sts	0x015A, r24
				/*Initialize the global notification function pointer*/
				ADC_pvNotificationFunction = copy_pvNotificationFunc;
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	90 93 5d 01 	sts	0x015D, r25
     e74:	80 93 5c 01 	sts	0x015C, r24

				//select channel
				ADMUX &= 0xE0;		/* clear MUX bits in the ADMUX register */
     e78:	a7 e2       	ldi	r26, 0x27	; 39
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e2       	ldi	r30, 0x27	; 39
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 7e       	andi	r24, 0xE0	; 224
     e84:	8c 93       	st	X, r24
				ADMUX |= copy_u8AdcChannel;	/* Set required channel into the MUX bits in ADMUX register */
     e86:	a7 e2       	ldi	r26, 0x27	; 39
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e7 e2       	ldi	r30, 0x27	; 39
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	90 81       	ld	r25, Z
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	89 2b       	or	r24, r25
     e94:	8c 93       	st	X, r24

				/* ADC Start Conversion */
				SET_BIT(ADCSRA, ADSC);
     e96:	a6 e2       	ldi	r26, 0x26	; 38
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e6 e2       	ldi	r30, 0x26	; 38
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 64       	ori	r24, 0x40	; 64
     ea2:	8c 93       	st	X, r24
				/*Enable ADC Interrupt*/
				SET_BIT(ADCSRA,ADIE);
     ea4:	a6 e2       	ldi	r26, 0x26	; 38
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e6 e2       	ldi	r30, 0x26	; 38
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 60       	ori	r24, 0x08	; 8
     eb0:	8c 93       	st	X, r24
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <ADC_u8SingleConversionAsynch+0xa4>

			}
			else
				Local_u8ErrorStatus = ADC_E_BUSY;
     eb4:	8d e0       	ldi	r24, 0x0D	; 13
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <ADC_u8SingleConversionAsynch+0xa4>

		}
		else
			Local_u8ErrorStatus = ADC_E_PARAM_POINTER;
     eba:	8b e0       	ldi	r24, 0x0B	; 11
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <ADC_u8SingleConversionAsynch+0xa4>
	}
	else
		Local_u8ErrorStatus = ADC_E_PARAM_INVALID_CHANNEL_ID;
     ec0:	8a e0       	ldi	r24, 0x0A	; 10
     ec2:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec6:	26 96       	adiw	r28, 0x06	; 6
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <ADC_u8GroupConversionSynch>:

u8 ADC_u8GroupConversionSynch(u8 copy_u8NumOfConversions, u8* copy_pu8AdcChannels, u16* copy_pu16AdcResults)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	2b 97       	sbiw	r28, 0x0b	; 11
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	8f 83       	std	Y+7, r24	; 0x07
     eee:	79 87       	std	Y+9, r23	; 0x09
     ef0:	68 87       	std	Y+8, r22	; 0x08
     ef2:	5b 87       	std	Y+11, r21	; 0x0b
     ef4:	4a 87       	std	Y+10, r20	; 0x0a
	u8 Local_u8ErrorStatus = OK, Local_u8Iterator = 0;
     ef6:	1e 82       	std	Y+6, r1	; 0x06
     ef8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Timeout = 0;
     efa:	19 82       	std	Y+1, r1	; 0x01
     efc:	1a 82       	std	Y+2, r1	; 0x02
     efe:	1b 82       	std	Y+3, r1	; 0x03
     f00:	1c 82       	std	Y+4, r1	; 0x04

	if((copy_pu8AdcChannels != NULL) && (copy_pu16AdcResults != NULL))
     f02:	88 85       	ldd	r24, Y+8	; 0x08
     f04:	99 85       	ldd	r25, Y+9	; 0x09
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	09 f4       	brne	.+2      	; 0xf0c <ADC_u8GroupConversionSynch+0x34>
     f0a:	a6 c0       	rjmp	.+332    	; 0x1058 <ADC_u8GroupConversionSynch+0x180>
     f0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	09 f4       	brne	.+2      	; 0xf16 <ADC_u8GroupConversionSynch+0x3e>
     f14:	a1 c0       	rjmp	.+322    	; 0x1058 <ADC_u8GroupConversionSynch+0x180>
	{
		if(ADC_u8State == IDLE)
     f16:	80 91 36 01 	lds	r24, 0x0136
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	09 f0       	breq	.+2      	; 0xf20 <ADC_u8GroupConversionSynch+0x48>
     f1e:	99 c0       	rjmp	.+306    	; 0x1052 <ADC_u8GroupConversionSynch+0x17a>
		{
			/*ADC busy now*/
			ADC_u8State = BUSY;
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	80 93 36 01 	sts	0x0136, r24
     f26:	8c c0       	rjmp	.+280    	; 0x1040 <ADC_u8GroupConversionSynch+0x168>

			//loop over group channels
			while(Local_u8Iterator < copy_u8NumOfConversions)
			{
				if(copy_pu8AdcChannels[Local_u8Iterator] <= ADC_CHANNEL7)
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	88 85       	ldd	r24, Y+8	; 0x08
     f30:	99 85       	ldd	r25, Y+9	; 0x09
     f32:	fc 01       	movw	r30, r24
     f34:	e2 0f       	add	r30, r18
     f36:	f3 1f       	adc	r31, r19
     f38:	80 81       	ld	r24, Z
     f3a:	88 30       	cpi	r24, 0x08	; 8
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <ADC_u8GroupConversionSynch+0x68>
     f3e:	77 c0       	rjmp	.+238    	; 0x102e <ADC_u8GroupConversionSynch+0x156>
				{
					//select channel
					ADMUX &= 0xE0;		/* clear MUX bits in the ADMUX register */
     f40:	a7 e2       	ldi	r26, 0x27	; 39
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e7 e2       	ldi	r30, 0x27	; 39
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	80 7e       	andi	r24, 0xE0	; 224
     f4c:	8c 93       	st	X, r24
					ADMUX |= copy_pu8AdcChannels[Local_u8Iterator];	/* Set required channel into the MUX bits in ADMUX register */
     f4e:	a7 e2       	ldi	r26, 0x27	; 39
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e7 e2       	ldi	r30, 0x27	; 39
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	40 81       	ld	r20, Z
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	88 85       	ldd	r24, Y+8	; 0x08
     f60:	99 85       	ldd	r25, Y+9	; 0x09
     f62:	fc 01       	movw	r30, r24
     f64:	e2 0f       	add	r30, r18
     f66:	f3 1f       	adc	r31, r19
     f68:	80 81       	ld	r24, Z
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24

					/* ADC Start Conversion */
					SET_BIT(ADCSRA, ADSC);
     f6e:	a6 e2       	ldi	r26, 0x26	; 38
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e6 e2       	ldi	r30, 0x26	; 38
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 64       	ori	r24, 0x40	; 64
     f7a:	8c 93       	st	X, r24
     f7c:	0b c0       	rjmp	.+22     	; 0xf94 <ADC_u8GroupConversionSynch+0xbc>
					/* Busy wait polling till conversion complete
					 * using also Timeout to make sure ADC conversion time not take too long or exit
					 * */
					while(GET_BIT(ADCSRA,ADIF) == 0 && (Local_u32Timeout != ADC_TIMEOUT))
					{
						Local_u32Timeout++;
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	ab 81       	ldd	r26, Y+3	; 0x03
     f84:	bc 81       	ldd	r27, Y+4	; 0x04
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	a1 1d       	adc	r26, r1
     f8a:	b1 1d       	adc	r27, r1
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	ab 83       	std	Y+3, r26	; 0x03
     f92:	bc 83       	std	Y+4, r27	; 0x04
					SET_BIT(ADCSRA, ADSC);

					/* Busy wait polling till conversion complete
					 * using also Timeout to make sure ADC conversion time not take too long or exit
					 * */
					while(GET_BIT(ADCSRA,ADIF) == 0 && (Local_u32Timeout != ADC_TIMEOUT))
     f94:	e6 e2       	ldi	r30, 0x26	; 38
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	82 95       	swap	r24
     f9c:	8f 70       	andi	r24, 0x0F	; 15
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	61 f4       	brne	.+24     	; 0xfc2 <ADC_u8GroupConversionSynch+0xea>
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	ab 81       	ldd	r26, Y+3	; 0x03
     fb0:	bc 81       	ldd	r27, Y+4	; 0x04
     fb2:	88 38       	cpi	r24, 0x88	; 136
     fb4:	23 e1       	ldi	r18, 0x13	; 19
     fb6:	92 07       	cpc	r25, r18
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	a2 07       	cpc	r26, r18
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	b2 07       	cpc	r27, r18
     fc0:	f1 f6       	brne	.-68     	; 0xf7e <ADC_u8GroupConversionSynch+0xa6>
					{
						Local_u32Timeout++;
					}

					//check if the loop was broken by timeout or conversion is complete
					if(Local_u32Timeout < ADC_TIMEOUT)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	ab 81       	ldd	r26, Y+3	; 0x03
     fc8:	bc 81       	ldd	r27, Y+4	; 0x04
     fca:	88 38       	cpi	r24, 0x88	; 136
     fcc:	23 e1       	ldi	r18, 0x13	; 19
     fce:	92 07       	cpc	r25, r18
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	a2 07       	cpc	r26, r18
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	b2 07       	cpc	r27, r18
     fd8:	d0 f4       	brcc	.+52     	; 0x100e <ADC_u8GroupConversionSynch+0x136>
					{
						/* Clear the ADC complete conversion Flag */
						SET_BIT(ADCSRA, ADIF);
     fda:	a6 e2       	ldi	r26, 0x26	; 38
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e6 e2       	ldi	r30, 0x26	; 38
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 61       	ori	r24, 0x10	; 16
     fe6:	8c 93       	st	X, r24

						/* Read the value of the ADC Registers */
#if ADC_RESULT == ADC_10BIT
						/* ADC Left Adjust */
#if ADC_ADJUST == ADC_RIGHT
						copy_pu16AdcResults[Local_u8Iterator] = ADC_DATA;
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	9c 01       	movw	r18, r24
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff8:	dc 01       	movw	r26, r24
     ffa:	a2 0f       	add	r26, r18
     ffc:	b3 1f       	adc	r27, r19
     ffe:	e4 e2       	ldi	r30, 0x24	; 36
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	91 81       	ldd	r25, Z+1	; 0x01
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
    100c:	12 c0       	rjmp	.+36     	; 0x1032 <ADC_u8GroupConversionSynch+0x15a>
#error "Wrong ADC result selection"
#endif
					}
					else
					{
						Local_u8ErrorStatus = ADC_E_TIMEOUT;
    100e:	8c e0       	ldi	r24, 0x0C	; 12
    1010:	8e 83       	std	Y+6, r24	; 0x06
						copy_pu16AdcResults[Local_u8Iterator] = 0;
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9c 01       	movw	r18, r24
    101a:	22 0f       	add	r18, r18
    101c:	33 1f       	adc	r19, r19
    101e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1020:	9b 85       	ldd	r25, Y+11	; 0x0b
    1022:	fc 01       	movw	r30, r24
    1024:	e2 0f       	add	r30, r18
    1026:	f3 1f       	adc	r31, r19
    1028:	11 82       	std	Z+1, r1	; 0x01
    102a:	10 82       	st	Z, r1
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <ADC_u8GroupConversionSynch+0x15a>
					}

				}
				else
					Local_u8ErrorStatus = ADC_E_PARAM_INVALID_CHANNEL_ID;
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	8e 83       	std	Y+6, r24	; 0x06


				Local_u8Iterator++;
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	8f 5f       	subi	r24, 0xFF	; 255
    1036:	8d 83       	std	Y+5, r24	; 0x05
				Local_u32Timeout = 0;
    1038:	19 82       	std	Y+1, r1	; 0x01
    103a:	1a 82       	std	Y+2, r1	; 0x02
    103c:	1b 82       	std	Y+3, r1	; 0x03
    103e:	1c 82       	std	Y+4, r1	; 0x04
		{
			/*ADC busy now*/
			ADC_u8State = BUSY;

			//loop over group channels
			while(Local_u8Iterator < copy_u8NumOfConversions)
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	98 17       	cp	r25, r24
    1046:	08 f4       	brcc	.+2      	; 0x104a <ADC_u8GroupConversionSynch+0x172>
    1048:	6f cf       	rjmp	.-290    	; 0xf28 <ADC_u8GroupConversionSynch+0x50>
				Local_u32Timeout = 0;

			}//end of while loop

			/*ADC is now IDLE*/
			ADC_u8State = IDLE;
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	80 93 36 01 	sts	0x0136, r24
    1050:	05 c0       	rjmp	.+10     	; 0x105c <ADC_u8GroupConversionSynch+0x184>

		}
		else
			Local_u8ErrorStatus = ADC_E_BUSY;
    1052:	8d e0       	ldi	r24, 0x0D	; 13
    1054:	8e 83       	std	Y+6, r24	; 0x06
    1056:	02 c0       	rjmp	.+4      	; 0x105c <ADC_u8GroupConversionSynch+0x184>

	}
	else
		Local_u8ErrorStatus = ADC_E_PARAM_POINTER;
    1058:	8b e0       	ldi	r24, 0x0B	; 11
    105a:	8e 83       	std	Y+6, r24	; 0x06


	return Local_u8ErrorStatus;
    105c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    105e:	2b 96       	adiw	r28, 0x0b	; 11
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <ADC_u8GroupConversionAsynch>:

u8 ADC_u8GroupConversionAsynch(u8 copy_u8NumOfConversions, u8* copy_pu8AdcChannels, u16* copy_pu16AdcResults, u8* Copy_pu8AdcErrorStatus, pvFunction_t copy_pvNotificationFunc)
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	2a 97       	sbiw	r28, 0x0a	; 10
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	8a 83       	std	Y+2, r24	; 0x02
    108a:	7c 83       	std	Y+4, r23	; 0x04
    108c:	6b 83       	std	Y+3, r22	; 0x03
    108e:	5e 83       	std	Y+6, r21	; 0x06
    1090:	4d 83       	std	Y+5, r20	; 0x05
    1092:	38 87       	std	Y+8, r19	; 0x08
    1094:	2f 83       	std	Y+7, r18	; 0x07
    1096:	1a 87       	std	Y+10, r17	; 0x0a
    1098:	09 87       	std	Y+9, r16	; 0x09
	u8 Local_u8ErrorStatus = OK;
    109a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_pvNotificationFunc != NULL)
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <ADC_u8GroupConversionAsynch+0x36>
    10a4:	69 c0       	rjmp	.+210    	; 0x1178 <ADC_u8GroupConversionAsynch+0x108>
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <ADC_u8GroupConversionAsynch+0x40>
    10ae:	64 c0       	rjmp	.+200    	; 0x1178 <ADC_u8GroupConversionAsynch+0x108>
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	09 f4       	brne	.+2      	; 0x10ba <ADC_u8GroupConversionAsynch+0x4a>
    10b8:	5f c0       	rjmp	.+190    	; 0x1178 <ADC_u8GroupConversionAsynch+0x108>
			&& (copy_pu8AdcChannels != NULL) && (copy_pu16AdcResults != NULL))
	{

		if(ADC_u8State == IDLE)
    10ba:	80 91 36 01 	lds	r24, 0x0136
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <ADC_u8GroupConversionAsynch+0x54>
    10c2:	57 c0       	rjmp	.+174    	; 0x1172 <ADC_u8GroupConversionAsynch+0x102>
		{
			/*ADC busy now*/
			ADC_u8State = BUSY;
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	80 93 36 01 	sts	0x0136, r24
			/*Group conversion now starts*/
			ADC_u8GroupConversionFlag = WORKING;
    10ca:	86 e0       	ldi	r24, 0x06	; 6
    10cc:	80 93 37 01 	sts	0x0137, r24
			/*Initialize the global Number Of Group conversions variable*/
			ADC_u8NumberOfConversions = copy_u8NumOfConversions;
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	80 93 5e 01 	sts	0x015E, r24
			/*Initialize the global Group Needed Channels pointer*/
			ADC_pu8GroupChannels = copy_pu8AdcChannels;
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	90 93 60 01 	sts	0x0160, r25
    10de:	80 93 5f 01 	sts	0x015F, r24
			/*Initialize the global result pointer*/
			ADC_pu16ConversionResult = copy_pu16AdcResults;
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	90 93 5b 01 	sts	0x015B, r25
    10ea:	80 93 5a 01 	sts	0x015A, r24
			/*Initialize the global notification function pointer*/
			ADC_pvNotificationFunction = copy_pvNotificationFunc;
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	90 93 5d 01 	sts	0x015D, r25
    10f6:	80 93 5c 01 	sts	0x015C, r24
			/*Initialize the global error status pointer*/
			ADC_pu8ErrorStatus = Copy_pu8AdcErrorStatus;
    10fa:	8f 81       	ldd	r24, Y+7	; 0x07
    10fc:	98 85       	ldd	r25, Y+8	; 0x08
    10fe:	90 93 63 01 	sts	0x0163, r25
    1102:	80 93 62 01 	sts	0x0162, r24

			if(copy_pu8AdcChannels[ADC_u8GroupCounter] <= ADC_CHANNEL7)
    1106:	80 91 61 01 	lds	r24, 0x0161
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	fc 01       	movw	r30, r24
    1114:	e2 0f       	add	r30, r18
    1116:	f3 1f       	adc	r31, r19
    1118:	80 81       	ld	r24, Z
    111a:	88 30       	cpi	r24, 0x08	; 8
    111c:	38 f5       	brcc	.+78     	; 0x116c <ADC_u8GroupConversionAsynch+0xfc>
			{
				//select channel
				ADMUX &= 0xE0;		/* clear MUX bits in the ADMUX register */
    111e:	a7 e2       	ldi	r26, 0x27	; 39
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e7 e2       	ldi	r30, 0x27	; 39
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 7e       	andi	r24, 0xE0	; 224
    112a:	8c 93       	st	X, r24
				ADMUX |= copy_pu8AdcChannels[ADC_u8GroupCounter];	/* Set required channel into the MUX bits in ADMUX register */
    112c:	a7 e2       	ldi	r26, 0x27	; 39
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e7 e2       	ldi	r30, 0x27	; 39
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	40 81       	ld	r20, Z
    1136:	80 91 61 01 	lds	r24, 0x0161
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	fc 01       	movw	r30, r24
    1144:	e2 0f       	add	r30, r18
    1146:	f3 1f       	adc	r31, r19
    1148:	80 81       	ld	r24, Z
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24

				/* ADC Start Conversion */
				SET_BIT(ADCSRA, ADSC);
    114e:	a6 e2       	ldi	r26, 0x26	; 38
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e6 e2       	ldi	r30, 0x26	; 38
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 64       	ori	r24, 0x40	; 64
    115a:	8c 93       	st	X, r24
				/*Enable ADC Interrupt*/
				SET_BIT(ADCSRA,ADIE);
    115c:	a6 e2       	ldi	r26, 0x26	; 38
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e6 e2       	ldi	r30, 0x26	; 38
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 60       	ori	r24, 0x08	; 8
    1168:	8c 93       	st	X, r24
    116a:	08 c0       	rjmp	.+16     	; 0x117c <ADC_u8GroupConversionAsynch+0x10c>
			}
			else
				Local_u8ErrorStatus = ADC_E_PARAM_INVALID_CHANNEL_ID;
    116c:	8a e0       	ldi	r24, 0x0A	; 10
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	05 c0       	rjmp	.+10     	; 0x117c <ADC_u8GroupConversionAsynch+0x10c>

		}
		else
			Local_u8ErrorStatus = ADC_E_BUSY;
    1172:	8d e0       	ldi	r24, 0x0D	; 13
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	02 c0       	rjmp	.+4      	; 0x117c <ADC_u8GroupConversionAsynch+0x10c>

	}
	else
		Local_u8ErrorStatus = ADC_E_PARAM_POINTER;
    1178:	8b e0       	ldi	r24, 0x0B	; 11
    117a:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
}
    117e:	2a 96       	adiw	r28, 0x0a	; 10
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	08 95       	ret

00001194 <ADC_u8AutoTriggerConversion>:


u8 ADC_u8AutoTriggerConversion(u8 copy_u8AdcTriggerSource, u8 copy_u8AdcChannel, u16* copy_pu16AdcData, pvFunction_t copy_pvNotificationFunc)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	27 97       	sbiw	r28, 0x07	; 7
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	8a 83       	std	Y+2, r24	; 0x02
    11aa:	6b 83       	std	Y+3, r22	; 0x03
    11ac:	5d 83       	std	Y+5, r21	; 0x05
    11ae:	4c 83       	std	Y+4, r20	; 0x04
    11b0:	3f 83       	std	Y+7, r19	; 0x07
    11b2:	2e 83       	std	Y+6, r18	; 0x06
	u8 Local_u8ErrorStatus = OK;
    11b4:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8AdcChannel <= ADC_CHANNEL7)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 30       	cpi	r24, 0x08	; 8
    11ba:	08 f0       	brcs	.+2      	; 0x11be <ADC_u8AutoTriggerConversion+0x2a>
    11bc:	70 c0       	rjmp	.+224    	; 0x129e <ADC_u8AutoTriggerConversion+0x10a>
	{
		if(copy_u8AdcTriggerSource <= ADC_TIMER1_CE)
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	88 30       	cpi	r24, 0x08	; 8
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <ADC_u8AutoTriggerConversion+0x32>
    11c4:	69 c0       	rjmp	.+210    	; 0x1298 <ADC_u8AutoTriggerConversion+0x104>
		{
			if(copy_pu16AdcData != NULL && copy_pvNotificationFunc != NULL)
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <ADC_u8AutoTriggerConversion+0x3c>
    11ce:	61 c0       	rjmp	.+194    	; 0x1292 <ADC_u8AutoTriggerConversion+0xfe>
    11d0:	8e 81       	ldd	r24, Y+6	; 0x06
    11d2:	9f 81       	ldd	r25, Y+7	; 0x07
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	09 f4       	brne	.+2      	; 0x11da <ADC_u8AutoTriggerConversion+0x46>
    11d8:	5c c0       	rjmp	.+184    	; 0x1292 <ADC_u8AutoTriggerConversion+0xfe>
			{
				if(ADC_u8State == IDLE)
    11da:	80 91 36 01 	lds	r24, 0x0136
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <ADC_u8AutoTriggerConversion+0x50>
    11e2:	54 c0       	rjmp	.+168    	; 0x128c <ADC_u8AutoTriggerConversion+0xf8>
				{
					/*ADC busy now*/
					ADC_u8State = BUSY;
    11e4:	83 e0       	ldi	r24, 0x03	; 3
    11e6:	80 93 36 01 	sts	0x0136, r24
					/* ADC auto trigger is running now */
					ADC_u8AutoTrigger = WORKING;
    11ea:	86 e0       	ldi	r24, 0x06	; 6
    11ec:	80 93 38 01 	sts	0x0138, r24
					/*Initialize the global result pointer*/
					ADC_pu16ConversionResult = copy_pu16AdcData;
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	90 93 5b 01 	sts	0x015B, r25
    11f8:	80 93 5a 01 	sts	0x015A, r24
					/*Initialize the global notification function pointer*/
					ADC_pvNotificationFunction = copy_pvNotificationFunc;
    11fc:	8e 81       	ldd	r24, Y+6	; 0x06
    11fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1200:	90 93 5d 01 	sts	0x015D, r25
    1204:	80 93 5c 01 	sts	0x015C, r24

					//select channel
					ADMUX &= 0xE0;		/* clear MUX bits in the ADMUX register */
    1208:	a7 e2       	ldi	r26, 0x27	; 39
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e7 e2       	ldi	r30, 0x27	; 39
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 7e       	andi	r24, 0xE0	; 224
    1214:	8c 93       	st	X, r24
					ADMUX |= copy_u8AdcChannel;	/* Set required channel into the MUX bits in ADMUX register */
    1216:	a7 e2       	ldi	r26, 0x27	; 39
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e7 e2       	ldi	r30, 0x27	; 39
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	90 81       	ld	r25, Z
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	89 2b       	or	r24, r25
    1224:	8c 93       	st	X, r24

					/* Initialize Trigger Source */
					SFIOR &= 0x1F;		//mask first
    1226:	a0 e5       	ldi	r26, 0x50	; 80
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e0 e5       	ldi	r30, 0x50	; 80
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8f 71       	andi	r24, 0x1F	; 31
    1232:	8c 93       	st	X, r24
					SFIOR |= (copy_u8AdcTriggerSource << 5);
    1234:	a0 e5       	ldi	r26, 0x50	; 80
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e0 e5       	ldi	r30, 0x50	; 80
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	28 2f       	mov	r18, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	82 95       	swap	r24
    124c:	92 95       	swap	r25
    124e:	90 7f       	andi	r25, 0xF0	; 240
    1250:	98 27       	eor	r25, r24
    1252:	80 7f       	andi	r24, 0xF0	; 240
    1254:	98 27       	eor	r25, r24
    1256:	82 2b       	or	r24, r18
    1258:	8c 93       	st	X, r24

					/* Enable ADC Auto Trigger */
					SET_BIT(ADCSRA,ADATE);
    125a:	a6 e2       	ldi	r26, 0x26	; 38
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e6 e2       	ldi	r30, 0x26	; 38
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 62       	ori	r24, 0x20	; 32
    1266:	8c 93       	st	X, r24

					if(copy_u8AdcTriggerSource == ADC_FREE_RUNNING)
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	88 23       	and	r24, r24
    126c:	39 f4       	brne	.+14     	; 0x127c <ADC_u8AutoTriggerConversion+0xe8>
					{
						/* ADC Start Conversion */
						SET_BIT(ADCSRA, ADSC);
    126e:	a6 e2       	ldi	r26, 0x26	; 38
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e6 e2       	ldi	r30, 0x26	; 38
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 64       	ori	r24, 0x40	; 64
    127a:	8c 93       	st	X, r24
					}

					/*Enable ADC Interrupt*/
					SET_BIT(ADCSRA,ADIE);
    127c:	a6 e2       	ldi	r26, 0x26	; 38
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e6 e2       	ldi	r30, 0x26	; 38
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	88 60       	ori	r24, 0x08	; 8
    1288:	8c 93       	st	X, r24
    128a:	0b c0       	rjmp	.+22     	; 0x12a2 <ADC_u8AutoTriggerConversion+0x10e>

				}
				else
					Local_u8ErrorStatus = ADC_E_BUSY;
    128c:	8d e0       	ldi	r24, 0x0D	; 13
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	08 c0       	rjmp	.+16     	; 0x12a2 <ADC_u8AutoTriggerConversion+0x10e>

			}
			else
				Local_u8ErrorStatus = ADC_E_PARAM_POINTER;
    1292:	8b e0       	ldi	r24, 0x0B	; 11
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	05 c0       	rjmp	.+10     	; 0x12a2 <ADC_u8AutoTriggerConversion+0x10e>
		}
		else
			Local_u8ErrorStatus = ADC_E_PARAM_INVALID_TRIGGER_ID;
    1298:	8e e0       	ldi	r24, 0x0E	; 14
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <ADC_u8AutoTriggerConversion+0x10e>

	}
	else
		Local_u8ErrorStatus = ADC_E_PARAM_INVALID_CHANNEL_ID;
    129e:	8a e0       	ldi	r24, 0x0A	; 10
    12a0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a4:	27 96       	adiw	r28, 0x07	; 7
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <ADC_voidDisableAutoTrigger>:

void ADC_voidDisableAutoTrigger(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8AutoTrigger == WORKING)
    12be:	80 91 38 01 	lds	r24, 0x0138
    12c2:	86 30       	cpi	r24, 0x06	; 6
    12c4:	41 f5       	brne	.+80     	; 0x1316 <ADC_voidDisableAutoTrigger+0x60>
	{
		/* Auto Trigger is now not working */
		ADC_u8AutoTrigger = NOT_WORKING;
    12c6:	87 e0       	ldi	r24, 0x07	; 7
    12c8:	80 93 38 01 	sts	0x0138, r24
		if(GET_BIT(ADCSRA, ADSC) == 1)
    12cc:	e6 e2       	ldi	r30, 0x26	; 38
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	82 95       	swap	r24
    12d4:	86 95       	lsr	r24
    12d6:	86 95       	lsr	r24
    12d8:	83 70       	andi	r24, 0x03	; 3
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	88 23       	and	r24, r24
    12e4:	39 f0       	breq	.+14     	; 0x12f4 <ADC_voidDisableAutoTrigger+0x3e>
		{
			CLR_BIT(ADCSRA, ADSC);
    12e6:	a6 e2       	ldi	r26, 0x26	; 38
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e6 e2       	ldi	r30, 0x26	; 38
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 7b       	andi	r24, 0xBF	; 191
    12f2:	8c 93       	st	X, r24
		}
		/* disable Auto Trigger */
		CLR_BIT(ADCSRA,ADATE);
    12f4:	a6 e2       	ldi	r26, 0x26	; 38
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e6 e2       	ldi	r30, 0x26	; 38
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	8f 7d       	andi	r24, 0xDF	; 223
    1300:	8c 93       	st	X, r24
		/*Disable ADC Interrupt*/
		CLR_BIT(ADCSRA,ADIE);
    1302:	a6 e2       	ldi	r26, 0x26	; 38
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e6 e2       	ldi	r30, 0x26	; 38
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	87 7f       	andi	r24, 0xF7	; 247
    130e:	8c 93       	st	X, r24
		/*ADC is now IDLE*/
		ADC_u8State = IDLE;
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	80 93 36 01 	sts	0x0136, r24
	}
}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <ADC_u8ConvertDigitalToAnalog>:

u8 ADC_u8ConvertDigitalToAnalog (u16 Copy_u16Value, u16* copy_pu16Analog)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <ADC_u8ConvertDigitalToAnalog+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <ADC_u8ConvertDigitalToAnalog+0x8>
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	9b 83       	std	Y+3, r25	; 0x03
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	7d 83       	std	Y+5, r23	; 0x05
    1330:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus = OK;
    1332:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu16Analog != NULL)
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	e9 f0       	breq	.+58     	; 0x1376 <ADC_u8ConvertDigitalToAnalog+0x5a>
	{
		*copy_pu16Analog = (u16)((u32)(Copy_u16Value * ADC_REFERENCE) / ADC_RESOLUTION_BITS);
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	cc 01       	movw	r24, r24
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	28 e8       	ldi	r18, 0x88	; 136
    1348:	33 e1       	ldi	r19, 0x13	; 19
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 4c 22 	call	0x4498	; 0x4498 <__mulsi3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	07 2e       	mov	r0, r23
    135c:	7a e0       	ldi	r23, 0x0A	; 10
    135e:	b6 95       	lsr	r27
    1360:	a7 95       	ror	r26
    1362:	97 95       	ror	r25
    1364:	87 95       	ror	r24
    1366:	7a 95       	dec	r23
    1368:	d1 f7       	brne	.-12     	; 0x135e <ADC_u8ConvertDigitalToAnalog+0x42>
    136a:	70 2d       	mov	r23, r0
    136c:	ec 81       	ldd	r30, Y+4	; 0x04
    136e:	fd 81       	ldd	r31, Y+5	; 0x05
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
    1374:	02 c0       	rjmp	.+4      	; 0x137a <ADC_u8ConvertDigitalToAnalog+0x5e>
	}
	else
		Local_u8ErrorStatus = ADC_E_PARAM_POINTER;
    1376:	8b e0       	ldi	r24, 0x0B	; 11
    1378:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8ErrorStatus;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <__vector_16>:
 * !comment  :  ISR Function ADC.  							 			      *
 ******************************************************************************/

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    138c:	1f 92       	push	r1
    138e:	0f 92       	push	r0
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	0f 92       	push	r0
    1394:	11 24       	eor	r1, r1
    1396:	2f 93       	push	r18
    1398:	3f 93       	push	r19
    139a:	4f 93       	push	r20
    139c:	5f 93       	push	r21
    139e:	6f 93       	push	r22
    13a0:	7f 93       	push	r23
    13a2:	8f 93       	push	r24
    13a4:	9f 93       	push	r25
    13a6:	af 93       	push	r26
    13a8:	bf 93       	push	r27
    13aa:	ef 93       	push	r30
    13ac:	ff 93       	push	r31
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8GroupConversionFlag == NOT_WORKING)
    13b6:	80 91 37 01 	lds	r24, 0x0137
    13ba:	87 30       	cpi	r24, 0x07	; 7
    13bc:	31 f5       	brne	.+76     	; 0x140a <__vector_16+0x7e>
	{
		/* Clear the ADC complete conversion Flag */
		SET_BIT(ADCSRA, ADIF);
    13be:	a6 e2       	ldi	r26, 0x26	; 38
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e6 e2       	ldi	r30, 0x26	; 38
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	80 61       	ori	r24, 0x10	; 16
    13ca:	8c 93       	st	X, r24

		/* Read the value of the ADC Registers */
#if ADC_RESULT == ADC_10BIT
		/* ADC Left Adjust */
#if ADC_ADJUST == ADC_RIGHT
		*ADC_pu16ConversionResult = ADC_DATA;
    13cc:	a0 91 5a 01 	lds	r26, 0x015A
    13d0:	b0 91 5b 01 	lds	r27, 0x015B
    13d4:	e4 e2       	ldi	r30, 0x24	; 36
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	11 96       	adiw	r26, 0x01	; 1
    13de:	9c 93       	st	X, r25
    13e0:	8e 93       	st	-X, r24
#endif
#else
#error "Wrong ADC result selection"
#endif

		if(ADC_u8AutoTrigger == NOT_WORKING)
    13e2:	80 91 38 01 	lds	r24, 0x0138
    13e6:	87 30       	cpi	r24, 0x07	; 7
    13e8:	51 f4       	brne	.+20     	; 0x13fe <__vector_16+0x72>
		{
			/*Disable ADC Interrupt*/
			CLR_BIT(ADCSRA,ADIE);
    13ea:	a6 e2       	ldi	r26, 0x26	; 38
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e6 e2       	ldi	r30, 0x26	; 38
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	87 7f       	andi	r24, 0xF7	; 247
    13f6:	8c 93       	st	X, r24
			/*ADC is now IDLE*/
			ADC_u8State = IDLE;
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	80 93 36 01 	sts	0x0136, r24
		{
			/* Nothing */
		}

		/*Invoke the callback notification function*/
		ADC_pvNotificationFunction();
    13fe:	e0 91 5c 01 	lds	r30, 0x015C
    1402:	f0 91 5d 01 	lds	r31, 0x015D
    1406:	09 95       	icall
    1408:	89 c0       	rjmp	.+274    	; 0x151c <__vector_16+0x190>

	}
	else if(ADC_u8GroupConversionFlag == WORKING)
    140a:	80 91 37 01 	lds	r24, 0x0137
    140e:	86 30       	cpi	r24, 0x06	; 6
    1410:	09 f0       	breq	.+2      	; 0x1414 <__vector_16+0x88>
    1412:	84 c0       	rjmp	.+264    	; 0x151c <__vector_16+0x190>
	{
		/* Clear the ADC complete conversion Flag */
		SET_BIT(ADCSRA, ADIF);
    1414:	a6 e2       	ldi	r26, 0x26	; 38
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e6 e2       	ldi	r30, 0x26	; 38
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	80 61       	ori	r24, 0x10	; 16
    1420:	8c 93       	st	X, r24
		/* Read the value of the ADC Registers */
#if ADC_RESULT == ADC_10BIT
		/* ADC Left Adjust */
#if ADC_ADJUST == ADC_RIGHT
		ADC_pu16ConversionResult[ADC_u8GroupCounter] = ADC_DATA;
    1422:	20 91 5a 01 	lds	r18, 0x015A
    1426:	30 91 5b 01 	lds	r19, 0x015B
    142a:	80 91 61 01 	lds	r24, 0x0161
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	d9 01       	movw	r26, r18
    1438:	a8 0f       	add	r26, r24
    143a:	b9 1f       	adc	r27, r25
    143c:	e4 e2       	ldi	r30, 0x24	; 36
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	9c 93       	st	X, r25
    1448:	8e 93       	st	-X, r24
#endif
#else
#error "Wrong ADC result selection"
#endif

		ADC_u8GroupCounter++;
    144a:	80 91 61 01 	lds	r24, 0x0161
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	80 93 61 01 	sts	0x0161, r24

		if((ADC_u8GroupCounter >= ADC_u8NumberOfConversions) || (ADC_pu8GroupChannels[ADC_u8GroupCounter] > ADC_CHANNEL7))
    1454:	90 91 61 01 	lds	r25, 0x0161
    1458:	80 91 5e 01 	lds	r24, 0x015E
    145c:	98 17       	cp	r25, r24
    145e:	70 f4       	brcc	.+28     	; 0x147c <__vector_16+0xf0>
    1460:	20 91 5f 01 	lds	r18, 0x015F
    1464:	30 91 60 01 	lds	r19, 0x0160
    1468:	80 91 61 01 	lds	r24, 0x0161
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	f9 01       	movw	r30, r18
    1472:	e8 0f       	add	r30, r24
    1474:	f9 1f       	adc	r31, r25
    1476:	80 81       	ld	r24, Z
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	78 f1       	brcs	.+94     	; 0x14da <__vector_16+0x14e>
		{
			/*Disable ADC Interrupt*/
			CLR_BIT(ADCSRA,ADIE);
    147c:	a6 e2       	ldi	r26, 0x26	; 38
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e6 e2       	ldi	r30, 0x26	; 38
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	87 7f       	andi	r24, 0xF7	; 247
    1488:	8c 93       	st	X, r24

			/* Reset the Group Counter*/
			ADC_u8GroupCounter = 0;
    148a:	10 92 61 01 	sts	0x0161, r1

			/*Invoke the callback notification function*/
			ADC_pvNotificationFunction();
    148e:	e0 91 5c 01 	lds	r30, 0x015C
    1492:	f0 91 5d 01 	lds	r31, 0x015D
    1496:	09 95       	icall

			/*Group conversion is now not working*/
			ADC_u8GroupConversionFlag = NOT_WORKING;
    1498:	87 e0       	ldi	r24, 0x07	; 7
    149a:	80 93 37 01 	sts	0x0137, r24

			/*ADC is now IDLE*/
			ADC_u8State = IDLE;
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	80 93 36 01 	sts	0x0136, r24
			if(ADC_pu8GroupChannels[ADC_u8GroupCounter] > ADC_CHANNEL7)
    14a4:	20 91 5f 01 	lds	r18, 0x015F
    14a8:	30 91 60 01 	lds	r19, 0x0160
    14ac:	80 91 61 01 	lds	r24, 0x0161
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	f9 01       	movw	r30, r18
    14b6:	e8 0f       	add	r30, r24
    14b8:	f9 1f       	adc	r31, r25
    14ba:	80 81       	ld	r24, Z
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	38 f0       	brcs	.+14     	; 0x14ce <__vector_16+0x142>
			{
				*ADC_pu8ErrorStatus = ADC_E_PARAM_INVALID_CHANNEL_ID;
    14c0:	e0 91 62 01 	lds	r30, 0x0162
    14c4:	f0 91 63 01 	lds	r31, 0x0163
    14c8:	8a e0       	ldi	r24, 0x0A	; 10
    14ca:	80 83       	st	Z, r24
    14cc:	27 c0       	rjmp	.+78     	; 0x151c <__vector_16+0x190>
			}
			else
				*ADC_pu8ErrorStatus = OK;
    14ce:	e0 91 62 01 	lds	r30, 0x0162
    14d2:	f0 91 63 01 	lds	r31, 0x0163
    14d6:	10 82       	st	Z, r1
    14d8:	21 c0       	rjmp	.+66     	; 0x151c <__vector_16+0x190>

		}
		else
		{
			//next channel
			ADMUX &= 0xE0;		/* clear MUX bits in the ADMUX register */
    14da:	a7 e2       	ldi	r26, 0x27	; 39
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e7 e2       	ldi	r30, 0x27	; 39
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 7e       	andi	r24, 0xE0	; 224
    14e6:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8GroupChannels[ADC_u8GroupCounter];	/* Set required channel into the MUX bits in ADMUX register */
    14e8:	a7 e2       	ldi	r26, 0x27	; 39
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e7 e2       	ldi	r30, 0x27	; 39
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	40 81       	ld	r20, Z
    14f2:	20 91 5f 01 	lds	r18, 0x015F
    14f6:	30 91 60 01 	lds	r19, 0x0160
    14fa:	80 91 61 01 	lds	r24, 0x0161
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	f9 01       	movw	r30, r18
    1504:	e8 0f       	add	r30, r24
    1506:	f9 1f       	adc	r31, r25
    1508:	80 81       	ld	r24, Z
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24

			/* ADC Start Conversion */
			SET_BIT(ADCSRA, ADSC);
    150e:	a6 e2       	ldi	r26, 0x26	; 38
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e6 e2       	ldi	r30, 0x26	; 38
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	80 64       	ori	r24, 0x40	; 64
    151a:	8c 93       	st	X, r24
		}
	}
}
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <DIO_voidInit>:
#include "DIO_config.h"

/*********************					 APIS PROTOTYPES 					************************/
/*		Init 	 */
void DIO_voidInit(void)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
#if ((PORTA_PIN0_DIR == 0 || PORTA_PIN0_DIR == 1) && (PORTA_PIN1_DIR == 0 || PORTA_PIN1_DIR == 1) && \
	 (PORTA_PIN2_DIR == 0 || PORTA_PIN2_DIR == 1) && (PORTA_PIN3_DIR == 0 || PORTA_PIN3_DIR == 1) && \
	 (PORTA_PIN4_DIR == 0 || PORTA_PIN4_DIR == 1) && (PORTA_PIN5_DIR == 0 || PORTA_PIN5_DIR == 1) && \
	 (PORTA_PIN6_DIR == 0 || PORTA_PIN6_DIR == 1) && (PORTA_PIN7_DIR == 0 || PORTA_PIN7_DIR == 1))

	DDRA = PORTA_DIR;
    154a:	ea e3       	ldi	r30, 0x3A	; 58
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	86 ee       	ldi	r24, 0xE6	; 230
    1550:	80 83       	st	Z, r24
#if    ((PORTB_PIN0_DIR == 0 || PORTB_PIN0_DIR == 1) && (PORTB_PIN1_DIR == 0 || PORTB_PIN1_DIR == 1) && \
		(PORTB_PIN2_DIR == 0 || PORTB_PIN2_DIR == 1) && (PORTB_PIN3_DIR == 0 || PORTB_PIN3_DIR == 1) && \
		(PORTB_PIN4_DIR == 0 || PORTB_PIN4_DIR == 1) && (PORTB_PIN5_DIR == 0 || PORTB_PIN5_DIR == 1) && \
		(PORTB_PIN6_DIR == 0 || PORTB_PIN6_DIR == 1) && (PORTB_PIN7_DIR == 0 || PORTB_PIN7_DIR == 1))

	DDRB = PORTB_DIR;
    1552:	e7 e3       	ldi	r30, 0x37	; 55
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 ef       	ldi	r24, 0xF0	; 240
    1558:	80 83       	st	Z, r24
#if    ((PORTC_PIN0_DIR == 0 || PORTC_PIN0_DIR == 1) && (PORTC_PIN1_DIR == 0 || PORTC_PIN1_DIR == 1) && \
		(PORTC_PIN2_DIR == 0 || PORTC_PIN2_DIR == 1) && (PORTC_PIN3_DIR == 0 || PORTC_PIN3_DIR == 1) && \
		(PORTC_PIN4_DIR == 0 || PORTC_PIN4_DIR == 1) && (PORTC_PIN5_DIR == 0 || PORTC_PIN5_DIR == 1) && \
		(PORTC_PIN6_DIR == 0 || PORTC_PIN6_DIR == 1) && (PORTC_PIN7_DIR == 0 || PORTC_PIN7_DIR == 1))

	DDRC = PORTC_DIR;
    155a:	e4 e3       	ldi	r30, 0x34	; 52
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8f e0       	ldi	r24, 0x0F	; 15
    1560:	80 83       	st	Z, r24
#if    ((PORTD_PIN0_DIR == 0 || PORTD_PIN0_DIR == 1) && (PORTD_PIN1_DIR == 0 || PORTD_PIN1_DIR == 1) && \
		(PORTD_PIN2_DIR == 0 || PORTD_PIN2_DIR == 1) && (PORTD_PIN3_DIR == 0 || PORTD_PIN3_DIR == 1) && \
		(PORTD_PIN4_DIR == 0 || PORTD_PIN4_DIR == 1) && (PORTD_PIN5_DIR == 0 || PORTD_PIN5_DIR == 1) && \
		(PORTD_PIN6_DIR == 0 || PORTD_PIN6_DIR == 1) && (PORTD_PIN7_DIR == 0 || PORTD_PIN7_DIR == 1))

	DDRD = PORTD_DIR;
    1562:	e1 e3       	ldi	r30, 0x31	; 49
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	80 83       	st	Z, r24
#if    ((PORTA_PIN0_INITIAL_VALUE == 0 || PORTA_PIN0_INITIAL_VALUE == 1) && (PORTA_PIN1_INITIAL_VALUE == 0 || PORTA_PIN1_INITIAL_VALUE == 1) && \
		(PORTA_PIN2_INITIAL_VALUE == 0 || PORTA_PIN2_INITIAL_VALUE == 1) && (PORTA_PIN3_INITIAL_VALUE == 0 || PORTA_PIN3_INITIAL_VALUE == 1) && \
		(PORTA_PIN4_INITIAL_VALUE == 0 || PORTA_PIN4_INITIAL_VALUE == 1) && (PORTA_PIN5_INITIAL_VALUE == 0 || PORTA_PIN5_INITIAL_VALUE == 1) && \
		(PORTA_PIN6_INITIAL_VALUE == 0 || PORTA_PIN6_INITIAL_VALUE == 1) && (PORTA_PIN7_INITIAL_VALUE == 0 || PORTA_PIN7_INITIAL_VALUE == 1))

	PORTA = PORTA_INITIAL_VALUE;
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 e1       	ldi	r24, 0x10	; 16
    1570:	80 83       	st	Z, r24
#if    ((PORTB_PIN0_INITIAL_VALUE == 0 || PORTB_PIN0_INITIAL_VALUE == 1) && (PORTB_PIN1_INITIAL_VALUE == 0 || PORTB_PIN1_INITIAL_VALUE == 1) && \
		(PORTB_PIN2_INITIAL_VALUE == 0 || PORTB_PIN2_INITIAL_VALUE == 1) && (PORTB_PIN3_INITIAL_VALUE == 0 || PORTB_PIN3_INITIAL_VALUE == 1) && \
		(PORTB_PIN4_INITIAL_VALUE == 0 || PORTB_PIN4_INITIAL_VALUE == 1) && (PORTB_PIN5_INITIAL_VALUE == 0 || PORTB_PIN5_INITIAL_VALUE == 1) && \
		(PORTB_PIN6_INITIAL_VALUE == 0 || PORTB_PIN6_INITIAL_VALUE == 1) && (PORTB_PIN7_INITIAL_VALUE == 0 || PORTB_PIN7_INITIAL_VALUE == 1))

	PORTB = PORTB_INITIAL_VALUE;
    1572:	e8 e3       	ldi	r30, 0x38	; 56
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	8f e0       	ldi	r24, 0x0F	; 15
    1578:	80 83       	st	Z, r24
#if    ((PORTC_PIN0_INITIAL_VALUE == 0 || PORTC_PIN0_INITIAL_VALUE == 1) && (PORTC_PIN1_INITIAL_VALUE == 0 || PORTC_PIN1_INITIAL_VALUE == 1) && \
		(PORTC_PIN2_INITIAL_VALUE == 0 || PORTC_PIN2_INITIAL_VALUE == 1) && (PORTC_PIN3_INITIAL_VALUE == 0 || PORTC_PIN3_INITIAL_VALUE == 1) && \
		(PORTC_PIN4_INITIAL_VALUE == 0 || PORTC_PIN4_INITIAL_VALUE == 1) && (PORTC_PIN5_INITIAL_VALUE == 0 || PORTC_PIN5_INITIAL_VALUE == 1) && \
		(PORTC_PIN6_INITIAL_VALUE == 0 || PORTC_PIN6_INITIAL_VALUE == 1) && (PORTC_PIN7_INITIAL_VALUE == 0 || PORTC_PIN7_INITIAL_VALUE == 1))

	PORTC = PORTC_INITIAL_VALUE;
    157a:	e5 e3       	ldi	r30, 0x35	; 53
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	80 83       	st	Z, r24
#if    ((PORTD_PIN0_INITIAL_VALUE == 0 || PORTD_PIN0_INITIAL_VALUE == 1) && (PORTD_PIN1_INITIAL_VALUE == 0 || PORTD_PIN1_INITIAL_VALUE == 1) && \
		(PORTD_PIN2_INITIAL_VALUE == 0 || PORTD_PIN2_INITIAL_VALUE == 1) && (PORTD_PIN3_INITIAL_VALUE == 0 || PORTD_PIN3_INITIAL_VALUE == 1) && \
		(PORTD_PIN4_INITIAL_VALUE == 0 || PORTD_PIN4_INITIAL_VALUE == 1) && (PORTD_PIN5_INITIAL_VALUE == 0 || PORTD_PIN5_INITIAL_VALUE == 1) && \
		(PORTD_PIN6_INITIAL_VALUE == 0 || PORTD_PIN6_INITIAL_VALUE == 1) && (PORTD_PIN7_INITIAL_VALUE == 0 || PORTD_PIN7_INITIAL_VALUE == 1))

	PORTD = PORTD_INITIAL_VALUE;
    1582:	e2 e3       	ldi	r30, 0x32	; 50
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	8e ef       	ldi	r24, 0xFE	; 254
    1588:	80 83       	st	Z, r24
#else
#error "Wrong input for PortD value pins"
#endif

}
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <DIO_u8SetPinDirection>:

/* Pin Apis */
u8 DIO_u8SetPinDirection            (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <DIO_u8SetPinDirection+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <DIO_u8SetPinDirection+0x8>
    1598:	00 d0       	rcall	.+0      	; 0x159a <DIO_u8SetPinDirection+0xa>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	6b 83       	std	Y+3, r22	; 0x03
    15a2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
    15a4:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	84 30       	cpi	r24, 0x04	; 4
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <DIO_u8SetPinDirection+0x1e>
    15ac:	f1 c0       	rjmp	.+482    	; 0x1790 <DIO_u8SetPinDirection+0x200>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	88 30       	cpi	r24, 0x08	; 8
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <DIO_u8SetPinDirection+0x26>
    15b4:	ea c0       	rjmp	.+468    	; 0x178a <DIO_u8SetPinDirection+0x1fa>
		{
			switch(copy_u8PortId)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3e 83       	std	Y+6, r19	; 0x06
    15be:	2d 83       	std	Y+5, r18	; 0x05
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <DIO_u8SetPinDirection+0x3c>
    15ca:	49 c0       	rjmp	.+146    	; 0x165e <DIO_u8SetPinDirection+0xce>
    15cc:	2d 81       	ldd	r18, Y+5	; 0x05
    15ce:	3e 81       	ldd	r19, Y+6	; 0x06
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <DIO_u8SetPinDirection+0x50>
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	71 f0       	breq	.+28     	; 0x15fa <DIO_u8SetPinDirection+0x6a>
    15de:	da c0       	rjmp	.+436    	; 0x1794 <DIO_u8SetPinDirection+0x204>
    15e0:	2d 81       	ldd	r18, Y+5	; 0x05
    15e2:	3e 81       	ldd	r19, Y+6	; 0x06
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <DIO_u8SetPinDirection+0x5c>
    15ea:	6b c0       	rjmp	.+214    	; 0x16c2 <DIO_u8SetPinDirection+0x132>
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	91 05       	cpc	r25, r1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <DIO_u8SetPinDirection+0x68>
    15f6:	97 c0       	rjmp	.+302    	; 0x1726 <DIO_u8SetPinDirection+0x196>
    15f8:	cd c0       	rjmp	.+410    	; 0x1794 <DIO_u8SetPinDirection+0x204>
			{
			case DIO_PORTA: if(copy_u8PinDirection == DIO_PIN_OUTPUT)
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	a1 f4       	brne	.+40     	; 0x1628 <DIO_u8SetPinDirection+0x98>
			{
				SET_BIT(DDRA, copy_u8PinId);
    1600:	aa e3       	ldi	r26, 0x3A	; 58
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	ea e3       	ldi	r30, 0x3A	; 58
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_u8SetPinDirection+0x8e>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_u8SetPinDirection+0x8a>
    1622:	84 2b       	or	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	b6 c0       	rjmp	.+364    	; 0x1794 <DIO_u8SetPinDirection+0x204>
			}
			else if(copy_u8PinDirection == DIO_PIN_INPUT)
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	88 23       	and	r24, r24
    162c:	a9 f4       	brne	.+42     	; 0x1658 <DIO_u8SetPinDirection+0xc8>
			{
				CLR_BIT(DDRA, copy_u8PinId);
    162e:	aa e3       	ldi	r26, 0x3A	; 58
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ea e3       	ldi	r30, 0x3A	; 58
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_u8SetPinDirection+0xbc>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_u8SetPinDirection+0xb8>
    1650:	80 95       	com	r24
    1652:	84 23       	and	r24, r20
    1654:	8c 93       	st	X, r24
    1656:	9e c0       	rjmp	.+316    	; 0x1794 <DIO_u8SetPinDirection+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_DIR;
    1658:	8d e0       	ldi	r24, 0x0D	; 13
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	9b c0       	rjmp	.+310    	; 0x1794 <DIO_u8SetPinDirection+0x204>

			break;

			case DIO_PORTB: if(copy_u8PinDirection == DIO_PIN_OUTPUT)
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	a1 f4       	brne	.+40     	; 0x168c <DIO_u8SetPinDirection+0xfc>
			{
				SET_BIT(DDRB, copy_u8PinId);
    1664:	a7 e3       	ldi	r26, 0x37	; 55
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e7 e3       	ldi	r30, 0x37	; 55
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_u8SetPinDirection+0xf2>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_u8SetPinDirection+0xee>
    1686:	84 2b       	or	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	84 c0       	rjmp	.+264    	; 0x1794 <DIO_u8SetPinDirection+0x204>
			}
			else if(copy_u8PinDirection == DIO_PIN_INPUT)
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	88 23       	and	r24, r24
    1690:	a9 f4       	brne	.+42     	; 0x16bc <DIO_u8SetPinDirection+0x12c>
			{
				CLR_BIT(DDRB, copy_u8PinId);
    1692:	a7 e3       	ldi	r26, 0x37	; 55
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e7 e3       	ldi	r30, 0x37	; 55
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8SetPinDirection+0x120>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_u8SetPinDirection+0x11c>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	6c c0       	rjmp	.+216    	; 0x1794 <DIO_u8SetPinDirection+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_DIR;
    16bc:	8d e0       	ldi	r24, 0x0D	; 13
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	69 c0       	rjmp	.+210    	; 0x1794 <DIO_u8SetPinDirection+0x204>

			break;

			case DIO_PORTC: if(copy_u8PinDirection == DIO_PIN_OUTPUT)
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	a1 f4       	brne	.+40     	; 0x16f0 <DIO_u8SetPinDirection+0x160>
			{
				SET_BIT(DDRC, copy_u8PinId);
    16c8:	a4 e3       	ldi	r26, 0x34	; 52
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e4 e3       	ldi	r30, 0x34	; 52
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_u8SetPinDirection+0x156>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_u8SetPinDirection+0x152>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	52 c0       	rjmp	.+164    	; 0x1794 <DIO_u8SetPinDirection+0x204>
			}
			else if(copy_u8PinDirection == DIO_PIN_INPUT)
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	88 23       	and	r24, r24
    16f4:	a9 f4       	brne	.+42     	; 0x1720 <DIO_u8SetPinDirection+0x190>
			{
				CLR_BIT(DDRC, copy_u8PinId);
    16f6:	a4 e3       	ldi	r26, 0x34	; 52
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e4 e3       	ldi	r30, 0x34	; 52
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_u8SetPinDirection+0x184>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_u8SetPinDirection+0x180>
    1718:	80 95       	com	r24
    171a:	84 23       	and	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	3a c0       	rjmp	.+116    	; 0x1794 <DIO_u8SetPinDirection+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_DIR;
    1720:	8d e0       	ldi	r24, 0x0D	; 13
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	37 c0       	rjmp	.+110    	; 0x1794 <DIO_u8SetPinDirection+0x204>

			break;

			case DIO_PORTD: if(copy_u8PinDirection == DIO_PIN_OUTPUT)
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	a1 f4       	brne	.+40     	; 0x1754 <DIO_u8SetPinDirection+0x1c4>
			{
				SET_BIT(DDRD, copy_u8PinId);
    172c:	a1 e3       	ldi	r26, 0x31	; 49
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e1 e3       	ldi	r30, 0x31	; 49
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_u8SetPinDirection+0x1ba>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_u8SetPinDirection+0x1b6>
    174e:	84 2b       	or	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	20 c0       	rjmp	.+64     	; 0x1794 <DIO_u8SetPinDirection+0x204>
			}
			else if(copy_u8PinDirection == DIO_PIN_INPUT)
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	88 23       	and	r24, r24
    1758:	a9 f4       	brne	.+42     	; 0x1784 <DIO_u8SetPinDirection+0x1f4>
			{
				CLR_BIT(DDRD, copy_u8PinId);
    175a:	a1 e3       	ldi	r26, 0x31	; 49
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e1 e3       	ldi	r30, 0x31	; 49
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_u8SetPinDirection+0x1e8>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_u8SetPinDirection+0x1e4>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <DIO_u8SetPinDirection+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_DIR;
    1784:	8d e0       	ldi	r24, 0x0D	; 13
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <DIO_u8SetPinDirection+0x204>


			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
    178a:	8a e0       	ldi	r24, 0x0A	; 10
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_u8SetPinDirection+0x204>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1790:	8b e0       	ldi	r24, 0x0B	; 11
    1792:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1794:	89 81       	ldd	r24, Y+1	; 0x01

}
    1796:	26 96       	adiw	r28, 0x06	; 6
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue                (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <DIO_u8SetPinValue+0x6>
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <DIO_u8SetPinValue+0x8>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <DIO_u8SetPinValue+0xa>
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	8a 83       	std	Y+2, r24	; 0x02
    17b8:	6b 83       	std	Y+3, r22	; 0x03
    17ba:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
    17bc:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <DIO_u8SetPinValue+0x1e>
    17c4:	f1 c0       	rjmp	.+482    	; 0x19a8 <DIO_u8SetPinValue+0x200>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 30       	cpi	r24, 0x08	; 8
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <DIO_u8SetPinValue+0x26>
    17cc:	ea c0       	rjmp	.+468    	; 0x19a2 <DIO_u8SetPinValue+0x1fa>
		{
			switch(copy_u8PortId)
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3e 83       	std	Y+6, r19	; 0x06
    17d6:	2d 83       	std	Y+5, r18	; 0x05
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
    17da:	9e 81       	ldd	r25, Y+6	; 0x06
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <DIO_u8SetPinValue+0x3c>
    17e2:	49 c0       	rjmp	.+146    	; 0x1876 <DIO_u8SetPinValue+0xce>
    17e4:	2d 81       	ldd	r18, Y+5	; 0x05
    17e6:	3e 81       	ldd	r19, Y+6	; 0x06
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <DIO_u8SetPinValue+0x50>
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	71 f0       	breq	.+28     	; 0x1812 <DIO_u8SetPinValue+0x6a>
    17f6:	da c0       	rjmp	.+436    	; 0x19ac <DIO_u8SetPinValue+0x204>
    17f8:	2d 81       	ldd	r18, Y+5	; 0x05
    17fa:	3e 81       	ldd	r19, Y+6	; 0x06
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <DIO_u8SetPinValue+0x5c>
    1802:	6b c0       	rjmp	.+214    	; 0x18da <DIO_u8SetPinValue+0x132>
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	91 05       	cpc	r25, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <DIO_u8SetPinValue+0x68>
    180e:	97 c0       	rjmp	.+302    	; 0x193e <DIO_u8SetPinValue+0x196>
    1810:	cd c0       	rjmp	.+410    	; 0x19ac <DIO_u8SetPinValue+0x204>
			{
			case DIO_PORTA: if(copy_u8PinValue == DIO_PIN_HIGH)
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	a1 f4       	brne	.+40     	; 0x1840 <DIO_u8SetPinValue+0x98>
			{
				SET_BIT(PORTA, copy_u8PinId);
    1818:	ab e3       	ldi	r26, 0x3B	; 59
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	eb e3       	ldi	r30, 0x3B	; 59
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_u8SetPinValue+0x8e>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_u8SetPinValue+0x8a>
    183a:	84 2b       	or	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	b6 c0       	rjmp	.+364    	; 0x19ac <DIO_u8SetPinValue+0x204>
			}
			else if(copy_u8PinValue == DIO_PIN_LOW)
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	88 23       	and	r24, r24
    1844:	a9 f4       	brne	.+42     	; 0x1870 <DIO_u8SetPinValue+0xc8>
			{
				CLR_BIT(PORTA, copy_u8PinId);
    1846:	ab e3       	ldi	r26, 0x3B	; 59
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	eb e3       	ldi	r30, 0x3B	; 59
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_u8SetPinValue+0xbc>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_u8SetPinValue+0xb8>
    1868:	80 95       	com	r24
    186a:	84 23       	and	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	9e c0       	rjmp	.+316    	; 0x19ac <DIO_u8SetPinValue+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_VAL;
    1870:	8e e0       	ldi	r24, 0x0E	; 14
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	9b c0       	rjmp	.+310    	; 0x19ac <DIO_u8SetPinValue+0x204>

			break;

			case DIO_PORTB: if(copy_u8PinValue == DIO_PIN_HIGH)
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	a1 f4       	brne	.+40     	; 0x18a4 <DIO_u8SetPinValue+0xfc>
			{
				SET_BIT(PORTB, copy_u8PinId);
    187c:	a8 e3       	ldi	r26, 0x38	; 56
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e8 e3       	ldi	r30, 0x38	; 56
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 2e       	mov	r0, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_u8SetPinValue+0xf2>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <DIO_u8SetPinValue+0xee>
    189e:	84 2b       	or	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	84 c0       	rjmp	.+264    	; 0x19ac <DIO_u8SetPinValue+0x204>
			}
			else if(copy_u8PinValue == DIO_PIN_LOW)
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	88 23       	and	r24, r24
    18a8:	a9 f4       	brne	.+42     	; 0x18d4 <DIO_u8SetPinValue+0x12c>
			{
				CLR_BIT(PORTB, copy_u8PinId);
    18aa:	a8 e3       	ldi	r26, 0x38	; 56
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e8 e3       	ldi	r30, 0x38	; 56
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_u8SetPinValue+0x120>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <DIO_u8SetPinValue+0x11c>
    18cc:	80 95       	com	r24
    18ce:	84 23       	and	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	6c c0       	rjmp	.+216    	; 0x19ac <DIO_u8SetPinValue+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_VAL;
    18d4:	8e e0       	ldi	r24, 0x0E	; 14
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	69 c0       	rjmp	.+210    	; 0x19ac <DIO_u8SetPinValue+0x204>

			break;

			case DIO_PORTC: if(copy_u8PinValue == DIO_PIN_HIGH)
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	a1 f4       	brne	.+40     	; 0x1908 <DIO_u8SetPinValue+0x160>
			{
				SET_BIT(PORTC, copy_u8PinId);
    18e0:	a5 e3       	ldi	r26, 0x35	; 53
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e5 e3       	ldi	r30, 0x35	; 53
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_u8SetPinValue+0x156>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_u8SetPinValue+0x152>
    1902:	84 2b       	or	r24, r20
    1904:	8c 93       	st	X, r24
    1906:	52 c0       	rjmp	.+164    	; 0x19ac <DIO_u8SetPinValue+0x204>
			}
			else if(copy_u8PinValue == DIO_PIN_LOW)
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	88 23       	and	r24, r24
    190c:	a9 f4       	brne	.+42     	; 0x1938 <DIO_u8SetPinValue+0x190>
			{
				CLR_BIT(PORTC, copy_u8PinId);
    190e:	a5 e3       	ldi	r26, 0x35	; 53
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e5 e3       	ldi	r30, 0x35	; 53
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_u8SetPinValue+0x184>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_u8SetPinValue+0x180>
    1930:	80 95       	com	r24
    1932:	84 23       	and	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	3a c0       	rjmp	.+116    	; 0x19ac <DIO_u8SetPinValue+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_VAL;
    1938:	8e e0       	ldi	r24, 0x0E	; 14
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	37 c0       	rjmp	.+110    	; 0x19ac <DIO_u8SetPinValue+0x204>

			break;

			case DIO_PORTD: if(copy_u8PinValue == DIO_PIN_HIGH)
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	a1 f4       	brne	.+40     	; 0x196c <DIO_u8SetPinValue+0x1c4>
			{
				SET_BIT(PORTD, copy_u8PinId);
    1944:	a2 e3       	ldi	r26, 0x32	; 50
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e2 e3       	ldi	r30, 0x32	; 50
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_u8SetPinValue+0x1ba>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <DIO_u8SetPinValue+0x1b6>
    1966:	84 2b       	or	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	20 c0       	rjmp	.+64     	; 0x19ac <DIO_u8SetPinValue+0x204>
			}
			else if(copy_u8PinValue == DIO_PIN_LOW)
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	88 23       	and	r24, r24
    1970:	a9 f4       	brne	.+42     	; 0x199c <DIO_u8SetPinValue+0x1f4>
			{
				CLR_BIT(PORTD, copy_u8PinId);
    1972:	a2 e3       	ldi	r26, 0x32	; 50
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e2 e3       	ldi	r30, 0x32	; 50
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <DIO_u8SetPinValue+0x1e8>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <DIO_u8SetPinValue+0x1e4>
    1994:	80 95       	com	r24
    1996:	84 23       	and	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	08 c0       	rjmp	.+16     	; 0x19ac <DIO_u8SetPinValue+0x204>
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_VAL;
    199c:	8e e0       	ldi	r24, 0x0E	; 14
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <DIO_u8SetPinValue+0x204>


			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
    19a2:	8a e0       	ldi	r24, 0x0A	; 10
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <DIO_u8SetPinValue+0x204>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    19a8:	8b e0       	ldi	r24, 0x0B	; 11
    19aa:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ae:	26 96       	adiw	r28, 0x06	; 6
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue                (u8 copy_u8PortId, u8 copy_u8PinId, u8* copy_pu8PinValue)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	27 97       	sbiw	r28, 0x07	; 7
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	8a 83       	std	Y+2, r24	; 0x02
    19d6:	6b 83       	std	Y+3, r22	; 0x03
    19d8:	5d 83       	std	Y+5, r21	; 0x05
    19da:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK;
    19dc:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	84 30       	cpi	r24, 0x04	; 4
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <DIO_u8GetPinValue+0x26>
    19e4:	80 c0       	rjmp	.+256    	; 0x1ae6 <DIO_u8GetPinValue+0x126>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	88 30       	cpi	r24, 0x08	; 8
    19ea:	08 f0       	brcs	.+2      	; 0x19ee <DIO_u8GetPinValue+0x2e>
    19ec:	79 c0       	rjmp	.+242    	; 0x1ae0 <DIO_u8GetPinValue+0x120>
		{
			if(copy_pu8PinValue != NULL)
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	9d 81       	ldd	r25, Y+5	; 0x05
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <DIO_u8GetPinValue+0x38>
    19f6:	71 c0       	rjmp	.+226    	; 0x1ada <DIO_u8GetPinValue+0x11a>
			{
				switch(copy_u8PortId)
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3f 83       	std	Y+7, r19	; 0x07
    1a00:	2e 83       	std	Y+6, r18	; 0x06
    1a02:	4e 81       	ldd	r20, Y+6	; 0x06
    1a04:	5f 81       	ldd	r21, Y+7	; 0x07
    1a06:	41 30       	cpi	r20, 0x01	; 1
    1a08:	51 05       	cpc	r21, r1
    1a0a:	59 f1       	breq	.+86     	; 0x1a62 <DIO_u8GetPinValue+0xa2>
    1a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a10:	82 30       	cpi	r24, 0x02	; 2
    1a12:	91 05       	cpc	r25, r1
    1a14:	34 f4       	brge	.+12     	; 0x1a22 <DIO_u8GetPinValue+0x62>
    1a16:	2e 81       	ldd	r18, Y+6	; 0x06
    1a18:	3f 81       	ldd	r19, Y+7	; 0x07
    1a1a:	21 15       	cp	r18, r1
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	69 f0       	breq	.+26     	; 0x1a3a <DIO_u8GetPinValue+0x7a>
    1a20:	64 c0       	rjmp	.+200    	; 0x1aea <DIO_u8GetPinValue+0x12a>
    1a22:	4e 81       	ldd	r20, Y+6	; 0x06
    1a24:	5f 81       	ldd	r21, Y+7	; 0x07
    1a26:	42 30       	cpi	r20, 0x02	; 2
    1a28:	51 05       	cpc	r21, r1
    1a2a:	79 f1       	breq	.+94     	; 0x1a8a <DIO_u8GetPinValue+0xca>
    1a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a30:	83 30       	cpi	r24, 0x03	; 3
    1a32:	91 05       	cpc	r25, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <DIO_u8GetPinValue+0x78>
    1a36:	3d c0       	rjmp	.+122    	; 0x1ab2 <DIO_u8GetPinValue+0xf2>
    1a38:	58 c0       	rjmp	.+176    	; 0x1aea <DIO_u8GetPinValue+0x12a>
				{
				case DIO_PORTA: *copy_pu8PinValue = GET_BIT(PINA, copy_u8PinId);		break;
    1a3a:	e9 e3       	ldi	r30, 0x39	; 57
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a9 01       	movw	r20, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <DIO_u8GetPinValue+0x92>
    1a4e:	55 95       	asr	r21
    1a50:	47 95       	ror	r20
    1a52:	8a 95       	dec	r24
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <DIO_u8GetPinValue+0x8e>
    1a56:	ca 01       	movw	r24, r20
    1a58:	81 70       	andi	r24, 0x01	; 1
    1a5a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a5c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a5e:	80 83       	st	Z, r24
    1a60:	44 c0       	rjmp	.+136    	; 0x1aea <DIO_u8GetPinValue+0x12a>

				case DIO_PORTB: *copy_pu8PinValue = GET_BIT(PINB, copy_u8PinId);		break;
    1a62:	e6 e3       	ldi	r30, 0x36	; 54
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a9 01       	movw	r20, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_u8GetPinValue+0xba>
    1a76:	55 95       	asr	r21
    1a78:	47 95       	ror	r20
    1a7a:	8a 95       	dec	r24
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_u8GetPinValue+0xb6>
    1a7e:	ca 01       	movw	r24, r20
    1a80:	81 70       	andi	r24, 0x01	; 1
    1a82:	ec 81       	ldd	r30, Y+4	; 0x04
    1a84:	fd 81       	ldd	r31, Y+5	; 0x05
    1a86:	80 83       	st	Z, r24
    1a88:	30 c0       	rjmp	.+96     	; 0x1aea <DIO_u8GetPinValue+0x12a>

				case DIO_PORTC: *copy_pu8PinValue = GET_BIT(PINC, copy_u8PinId);		break;
    1a8a:	e3 e3       	ldi	r30, 0x33	; 51
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a9 01       	movw	r20, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_u8GetPinValue+0xe2>
    1a9e:	55 95       	asr	r21
    1aa0:	47 95       	ror	r20
    1aa2:	8a 95       	dec	r24
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_u8GetPinValue+0xde>
    1aa6:	ca 01       	movw	r24, r20
    1aa8:	81 70       	andi	r24, 0x01	; 1
    1aaa:	ec 81       	ldd	r30, Y+4	; 0x04
    1aac:	fd 81       	ldd	r31, Y+5	; 0x05
    1aae:	80 83       	st	Z, r24
    1ab0:	1c c0       	rjmp	.+56     	; 0x1aea <DIO_u8GetPinValue+0x12a>

				case DIO_PORTD: *copy_pu8PinValue = GET_BIT(PIND, copy_u8PinId);		break;
    1ab2:	e0 e3       	ldi	r30, 0x30	; 48
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_u8GetPinValue+0x10a>
    1ac6:	55 95       	asr	r21
    1ac8:	47 95       	ror	r20
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <DIO_u8GetPinValue+0x106>
    1ace:	ca 01       	movw	r24, r20
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ad6:	80 83       	st	Z, r24
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <DIO_u8GetPinValue+0x12a>
				}
			}
			else
				Local_u8ErrorState = DIO_E_PARAM_POINTER;
    1ada:	8c e0       	ldi	r24, 0x0C	; 12
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	05 c0       	rjmp	.+10     	; 0x1aea <DIO_u8GetPinValue+0x12a>
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
    1ae0:	8a e0       	ldi	r24, 0x0A	; 10
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <DIO_u8GetPinValue+0x12a>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1ae6:	8b e0       	ldi	r24, 0x0B	; 11
    1ae8:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aec:	27 96       	adiw	r28, 0x07	; 7
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue             (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <DIO_u8TogglePinValue+0x6>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <DIO_u8TogglePinValue+0x8>
    1b06:	0f 92       	push	r0
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
    1b0e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1b10:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <DIO_u8TogglePinValue+0x1c>
    1b18:	76 c0       	rjmp	.+236    	; 0x1c06 <DIO_u8TogglePinValue+0x108>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	88 30       	cpi	r24, 0x08	; 8
    1b1e:	08 f0       	brcs	.+2      	; 0x1b22 <DIO_u8TogglePinValue+0x24>
    1b20:	6f c0       	rjmp	.+222    	; 0x1c00 <DIO_u8TogglePinValue+0x102>
		{
			switch(copy_u8PortId)
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	3d 83       	std	Y+5, r19	; 0x05
    1b2a:	2c 83       	std	Y+4, r18	; 0x04
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	91 05       	cpc	r25, r1
    1b34:	49 f1       	breq	.+82     	; 0x1b88 <DIO_u8TogglePinValue+0x8a>
    1b36:	2c 81       	ldd	r18, Y+4	; 0x04
    1b38:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <DIO_u8TogglePinValue+0x4c>
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	61 f0       	breq	.+24     	; 0x1b60 <DIO_u8TogglePinValue+0x62>
    1b48:	60 c0       	rjmp	.+192    	; 0x1c0a <DIO_u8TogglePinValue+0x10c>
    1b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	71 f1       	breq	.+92     	; 0x1bb0 <DIO_u8TogglePinValue+0xb2>
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	e9 f1       	breq	.+122    	; 0x1bd8 <DIO_u8TogglePinValue+0xda>
    1b5e:	55 c0       	rjmp	.+170    	; 0x1c0a <DIO_u8TogglePinValue+0x10c>
			{
			case DIO_PORTA: TOG_BIT(PORTA, copy_u8PinId);		break;
    1b60:	ab e3       	ldi	r26, 0x3B	; 59
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	eb e3       	ldi	r30, 0x3B	; 59
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <DIO_u8TogglePinValue+0x80>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <DIO_u8TogglePinValue+0x7c>
    1b82:	84 27       	eor	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	41 c0       	rjmp	.+130    	; 0x1c0a <DIO_u8TogglePinValue+0x10c>

			case DIO_PORTB: TOG_BIT(PORTB, copy_u8PinId);		break;
    1b88:	a8 e3       	ldi	r26, 0x38	; 56
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e8 e3       	ldi	r30, 0x38	; 56
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <DIO_u8TogglePinValue+0xa8>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <DIO_u8TogglePinValue+0xa4>
    1baa:	84 27       	eor	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	2d c0       	rjmp	.+90     	; 0x1c0a <DIO_u8TogglePinValue+0x10c>

			case DIO_PORTC: TOG_BIT(PORTC, copy_u8PinId);		break;
    1bb0:	a5 e3       	ldi	r26, 0x35	; 53
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e5 e3       	ldi	r30, 0x35	; 53
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <DIO_u8TogglePinValue+0xd0>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <DIO_u8TogglePinValue+0xcc>
    1bd2:	84 27       	eor	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	19 c0       	rjmp	.+50     	; 0x1c0a <DIO_u8TogglePinValue+0x10c>

			case DIO_PORTD: TOG_BIT(PORTD, copy_u8PinId);		break;
    1bd8:	a2 e3       	ldi	r26, 0x32	; 50
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <DIO_u8TogglePinValue+0xf8>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <DIO_u8TogglePinValue+0xf4>
    1bfa:	84 27       	eor	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	05 c0       	rjmp	.+10     	; 0x1c0a <DIO_u8TogglePinValue+0x10c>
			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
    1c00:	8a e0       	ldi	r24, 0x0A	; 10
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <DIO_u8TogglePinValue+0x10c>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1c06:	8b e0       	ldi	r24, 0x0B	; 11
    1c08:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <DIO_u8ActivePinInPullUpResistance>:
u8 DIO_u8ActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <DIO_u8ActivePinInPullUpResistance+0x6>
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <DIO_u8ActivePinInPullUpResistance+0x8>
    1c24:	0f 92       	push	r0
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
    1c2c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1c2e:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	84 30       	cpi	r24, 0x04	; 4
    1c34:	08 f0       	brcs	.+2      	; 0x1c38 <DIO_u8ActivePinInPullUpResistance+0x1c>
    1c36:	c5 c0       	rjmp	.+394    	; 0x1dc2 <DIO_u8ActivePinInPullUpResistance+0x1a6>
	{
		if(copy_u8PinId >= DIO_PIN0 && copy_u8PinId <= DIO_PIN7)
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	88 30       	cpi	r24, 0x08	; 8
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <DIO_u8ActivePinInPullUpResistance+0x24>
    1c3e:	be c0       	rjmp	.+380    	; 0x1dbc <DIO_u8ActivePinInPullUpResistance+0x1a0>
		{
			switch(copy_u8PortId)
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	3d 83       	std	Y+5, r19	; 0x05
    1c48:	2c 83       	std	Y+4, r18	; 0x04
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	91 05       	cpc	r25, r1
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <DIO_u8ActivePinInPullUpResistance+0x3a>
    1c54:	3e c0       	rjmp	.+124    	; 0x1cd2 <DIO_u8ActivePinInPullUpResistance+0xb6>
    1c56:	2c 81       	ldd	r18, Y+4	; 0x04
    1c58:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <DIO_u8ActivePinInPullUpResistance+0x4e>
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	9d 81       	ldd	r25, Y+5	; 0x05
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	71 f0       	breq	.+28     	; 0x1c84 <DIO_u8ActivePinInPullUpResistance+0x68>
    1c68:	ae c0       	rjmp	.+348    	; 0x1dc6 <DIO_u8ActivePinInPullUpResistance+0x1aa>
    1c6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6e:	22 30       	cpi	r18, 0x02	; 2
    1c70:	31 05       	cpc	r19, r1
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <DIO_u8ActivePinInPullUpResistance+0x5a>
    1c74:	55 c0       	rjmp	.+170    	; 0x1d20 <DIO_u8ActivePinInPullUpResistance+0x104>
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7a:	83 30       	cpi	r24, 0x03	; 3
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <DIO_u8ActivePinInPullUpResistance+0x66>
    1c80:	76 c0       	rjmp	.+236    	; 0x1d6e <DIO_u8ActivePinInPullUpResistance+0x152>
    1c82:	a1 c0       	rjmp	.+322    	; 0x1dc6 <DIO_u8ActivePinInPullUpResistance+0x1aa>
			{
			case DIO_PORTA: CLR_BIT(DDRA, copy_u8PinId);		SET_BIT(PORTA,copy_u8PinId);		break;
    1c84:	aa e3       	ldi	r26, 0x3A	; 58
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	ea e3       	ldi	r30, 0x3A	; 58
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <DIO_u8ActivePinInPullUpResistance+0x84>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	2a 95       	dec	r18
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <DIO_u8ActivePinInPullUpResistance+0x80>
    1ca4:	80 95       	com	r24
    1ca6:	84 23       	and	r24, r20
    1ca8:	8c 93       	st	X, r24
    1caa:	ab e3       	ldi	r26, 0x3B	; 59
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e3       	ldi	r30, 0x3B	; 59
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_u8ActivePinInPullUpResistance+0xac>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_u8ActivePinInPullUpResistance+0xa8>
    1ccc:	84 2b       	or	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	7a c0       	rjmp	.+244    	; 0x1dc6 <DIO_u8ActivePinInPullUpResistance+0x1aa>

			case DIO_PORTB: CLR_BIT(DDRB, copy_u8PinId);		SET_BIT(PORTB,copy_u8PinId);		break;
    1cd2:	a7 e3       	ldi	r26, 0x37	; 55
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e7 e3       	ldi	r30, 0x37	; 55
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <DIO_u8ActivePinInPullUpResistance+0xd2>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	2a 95       	dec	r18
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <DIO_u8ActivePinInPullUpResistance+0xce>
    1cf2:	80 95       	com	r24
    1cf4:	84 23       	and	r24, r20
    1cf6:	8c 93       	st	X, r24
    1cf8:	a8 e3       	ldi	r26, 0x38	; 56
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e8 e3       	ldi	r30, 0x38	; 56
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_u8ActivePinInPullUpResistance+0xfa>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_u8ActivePinInPullUpResistance+0xf6>
    1d1a:	84 2b       	or	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	53 c0       	rjmp	.+166    	; 0x1dc6 <DIO_u8ActivePinInPullUpResistance+0x1aa>

			case DIO_PORTC: CLR_BIT(DDRC, copy_u8PinId);		SET_BIT(PORTC,copy_u8PinId);		break;
    1d20:	a4 e3       	ldi	r26, 0x34	; 52
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e4 e3       	ldi	r30, 0x34	; 52
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_u8ActivePinInPullUpResistance+0x120>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	2a 95       	dec	r18
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_u8ActivePinInPullUpResistance+0x11c>
    1d40:	80 95       	com	r24
    1d42:	84 23       	and	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	a5 e3       	ldi	r26, 0x35	; 53
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e5 e3       	ldi	r30, 0x35	; 53
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <DIO_u8ActivePinInPullUpResistance+0x148>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <DIO_u8ActivePinInPullUpResistance+0x144>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	2c c0       	rjmp	.+88     	; 0x1dc6 <DIO_u8ActivePinInPullUpResistance+0x1aa>

			case DIO_PORTD: CLR_BIT(DDRD, copy_u8PinId);		SET_BIT(PORTD,copy_u8PinId);		break;
    1d6e:	a1 e3       	ldi	r26, 0x31	; 49
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e1 e3       	ldi	r30, 0x31	; 49
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <DIO_u8ActivePinInPullUpResistance+0x16e>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	2a 95       	dec	r18
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <DIO_u8ActivePinInPullUpResistance+0x16a>
    1d8e:	80 95       	com	r24
    1d90:	84 23       	and	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	a2 e3       	ldi	r26, 0x32	; 50
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e2 e3       	ldi	r30, 0x32	; 50
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 2e       	mov	r0, r18
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <DIO_u8ActivePinInPullUpResistance+0x196>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <DIO_u8ActivePinInPullUpResistance+0x192>
    1db6:	84 2b       	or	r24, r20
    1db8:	8c 93       	st	X, r24
    1dba:	05 c0       	rjmp	.+10     	; 0x1dc6 <DIO_u8ActivePinInPullUpResistance+0x1aa>
			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PIN_ID;
    1dbc:	8a e0       	ldi	r24, 0x0A	; 10
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_u8ActivePinInPullUpResistance+0x1aa>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1dc2:	8b e0       	ldi	r24, 0x0B	; 11
    1dc4:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <DIO_u8SetPortDirection>:


/* Port Apis */
u8 DIO_u8SetPortDirection            (u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <DIO_u8SetPortDirection+0x6>
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <DIO_u8SetPortDirection+0x8>
    1de0:	0f 92       	push	r0
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	8a 83       	std	Y+2, r24	; 0x02
    1de8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1dea:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	e0 f5       	brcc	.+120    	; 0x1e6a <DIO_u8SetPortDirection+0x92>
	{
		if(copy_u8PortDirection == DIO_PORT_INPUT || copy_u8PortDirection == DIO_PORT_OUTPUT)
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	88 23       	and	r24, r24
    1df6:	19 f0       	breq	.+6      	; 0x1dfe <DIO_u8SetPortDirection+0x26>
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1dfc:	99 f5       	brne	.+102    	; 0x1e64 <DIO_u8SetPortDirection+0x8c>
		{
			switch(copy_u8PortId)
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	3d 83       	std	Y+5, r19	; 0x05
    1e06:	2c 83       	std	Y+4, r18	; 0x04
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	91 05       	cpc	r25, r1
    1e10:	d1 f0       	breq	.+52     	; 0x1e46 <DIO_u8SetPortDirection+0x6e>
    1e12:	2c 81       	ldd	r18, Y+4	; 0x04
    1e14:	3d 81       	ldd	r19, Y+5	; 0x05
    1e16:	22 30       	cpi	r18, 0x02	; 2
    1e18:	31 05       	cpc	r19, r1
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <DIO_u8SetPortDirection+0x4e>
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	61 f0       	breq	.+24     	; 0x1e3c <DIO_u8SetPortDirection+0x64>
    1e24:	24 c0       	rjmp	.+72     	; 0x1e6e <DIO_u8SetPortDirection+0x96>
    1e26:	2c 81       	ldd	r18, Y+4	; 0x04
    1e28:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2a:	22 30       	cpi	r18, 0x02	; 2
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	81 f0       	breq	.+32     	; 0x1e50 <DIO_u8SetPortDirection+0x78>
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	9d 81       	ldd	r25, Y+5	; 0x05
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	91 05       	cpc	r25, r1
    1e38:	81 f0       	breq	.+32     	; 0x1e5a <DIO_u8SetPortDirection+0x82>
    1e3a:	19 c0       	rjmp	.+50     	; 0x1e6e <DIO_u8SetPortDirection+0x96>
			{
			case DIO_PORTA: DDRA = copy_u8PortDirection;		break;
    1e3c:	ea e3       	ldi	r30, 0x3A	; 58
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	80 83       	st	Z, r24
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <DIO_u8SetPortDirection+0x96>

			case DIO_PORTB: DDRB = copy_u8PortDirection;		break;
    1e46:	e7 e3       	ldi	r30, 0x37	; 55
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	80 83       	st	Z, r24
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <DIO_u8SetPortDirection+0x96>

			case DIO_PORTC: DDRC = copy_u8PortDirection;		break;
    1e50:	e4 e3       	ldi	r30, 0x34	; 52
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	80 83       	st	Z, r24
    1e58:	0a c0       	rjmp	.+20     	; 0x1e6e <DIO_u8SetPortDirection+0x96>

			case DIO_PORTD: DDRD = copy_u8PortDirection;		break;
    1e5a:	e1 e3       	ldi	r30, 0x31	; 49
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	80 83       	st	Z, r24
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <DIO_u8SetPortDirection+0x96>
			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;
    1e64:	8f e0       	ldi	r24, 0x0F	; 15
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <DIO_u8SetPortDirection+0x96>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1e6a:	8b e0       	ldi	r24, 0x0B	; 11
    1e6c:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue                (u8 copy_u8PortId, u8 copy_u8PortValue)
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <DIO_u8SetPortValue+0x6>
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <DIO_u8SetPortValue+0x8>
    1e88:	0f 92       	push	r0
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
    1e90:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1e92:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	84 30       	cpi	r24, 0x04	; 4
    1e98:	98 f5       	brcc	.+102    	; 0x1f00 <DIO_u8SetPortValue+0x80>
	{
		if(copy_u8PortValue >= DIO_PORT_LOW && copy_u8PortValue <= DIO_PORT_HIGH)
		{
			switch(copy_u8PortId)
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3d 83       	std	Y+5, r19	; 0x05
    1ea2:	2c 83       	std	Y+4, r18	; 0x04
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	91 05       	cpc	r25, r1
    1eac:	d1 f0       	breq	.+52     	; 0x1ee2 <DIO_u8SetPortValue+0x62>
    1eae:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <DIO_u8SetPortValue+0x42>
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	61 f0       	breq	.+24     	; 0x1ed8 <DIO_u8SetPortValue+0x58>
    1ec0:	21 c0       	rjmp	.+66     	; 0x1f04 <DIO_u8SetPortValue+0x84>
    1ec2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec6:	22 30       	cpi	r18, 0x02	; 2
    1ec8:	31 05       	cpc	r19, r1
    1eca:	81 f0       	breq	.+32     	; 0x1eec <DIO_u8SetPortValue+0x6c>
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed0:	83 30       	cpi	r24, 0x03	; 3
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	81 f0       	breq	.+32     	; 0x1ef6 <DIO_u8SetPortValue+0x76>
    1ed6:	16 c0       	rjmp	.+44     	; 0x1f04 <DIO_u8SetPortValue+0x84>
			{
			case DIO_PORTA: PORTA = copy_u8PortValue;		break;
    1ed8:	eb e3       	ldi	r30, 0x3B	; 59
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	80 83       	st	Z, r24
    1ee0:	11 c0       	rjmp	.+34     	; 0x1f04 <DIO_u8SetPortValue+0x84>

			case DIO_PORTB: PORTB = copy_u8PortValue;		break;
    1ee2:	e8 e3       	ldi	r30, 0x38	; 56
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	80 83       	st	Z, r24
    1eea:	0c c0       	rjmp	.+24     	; 0x1f04 <DIO_u8SetPortValue+0x84>

			case DIO_PORTC: PORTC = copy_u8PortValue;		break;
    1eec:	e5 e3       	ldi	r30, 0x35	; 53
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	80 83       	st	Z, r24
    1ef4:	07 c0       	rjmp	.+14     	; 0x1f04 <DIO_u8SetPortValue+0x84>

			case DIO_PORTD: PORTD = copy_u8PortValue;		break;
    1ef6:	e2 e3       	ldi	r30, 0x32	; 50
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	80 83       	st	Z, r24
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <DIO_u8SetPortValue+0x84>
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1f00:	8b e0       	ldi	r24, 0x0B	; 11
    1f02:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue                (u8 copy_u8PortId, u8* copy_pu8PortValue)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <DIO_u8GetPortValue+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <DIO_u8GetPortValue+0x8>
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <DIO_u8GetPortValue+0xa>
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	8a 83       	std	Y+2, r24	; 0x02
    1f26:	7c 83       	std	Y+4, r23	; 0x04
    1f28:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1f2a:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	84 30       	cpi	r24, 0x04	; 4
    1f30:	08 f0       	brcs	.+2      	; 0x1f34 <DIO_u8GetPortValue+0x1e>
    1f32:	42 c0       	rjmp	.+132    	; 0x1fb8 <DIO_u8GetPortValue+0xa2>
	{
		if(copy_pu8PortValue != NULL)
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	d9 f1       	breq	.+118    	; 0x1fb2 <DIO_u8GetPortValue+0x9c>
		{
			switch(copy_u8PortId)
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	3e 83       	std	Y+6, r19	; 0x06
    1f44:	2d 83       	std	Y+5, r18	; 0x05
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	e1 f0       	breq	.+56     	; 0x1f88 <DIO_u8GetPortValue+0x72>
    1f50:	2d 81       	ldd	r18, Y+5	; 0x05
    1f52:	3e 81       	ldd	r19, Y+6	; 0x06
    1f54:	22 30       	cpi	r18, 0x02	; 2
    1f56:	31 05       	cpc	r19, r1
    1f58:	2c f4       	brge	.+10     	; 0x1f64 <DIO_u8GetPortValue+0x4e>
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	61 f0       	breq	.+24     	; 0x1f7a <DIO_u8GetPortValue+0x64>
    1f62:	2c c0       	rjmp	.+88     	; 0x1fbc <DIO_u8GetPortValue+0xa6>
    1f64:	2d 81       	ldd	r18, Y+5	; 0x05
    1f66:	3e 81       	ldd	r19, Y+6	; 0x06
    1f68:	22 30       	cpi	r18, 0x02	; 2
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	a1 f0       	breq	.+40     	; 0x1f96 <DIO_u8GetPortValue+0x80>
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	83 30       	cpi	r24, 0x03	; 3
    1f74:	91 05       	cpc	r25, r1
    1f76:	b1 f0       	breq	.+44     	; 0x1fa4 <DIO_u8GetPortValue+0x8e>
    1f78:	21 c0       	rjmp	.+66     	; 0x1fbc <DIO_u8GetPortValue+0xa6>
			{
			case DIO_PORTA: *copy_pu8PortValue = PINA;		break;
    1f7a:	e9 e3       	ldi	r30, 0x39	; 57
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	eb 81       	ldd	r30, Y+3	; 0x03
    1f82:	fc 81       	ldd	r31, Y+4	; 0x04
    1f84:	80 83       	st	Z, r24
    1f86:	1a c0       	rjmp	.+52     	; 0x1fbc <DIO_u8GetPortValue+0xa6>

			case DIO_PORTB: *copy_pu8PortValue = PINB;		break;
    1f88:	e6 e3       	ldi	r30, 0x36	; 54
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f90:	fc 81       	ldd	r31, Y+4	; 0x04
    1f92:	80 83       	st	Z, r24
    1f94:	13 c0       	rjmp	.+38     	; 0x1fbc <DIO_u8GetPortValue+0xa6>

			case DIO_PORTC: *copy_pu8PortValue = PINC;		break;
    1f96:	e3 e3       	ldi	r30, 0x33	; 51
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa0:	80 83       	st	Z, r24
    1fa2:	0c c0       	rjmp	.+24     	; 0x1fbc <DIO_u8GetPortValue+0xa6>

			case DIO_PORTD: *copy_pu8PortValue = PIND;		break;
    1fa4:	e0 e3       	ldi	r30, 0x30	; 48
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	eb 81       	ldd	r30, Y+3	; 0x03
    1fac:	fc 81       	ldd	r31, Y+4	; 0x04
    1fae:	80 83       	st	Z, r24
    1fb0:	05 c0       	rjmp	.+10     	; 0x1fbc <DIO_u8GetPortValue+0xa6>
			}
		}
		else
			Local_u8ErrorState = DIO_E_PARAM_POINTER;
    1fb2:	8c e0       	ldi	r24, 0x0C	; 12
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <DIO_u8GetPortValue+0xa6>
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1fb8:	8b e0       	ldi	r24, 0x0B	; 11
    1fba:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fbe:	26 96       	adiw	r28, 0x06	; 6
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <DIO_u8TogglePortValue>:

u8 DIO_u8TogglePortValue             (u8 copy_u8PortId)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <DIO_u8TogglePortValue+0x6>
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <DIO_u8TogglePortValue+0x8>
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1fde:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	84 30       	cpi	r24, 0x04	; 4
    1fe4:	08 f0       	brcs	.+2      	; 0x1fe8 <DIO_u8TogglePortValue+0x18>
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <DIO_u8TogglePortValue+0x96>
	{
		switch(copy_u8PortId)
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	3c 83       	std	Y+4, r19	; 0x04
    1ff0:	2b 83       	std	Y+3, r18	; 0x03
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	e9 f0       	breq	.+58     	; 0x2036 <DIO_u8TogglePortValue+0x66>
    1ffc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    2000:	22 30       	cpi	r18, 0x02	; 2
    2002:	31 05       	cpc	r19, r1
    2004:	2c f4       	brge	.+10     	; 0x2010 <DIO_u8TogglePortValue+0x40>
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	61 f0       	breq	.+24     	; 0x2026 <DIO_u8TogglePortValue+0x56>
    200e:	2d c0       	rjmp	.+90     	; 0x206a <DIO_u8TogglePortValue+0x9a>
    2010:	2b 81       	ldd	r18, Y+3	; 0x03
    2012:	3c 81       	ldd	r19, Y+4	; 0x04
    2014:	22 30       	cpi	r18, 0x02	; 2
    2016:	31 05       	cpc	r19, r1
    2018:	b1 f0       	breq	.+44     	; 0x2046 <DIO_u8TogglePortValue+0x76>
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	83 30       	cpi	r24, 0x03	; 3
    2020:	91 05       	cpc	r25, r1
    2022:	c9 f0       	breq	.+50     	; 0x2056 <DIO_u8TogglePortValue+0x86>
    2024:	22 c0       	rjmp	.+68     	; 0x206a <DIO_u8TogglePortValue+0x9a>
		{
		case DIO_PORTA: PORTA ^= 0xFF;		break;
    2026:	ab e3       	ldi	r26, 0x3B	; 59
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	eb e3       	ldi	r30, 0x3B	; 59
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 95       	com	r24
    2032:	8c 93       	st	X, r24
    2034:	1a c0       	rjmp	.+52     	; 0x206a <DIO_u8TogglePortValue+0x9a>

		case DIO_PORTB: PORTB ^= 0xFF;		break;
    2036:	a8 e3       	ldi	r26, 0x38	; 56
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e8 e3       	ldi	r30, 0x38	; 56
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	80 95       	com	r24
    2042:	8c 93       	st	X, r24
    2044:	12 c0       	rjmp	.+36     	; 0x206a <DIO_u8TogglePortValue+0x9a>

		case DIO_PORTC: PORTC ^= 0xFF;		break;
    2046:	a5 e3       	ldi	r26, 0x35	; 53
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e5 e3       	ldi	r30, 0x35	; 53
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	80 95       	com	r24
    2052:	8c 93       	st	X, r24
    2054:	0a c0       	rjmp	.+20     	; 0x206a <DIO_u8TogglePortValue+0x9a>

		case DIO_PORTD: PORTD ^= 0xFF;		break;
    2056:	a2 e3       	ldi	r26, 0x32	; 50
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e2 e3       	ldi	r30, 0x32	; 50
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	80 95       	com	r24
    2062:	8c 93       	st	X, r24
    2064:	02 c0       	rjmp	.+4      	; 0x206a <DIO_u8TogglePortValue+0x9a>
		}
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    2066:	8b e0       	ldi	r24, 0x0B	; 11
    2068:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    206a:	89 81       	ldd	r24, Y+1	; 0x01
}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <DIO_u8ActivePortInPullUpResistance>:

u8 DIO_u8ActivePortInPullUpResistance(u8 copy_u8PortId)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <DIO_u8ActivePortInPullUpResistance+0x6>
    2080:	00 d0       	rcall	.+0      	; 0x2082 <DIO_u8ActivePortInPullUpResistance+0x8>
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2088:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8PortId >= DIO_PORTA && copy_u8PortId <= DIO_PORTD)
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	84 30       	cpi	r24, 0x04	; 4
    208e:	08 f0       	brcs	.+2      	; 0x2092 <DIO_u8ActivePortInPullUpResistance+0x18>
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <DIO_u8ActivePortInPullUpResistance+0x96>
	{
		switch(copy_u8PortId)
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	3c 83       	std	Y+4, r19	; 0x04
    209a:	2b 83       	std	Y+3, r18	; 0x03
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	91 05       	cpc	r25, r1
    20a4:	e9 f0       	breq	.+58     	; 0x20e0 <DIO_u8ActivePortInPullUpResistance+0x66>
    20a6:	2b 81       	ldd	r18, Y+3	; 0x03
    20a8:	3c 81       	ldd	r19, Y+4	; 0x04
    20aa:	22 30       	cpi	r18, 0x02	; 2
    20ac:	31 05       	cpc	r19, r1
    20ae:	2c f4       	brge	.+10     	; 0x20ba <DIO_u8ActivePortInPullUpResistance+0x40>
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	61 f0       	breq	.+24     	; 0x20d0 <DIO_u8ActivePortInPullUpResistance+0x56>
    20b8:	2d c0       	rjmp	.+90     	; 0x2114 <DIO_u8ActivePortInPullUpResistance+0x9a>
    20ba:	2b 81       	ldd	r18, Y+3	; 0x03
    20bc:	3c 81       	ldd	r19, Y+4	; 0x04
    20be:	22 30       	cpi	r18, 0x02	; 2
    20c0:	31 05       	cpc	r19, r1
    20c2:	b1 f0       	breq	.+44     	; 0x20f0 <DIO_u8ActivePortInPullUpResistance+0x76>
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	9c 81       	ldd	r25, Y+4	; 0x04
    20c8:	83 30       	cpi	r24, 0x03	; 3
    20ca:	91 05       	cpc	r25, r1
    20cc:	c9 f0       	breq	.+50     	; 0x2100 <DIO_u8ActivePortInPullUpResistance+0x86>
    20ce:	22 c0       	rjmp	.+68     	; 0x2114 <DIO_u8ActivePortInPullUpResistance+0x9a>
		{
		case DIO_PORTA: DDRA = DIO_PORT_LOW;		PORTA = DIO_PORT_HIGH;		break;
    20d0:	ea e3       	ldi	r30, 0x3A	; 58
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	10 82       	st	Z, r1
    20d6:	eb e3       	ldi	r30, 0x3B	; 59
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	8f ef       	ldi	r24, 0xFF	; 255
    20dc:	80 83       	st	Z, r24
    20de:	1a c0       	rjmp	.+52     	; 0x2114 <DIO_u8ActivePortInPullUpResistance+0x9a>

		case DIO_PORTB: DDRB = DIO_PORT_LOW;		PORTB = DIO_PORT_HIGH;		break;
    20e0:	e7 e3       	ldi	r30, 0x37	; 55
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	10 82       	st	Z, r1
    20e6:	e8 e3       	ldi	r30, 0x38	; 56
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	8f ef       	ldi	r24, 0xFF	; 255
    20ec:	80 83       	st	Z, r24
    20ee:	12 c0       	rjmp	.+36     	; 0x2114 <DIO_u8ActivePortInPullUpResistance+0x9a>

		case DIO_PORTC: DDRC = DIO_PORT_LOW;		PORTC = DIO_PORT_HIGH;		break;
    20f0:	e4 e3       	ldi	r30, 0x34	; 52
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	10 82       	st	Z, r1
    20f6:	e5 e3       	ldi	r30, 0x35	; 53
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
    20fc:	80 83       	st	Z, r24
    20fe:	0a c0       	rjmp	.+20     	; 0x2114 <DIO_u8ActivePortInPullUpResistance+0x9a>

		case DIO_PORTD: DDRD = DIO_PORT_LOW;		PORTD = DIO_PORT_HIGH;		break;
    2100:	e1 e3       	ldi	r30, 0x31	; 49
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	10 82       	st	Z, r1
    2106:	e2 e3       	ldi	r30, 0x32	; 50
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	8f ef       	ldi	r24, 0xFF	; 255
    210c:	80 83       	st	Z, r24
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <DIO_u8ActivePortInPullUpResistance+0x9a>
		}
	}
	else
		Local_u8ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    2110:	8b e0       	ldi	r24, 0x0B	; 11
    2112:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2114:	89 81       	ldd	r24, Y+1	; 0x01
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <GI_voidInit>:
#include "GI_interface.h"
#include "GI_private.h"
#include "GI_config.h"

void GI_voidInit(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
#if GI_EN == GI_ENABLE
	SET_BIT(SREG,GIE);
#elif GI_EN == GI_DISABLE
	CLR_BIT(SREG,GIE);
    212c:	af e5       	ldi	r26, 0x5F	; 95
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	ef e5       	ldi	r30, 0x5F	; 95
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	8f 77       	andi	r24, 0x7F	; 127
    2138:	8c 93       	st	X, r24
#else
#error "Wrong GIE selection"
#endif
}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <GI_voidEnable>:

void GI_voidEnable (void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
    2148:	af e5       	ldi	r26, 0x5F	; 95
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ef e5       	ldi	r30, 0x5F	; 95
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	80 68       	ori	r24, 0x80	; 128
    2154:	8c 93       	st	X, r24
}
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <GI_voidDisable>:

void GI_voidDisable (void)
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GIE);
    2164:	af e5       	ldi	r26, 0x5F	; 95
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	ef e5       	ldi	r30, 0x5F	; 95
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	8f 77       	andi	r24, 0x7F	; 127
    2170:	8c 93       	st	X, r24
}
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_config.h"


/********************************				Function Definitions				********************************/
u8 KEYPAD_u8GetPressedKey (void)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <KEYPAD_u8GetPressedKey+0x6>
    217e:	00 d0       	rcall	.+0      	; 0x2180 <KEYPAD_u8GetPressedKey+0x8>
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PinState, Local_u8PressedKey = KEYPAD_NOT_PRESSED;
    2186:	1b 82       	std	Y+3, r1	; 0x03
		/*Deactivate current ROW*/
		DIO_u8SetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], DIO_PIN_HIGH);
	}
#elif KEYPAD_CONTROL == COL_CONTROL

	for(u8 Local_u8Col = 0; Local_u8Col < 4; Local_u8Col++)
    2188:	1a 82       	std	Y+2, r1	; 0x02
    218a:	7a c0       	rjmp	.+244    	; 0x2280 <KEYPAD_u8GetPressedKey+0x108>
	{
		/*Activate current Column*/
		DIO_u8SetPinValue(Local_u8ColPorts[Local_u8Col], Local_u8ColPins[Local_u8Col], DIO_PIN_LOW);
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	fc 01       	movw	r30, r24
    2194:	eb 5a       	subi	r30, 0xAB	; 171
    2196:	fe 4f       	sbci	r31, 0xFE	; 254
    2198:	20 81       	ld	r18, Z
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	fc 01       	movw	r30, r24
    21a2:	ef 5a       	subi	r30, 0xAF	; 175
    21a4:	fe 4f       	sbci	r31, 0xFE	; 254
    21a6:	90 81       	ld	r25, Z
    21a8:	82 2f       	mov	r24, r18
    21aa:	69 2f       	mov	r22, r25
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>

		for(u8 Local_u8Row = 0; Local_u8Row < 4; Local_u8Row++)
    21b2:	19 82       	std	Y+1, r1	; 0x01
    21b4:	4b c0       	rjmp	.+150    	; 0x224c <KEYPAD_u8GetPressedKey+0xd4>
		{
			/*Read current Row*/
			DIO_u8GetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], &Local_u8PinState);
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	88 2f       	mov	r24, r24
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	fc 01       	movw	r30, r24
    21be:	e3 5b       	subi	r30, 0xB3	; 179
    21c0:	fe 4f       	sbci	r31, 0xFE	; 254
    21c2:	40 81       	ld	r20, Z
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	fc 01       	movw	r30, r24
    21cc:	e7 5b       	subi	r30, 0xB7	; 183
    21ce:	fe 4f       	sbci	r31, 0xFE	; 254
    21d0:	90 81       	ld	r25, Z
    21d2:	9e 01       	movw	r18, r28
    21d4:	2c 5f       	subi	r18, 0xFC	; 252
    21d6:	3f 4f       	sbci	r19, 0xFF	; 255
    21d8:	84 2f       	mov	r24, r20
    21da:	69 2f       	mov	r22, r25
    21dc:	a9 01       	movw	r20, r18
    21de:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_u8GetPinValue>
			/*check if the switch is pressed*/
			if(Local_u8PinState == DIO_PIN_LOW)
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	88 23       	and	r24, r24
    21e6:	79 f5       	brne	.+94     	; 0x2246 <KEYPAD_u8GetPressedKey+0xce>
			{
				/*get the value*/
				Local_u8PressedKey = Local_u8Array[Local_u8Row][Local_u8Col];
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	48 2f       	mov	r20, r24
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	ca 01       	movw	r24, r20
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	82 0f       	add	r24, r18
    2200:	93 1f       	adc	r25, r19
    2202:	fc 01       	movw	r30, r24
    2204:	e7 5c       	subi	r30, 0xC7	; 199
    2206:	fe 4f       	sbci	r31, 0xFE	; 254
    2208:	80 81       	ld	r24, Z
    220a:	8b 83       	std	Y+3, r24	; 0x03
    220c:	16 c0       	rjmp	.+44     	; 0x223a <KEYPAD_u8GetPressedKey+0xc2>
				/*Polling to make sure it is pressed one time (single pressed)*/
				while(Local_u8PinState == DIO_PIN_LOW)
				{
					DIO_u8GetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], &Local_u8PinState);
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	fc 01       	movw	r30, r24
    2216:	e3 5b       	subi	r30, 0xB3	; 179
    2218:	fe 4f       	sbci	r31, 0xFE	; 254
    221a:	40 81       	ld	r20, Z
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	fc 01       	movw	r30, r24
    2224:	e7 5b       	subi	r30, 0xB7	; 183
    2226:	fe 4f       	sbci	r31, 0xFE	; 254
    2228:	90 81       	ld	r25, Z
    222a:	9e 01       	movw	r18, r28
    222c:	2c 5f       	subi	r18, 0xFC	; 252
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	84 2f       	mov	r24, r20
    2232:	69 2f       	mov	r22, r25
    2234:	a9 01       	movw	r20, r18
    2236:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_u8GetPinValue>
			if(Local_u8PinState == DIO_PIN_LOW)
			{
				/*get the value*/
				Local_u8PressedKey = Local_u8Array[Local_u8Row][Local_u8Col];
				/*Polling to make sure it is pressed one time (single pressed)*/
				while(Local_u8PinState == DIO_PIN_LOW)
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	88 23       	and	r24, r24
    223e:	39 f3       	breq	.-50     	; 0x220e <KEYPAD_u8GetPressedKey+0x96>
				{
					DIO_u8GetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], &Local_u8PinState);
				}

				return Local_u8PressedKey;
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	23 c0       	rjmp	.+70     	; 0x228c <KEYPAD_u8GetPressedKey+0x114>
	for(u8 Local_u8Col = 0; Local_u8Col < 4; Local_u8Col++)
	{
		/*Activate current Column*/
		DIO_u8SetPinValue(Local_u8ColPorts[Local_u8Col], Local_u8ColPins[Local_u8Col], DIO_PIN_LOW);

		for(u8 Local_u8Row = 0; Local_u8Row < 4; Local_u8Row++)
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	8f 5f       	subi	r24, 0xFF	; 255
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	84 30       	cpi	r24, 0x04	; 4
    2250:	08 f4       	brcc	.+2      	; 0x2254 <KEYPAD_u8GetPressedKey+0xdc>
    2252:	b1 cf       	rjmp	.-158    	; 0x21b6 <KEYPAD_u8GetPressedKey+0x3e>
			}

		}

		/*Deactivate current Column*/
		DIO_u8SetPinValue(Local_u8ColPorts[Local_u8Col], Local_u8ColPins[Local_u8Col], DIO_PIN_HIGH);
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	fc 01       	movw	r30, r24
    225c:	eb 5a       	subi	r30, 0xAB	; 171
    225e:	fe 4f       	sbci	r31, 0xFE	; 254
    2260:	20 81       	ld	r18, Z
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	fc 01       	movw	r30, r24
    226a:	ef 5a       	subi	r30, 0xAF	; 175
    226c:	fe 4f       	sbci	r31, 0xFE	; 254
    226e:	90 81       	ld	r25, Z
    2270:	82 2f       	mov	r24, r18
    2272:	69 2f       	mov	r22, r25
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
		/*Deactivate current ROW*/
		DIO_u8SetPinValue(Local_u8RowPorts[Local_u8Row], Local_u8RowPins[Local_u8Row], DIO_PIN_HIGH);
	}
#elif KEYPAD_CONTROL == COL_CONTROL

	for(u8 Local_u8Col = 0; Local_u8Col < 4; Local_u8Col++)
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	8f 5f       	subi	r24, 0xFF	; 255
    227e:	8a 83       	std	Y+2, r24	; 0x02
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	08 f4       	brcc	.+2      	; 0x2288 <KEYPAD_u8GetPressedKey+0x110>
    2286:	82 cf       	rjmp	.-252    	; 0x218c <KEYPAD_u8GetPressedKey+0x14>
		DIO_u8SetPinValue(Local_u8ColPorts[Local_u8Col], Local_u8ColPins[Local_u8Col], DIO_PIN_HIGH);
	}

#endif

	return Local_u8PressedKey;
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	8d 83       	std	Y+5, r24	; 0x05
    228c:	8d 81       	ldd	r24, Y+5	; 0x05

}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <LCD_voidInit>:
#include "LCD_private.h"


/********************************				Function Definitions				********************************/
void LCD_voidInit(void)
{
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	c6 55       	subi	r28, 0x56	; 86
    22ac:	d0 40       	sbci	r29, 0x00	; 0
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	fe 01       	movw	r30, r28
    22ba:	ed 5a       	subi	r30, 0xAD	; 173
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	a0 e2       	ldi	r26, 0x20	; 32
    22c4:	b2 e4       	ldi	r27, 0x42	; 66
    22c6:	80 83       	st	Z, r24
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	a2 83       	std	Z+2, r26	; 0x02
    22cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ce:	8e 01       	movw	r16, r28
    22d0:	01 5b       	subi	r16, 0xB1	; 177
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	fe 01       	movw	r30, r28
    22d6:	ed 5a       	subi	r30, 0xAD	; 173
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4a e7       	ldi	r20, 0x7A	; 122
    22e8:	55 e4       	ldi	r21, 0x45	; 69
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	f8 01       	movw	r30, r16
    22f4:	80 83       	st	Z, r24
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	a2 83       	std	Z+2, r26	; 0x02
    22fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22fc:	fe 01       	movw	r30, r28
    22fe:	e1 5b       	subi	r30, 0xB1	; 177
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	44 f4       	brge	.+16     	; 0x232a <LCD_voidInit+0x8c>
		__ticks = 1;
    231a:	fe 01       	movw	r30, r28
    231c:	e3 5b       	subi	r30, 0xB3	; 179
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
    2328:	64 c0       	rjmp	.+200    	; 0x23f2 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    232a:	fe 01       	movw	r30, r28
    232c:	e1 5b       	subi	r30, 0xB1	; 177
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	0c f0       	brlt	.+2      	; 0x234a <LCD_voidInit+0xac>
    2348:	43 c0       	rjmp	.+134    	; 0x23d0 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234a:	fe 01       	movw	r30, r28
    234c:	ed 5a       	subi	r30, 0xAD	; 173
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e2       	ldi	r20, 0x20	; 32
    235e:	51 e4       	ldi	r21, 0x41	; 65
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8e 01       	movw	r16, r28
    236a:	03 5b       	subi	r16, 0xB3	; 179
    236c:	1f 4f       	sbci	r17, 0xFF	; 255
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	f8 01       	movw	r30, r16
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	80 83       	st	Z, r24
    2380:	1f c0       	rjmp	.+62     	; 0x23c0 <LCD_voidInit+0x122>
    2382:	fe 01       	movw	r30, r28
    2384:	e5 5b       	subi	r30, 0xB5	; 181
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 e9       	ldi	r24, 0x90	; 144
    238a:	91 e0       	ldi	r25, 0x01	; 1
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2390:	fe 01       	movw	r30, r28
    2392:	e5 5b       	subi	r30, 0xB5	; 181
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <LCD_voidInit+0xfc>
    239e:	fe 01       	movw	r30, r28
    23a0:	e5 5b       	subi	r30, 0xB5	; 181
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	de 01       	movw	r26, r28
    23aa:	a3 5b       	subi	r26, 0xB3	; 179
    23ac:	bf 4f       	sbci	r27, 0xFF	; 255
    23ae:	fe 01       	movw	r30, r28
    23b0:	e3 5b       	subi	r30, 0xB3	; 179
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	91 81       	ldd	r25, Z+1	; 0x01
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	9c 93       	st	X, r25
    23be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c0:	fe 01       	movw	r30, r28
    23c2:	e3 5b       	subi	r30, 0xB3	; 179
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	d1 f6       	brne	.-76     	; 0x2382 <LCD_voidInit+0xe4>
    23ce:	27 c0       	rjmp	.+78     	; 0x241e <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	8e 01       	movw	r16, r28
    23d2:	03 5b       	subi	r16, 0xB3	; 179
    23d4:	1f 4f       	sbci	r17, 0xFF	; 255
    23d6:	fe 01       	movw	r30, r28
    23d8:	e1 5b       	subi	r30, 0xB1	; 177
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	60 81       	ld	r22, Z
    23de:	71 81       	ldd	r23, Z+1	; 0x01
    23e0:	82 81       	ldd	r24, Z+2	; 0x02
    23e2:	93 81       	ldd	r25, Z+3	; 0x03
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	f8 01       	movw	r30, r16
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
    23f2:	de 01       	movw	r26, r28
    23f4:	a7 5b       	subi	r26, 0xB7	; 183
    23f6:	bf 4f       	sbci	r27, 0xFF	; 255
    23f8:	fe 01       	movw	r30, r28
    23fa:	e3 5b       	subi	r30, 0xB3	; 179
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	8d 93       	st	X+, r24
    2404:	9c 93       	st	X, r25
    2406:	fe 01       	movw	r30, r28
    2408:	e7 5b       	subi	r30, 0xB7	; 183
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <LCD_voidInit+0x172>
    2414:	fe 01       	movw	r30, r28
    2416:	e7 5b       	subi	r30, 0xB7	; 183
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24

#elif LCD_InitMode == FourBit_Init
	/*Wait for more than 30ms*/
	_delay_ms(40);

	LCD_voidSendCommand(0x02);
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
	LCD_voidSendCommand(0x02);
    2424:	82 e0       	ldi	r24, 0x02	; 2
    2426:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>

#elif LCD_NumbersOfLines == Two_Lines
#if LCD_Font_Size == FiveEight_Size
	LCD_voidSendCommand(TwoLine_5x8_4Bit);
#elif LCD_Font_Size == FiveEleven_Size
	LCD_voidSendCommand(TwoLine_5x11_4Bit);
    242a:	8c e0       	ldi	r24, 0x0C	; 12
    242c:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
    2430:	fe 01       	movw	r30, r28
    2432:	eb 5b       	subi	r30, 0xBB	; 187
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e2       	ldi	r26, 0x20	; 32
    243c:	b2 e4       	ldi	r27, 0x42	; 66
    243e:	80 83       	st	Z, r24
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	a2 83       	std	Z+2, r26	; 0x02
    2444:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2446:	8e 01       	movw	r16, r28
    2448:	0f 5b       	subi	r16, 0xBF	; 191
    244a:	1f 4f       	sbci	r17, 0xFF	; 255
    244c:	fe 01       	movw	r30, r28
    244e:	eb 5b       	subi	r30, 0xBB	; 187
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	2b ea       	ldi	r18, 0xAB	; 171
    245c:	3a ea       	ldi	r19, 0xAA	; 170
    245e:	4a ea       	ldi	r20, 0xAA	; 170
    2460:	50 e4       	ldi	r21, 0x40	; 64
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	f8 01       	movw	r30, r16
    246c:	80 83       	st	Z, r24
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	a2 83       	std	Z+2, r26	; 0x02
    2472:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2474:	fe 01       	movw	r30, r28
    2476:	ef 5b       	subi	r30, 0xBF	; 191
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    248e:	88 23       	and	r24, r24
    2490:	34 f4       	brge	.+12     	; 0x249e <LCD_voidInit+0x200>
		__ticks = 1;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	fe 01       	movw	r30, r28
    2496:	e0 5c       	subi	r30, 0xC0	; 192
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 83       	st	Z, r24
    249c:	9d c0       	rjmp	.+314    	; 0x25d8 <LCD_voidInit+0x33a>
	else if (__tmp > 255)
    249e:	fe 01       	movw	r30, r28
    24a0:	ef 5b       	subi	r30, 0xBF	; 191
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	53 e4       	ldi	r21, 0x43	; 67
    24b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	0c f0       	brlt	.+2      	; 0x24be <LCD_voidInit+0x220>
    24bc:	7e c0       	rjmp	.+252    	; 0x25ba <LCD_voidInit+0x31c>
	{
		_delay_ms(__us / 1000.0);
    24be:	fe 01       	movw	r30, r28
    24c0:	eb 5b       	subi	r30, 0xBB	; 187
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4a e7       	ldi	r20, 0x7A	; 122
    24d2:	54 e4       	ldi	r21, 0x44	; 68
    24d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	8c af       	std	Y+60, r24	; 0x3c
    24de:	9d af       	std	Y+61, r25	; 0x3d
    24e0:	ae af       	std	Y+62, r26	; 0x3e
    24e2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    24e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    24e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    24ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4a e7       	ldi	r20, 0x7A	; 122
    24f2:	55 e4       	ldi	r21, 0x45	; 69
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	88 af       	std	Y+56, r24	; 0x38
    24fe:	99 af       	std	Y+57, r25	; 0x39
    2500:	aa af       	std	Y+58, r26	; 0x3a
    2502:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2504:	68 ad       	ldd	r22, Y+56	; 0x38
    2506:	79 ad       	ldd	r23, Y+57	; 0x39
    2508:	8a ad       	ldd	r24, Y+58	; 0x3a
    250a:	9b ad       	ldd	r25, Y+59	; 0x3b
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e8       	ldi	r20, 0x80	; 128
    2512:	5f e3       	ldi	r21, 0x3F	; 63
    2514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2518:	88 23       	and	r24, r24
    251a:	2c f4       	brge	.+10     	; 0x2526 <LCD_voidInit+0x288>
		__ticks = 1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9f ab       	std	Y+55, r25	; 0x37
    2522:	8e ab       	std	Y+54, r24	; 0x36
    2524:	3f c0       	rjmp	.+126    	; 0x25a4 <LCD_voidInit+0x306>
	else if (__tmp > 65535)
    2526:	68 ad       	ldd	r22, Y+56	; 0x38
    2528:	79 ad       	ldd	r23, Y+57	; 0x39
    252a:	8a ad       	ldd	r24, Y+58	; 0x3a
    252c:	9b ad       	ldd	r25, Y+59	; 0x3b
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	3f ef       	ldi	r19, 0xFF	; 255
    2532:	4f e7       	ldi	r20, 0x7F	; 127
    2534:	57 e4       	ldi	r21, 0x47	; 71
    2536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253a:	18 16       	cp	r1, r24
    253c:	4c f5       	brge	.+82     	; 0x2590 <LCD_voidInit+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2540:	7d ad       	ldd	r23, Y+61	; 0x3d
    2542:	8e ad       	ldd	r24, Y+62	; 0x3e
    2544:	9f ad       	ldd	r25, Y+63	; 0x3f
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e2       	ldi	r20, 0x20	; 32
    254c:	51 e4       	ldi	r21, 0x41	; 65
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9f ab       	std	Y+55, r25	; 0x37
    2564:	8e ab       	std	Y+54, r24	; 0x36
    2566:	0f c0       	rjmp	.+30     	; 0x2586 <LCD_voidInit+0x2e8>
    2568:	80 e9       	ldi	r24, 0x90	; 144
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	9d ab       	std	Y+53, r25	; 0x35
    256e:	8c ab       	std	Y+52, r24	; 0x34
    2570:	8c a9       	ldd	r24, Y+52	; 0x34
    2572:	9d a9       	ldd	r25, Y+53	; 0x35
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_voidInit+0x2d6>
    2578:	9d ab       	std	Y+53, r25	; 0x35
    257a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257c:	8e a9       	ldd	r24, Y+54	; 0x36
    257e:	9f a9       	ldd	r25, Y+55	; 0x37
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	9f ab       	std	Y+55, r25	; 0x37
    2584:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2586:	8e a9       	ldd	r24, Y+54	; 0x36
    2588:	9f a9       	ldd	r25, Y+55	; 0x37
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	69 f7       	brne	.-38     	; 0x2568 <LCD_voidInit+0x2ca>
    258e:	2d c0       	rjmp	.+90     	; 0x25ea <LCD_voidInit+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2590:	68 ad       	ldd	r22, Y+56	; 0x38
    2592:	79 ad       	ldd	r23, Y+57	; 0x39
    2594:	8a ad       	ldd	r24, Y+58	; 0x3a
    2596:	9b ad       	ldd	r25, Y+59	; 0x3b
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9f ab       	std	Y+55, r25	; 0x37
    25a2:	8e ab       	std	Y+54, r24	; 0x36
    25a4:	8e a9       	ldd	r24, Y+54	; 0x36
    25a6:	9f a9       	ldd	r25, Y+55	; 0x37
    25a8:	9b ab       	std	Y+51, r25	; 0x33
    25aa:	8a ab       	std	Y+50, r24	; 0x32
    25ac:	8a a9       	ldd	r24, Y+50	; 0x32
    25ae:	9b a9       	ldd	r25, Y+51	; 0x33
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <LCD_voidInit+0x312>
    25b4:	9b ab       	std	Y+51, r25	; 0x33
    25b6:	8a ab       	std	Y+50, r24	; 0x32
    25b8:	18 c0       	rjmp	.+48     	; 0x25ea <LCD_voidInit+0x34c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25ba:	fe 01       	movw	r30, r28
    25bc:	ef 5b       	subi	r30, 0xBF	; 191
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	60 81       	ld	r22, Z
    25c2:	71 81       	ldd	r23, Z+1	; 0x01
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	93 81       	ldd	r25, Z+3	; 0x03
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	fe 01       	movw	r30, r28
    25d2:	e0 5c       	subi	r30, 0xC0	; 192
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 83       	st	Z, r24
    25d8:	fe 01       	movw	r30, r28
    25da:	e0 5c       	subi	r30, 0xC0	; 192
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25e2:	89 a9       	ldd	r24, Y+49	; 0x31
    25e4:	8a 95       	dec	r24
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <LCD_voidInit+0x346>
    25e8:	89 ab       	std	Y+49, r24	; 0x31
#elif LCD_Cursor == Cursor_OFF
#if LCD_Blinking == Blinking_ON
	LCD_voidSendCommand(0x00);
	LCD_voidSendCommand(DisplayOn_CursorOff_BlinkingOn);
#elif LCD_Blinking == Blinking_OFF
	LCD_voidSendCommand(0x00);
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
	LCD_voidSendCommand(DisplayOn_CursorOff_BlinkingOff);
    25f0:	8c e0       	ldi	r24, 0x0C	; 12
    25f2:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a0 e2       	ldi	r26, 0x20	; 32
    25fc:	b2 e4       	ldi	r27, 0x42	; 66
    25fe:	8d a7       	std	Y+45, r24	; 0x2d
    2600:	9e a7       	std	Y+46, r25	; 0x2e
    2602:	af a7       	std	Y+47, r26	; 0x2f
    2604:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2606:	6d a5       	ldd	r22, Y+45	; 0x2d
    2608:	7e a5       	ldd	r23, Y+46	; 0x2e
    260a:	8f a5       	ldd	r24, Y+47	; 0x2f
    260c:	98 a9       	ldd	r25, Y+48	; 0x30
    260e:	2b ea       	ldi	r18, 0xAB	; 171
    2610:	3a ea       	ldi	r19, 0xAA	; 170
    2612:	4a ea       	ldi	r20, 0xAA	; 170
    2614:	50 e4       	ldi	r21, 0x40	; 64
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	89 a7       	std	Y+41, r24	; 0x29
    2620:	9a a7       	std	Y+42, r25	; 0x2a
    2622:	ab a7       	std	Y+43, r26	; 0x2b
    2624:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2626:	69 a5       	ldd	r22, Y+41	; 0x29
    2628:	7a a5       	ldd	r23, Y+42	; 0x2a
    262a:	8b a5       	ldd	r24, Y+43	; 0x2b
    262c:	9c a5       	ldd	r25, Y+44	; 0x2c
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	1c f4       	brge	.+6      	; 0x2644 <LCD_voidInit+0x3a6>
		__ticks = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	88 a7       	std	Y+40, r24	; 0x28
    2642:	91 c0       	rjmp	.+290    	; 0x2766 <LCD_voidInit+0x4c8>
	else if (__tmp > 255)
    2644:	69 a5       	ldd	r22, Y+41	; 0x29
    2646:	7a a5       	ldd	r23, Y+42	; 0x2a
    2648:	8b a5       	ldd	r24, Y+43	; 0x2b
    264a:	9c a5       	ldd	r25, Y+44	; 0x2c
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	53 e4       	ldi	r21, 0x43	; 67
    2654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	0c f0       	brlt	.+2      	; 0x265e <LCD_voidInit+0x3c0>
    265c:	7b c0       	rjmp	.+246    	; 0x2754 <LCD_voidInit+0x4b6>
	{
		_delay_ms(__us / 1000.0);
    265e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2660:	7e a5       	ldd	r23, Y+46	; 0x2e
    2662:	8f a5       	ldd	r24, Y+47	; 0x2f
    2664:	98 a9       	ldd	r25, Y+48	; 0x30
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	54 e4       	ldi	r21, 0x44	; 68
    266e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8c a3       	std	Y+36, r24	; 0x24
    2678:	9d a3       	std	Y+37, r25	; 0x25
    267a:	ae a3       	std	Y+38, r26	; 0x26
    267c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	6c a1       	ldd	r22, Y+36	; 0x24
    2680:	7d a1       	ldd	r23, Y+37	; 0x25
    2682:	8e a1       	ldd	r24, Y+38	; 0x26
    2684:	9f a1       	ldd	r25, Y+39	; 0x27
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a e7       	ldi	r20, 0x7A	; 122
    268c:	55 e4       	ldi	r21, 0x45	; 69
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	88 a3       	std	Y+32, r24	; 0x20
    2698:	99 a3       	std	Y+33, r25	; 0x21
    269a:	aa a3       	std	Y+34, r26	; 0x22
    269c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    269e:	68 a1       	ldd	r22, Y+32	; 0x20
    26a0:	79 a1       	ldd	r23, Y+33	; 0x21
    26a2:	8a a1       	ldd	r24, Y+34	; 0x22
    26a4:	9b a1       	ldd	r25, Y+35	; 0x23
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <LCD_voidInit+0x422>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9f 8f       	std	Y+31, r25	; 0x1f
    26bc:	8e 8f       	std	Y+30, r24	; 0x1e
    26be:	3f c0       	rjmp	.+126    	; 0x273e <LCD_voidInit+0x4a0>
	else if (__tmp > 65535)
    26c0:	68 a1       	ldd	r22, Y+32	; 0x20
    26c2:	79 a1       	ldd	r23, Y+33	; 0x21
    26c4:	8a a1       	ldd	r24, Y+34	; 0x22
    26c6:	9b a1       	ldd	r25, Y+35	; 0x23
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <LCD_voidInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	6c a1       	ldd	r22, Y+36	; 0x24
    26da:	7d a1       	ldd	r23, Y+37	; 0x25
    26dc:	8e a1       	ldd	r24, Y+38	; 0x26
    26de:	9f a1       	ldd	r25, Y+39	; 0x27
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9f 8f       	std	Y+31, r25	; 0x1f
    26fe:	8e 8f       	std	Y+30, r24	; 0x1e
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <LCD_voidInit+0x482>
    2702:	80 e9       	ldi	r24, 0x90	; 144
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	9d 8f       	std	Y+29, r25	; 0x1d
    2708:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    270a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    270c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <LCD_voidInit+0x470>
    2712:	9d 8f       	std	Y+29, r25	; 0x1d
    2714:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2718:	9f 8d       	ldd	r25, Y+31	; 0x1f
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9f 8f       	std	Y+31, r25	; 0x1f
    271e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2722:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <LCD_voidInit+0x464>
    2728:	24 c0       	rjmp	.+72     	; 0x2772 <LCD_voidInit+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	68 a1       	ldd	r22, Y+32	; 0x20
    272c:	79 a1       	ldd	r23, Y+33	; 0x21
    272e:	8a a1       	ldd	r24, Y+34	; 0x22
    2730:	9b a1       	ldd	r25, Y+35	; 0x23
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9f 8f       	std	Y+31, r25	; 0x1f
    273c:	8e 8f       	std	Y+30, r24	; 0x1e
    273e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2740:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2742:	9b 8f       	std	Y+27, r25	; 0x1b
    2744:	8a 8f       	std	Y+26, r24	; 0x1a
    2746:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2748:	9b 8d       	ldd	r25, Y+27	; 0x1b
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <LCD_voidInit+0x4ac>
    274e:	9b 8f       	std	Y+27, r25	; 0x1b
    2750:	8a 8f       	std	Y+26, r24	; 0x1a
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <LCD_voidInit+0x4d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2754:	69 a5       	ldd	r22, Y+41	; 0x29
    2756:	7a a5       	ldd	r23, Y+42	; 0x2a
    2758:	8b a5       	ldd	r24, Y+43	; 0x2b
    275a:	9c a5       	ldd	r25, Y+44	; 0x2c
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	88 a7       	std	Y+40, r24	; 0x28
    2766:	88 a5       	ldd	r24, Y+40	; 0x28
    2768:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    276a:	89 8d       	ldd	r24, Y+25	; 0x19
    276c:	8a 95       	dec	r24
    276e:	f1 f7       	brne	.-4      	; 0x276c <LCD_voidInit+0x4ce>
    2770:	89 8f       	std	Y+25, r24	; 0x19
#endif  /*Display*/

	/*Wait for more than 39us*/
	_delay_us(40);
	/*Display Clear*/
	LCD_voidSendCommand(0x00);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
	LCD_voidSendCommand(CLEAR_DISPLAY);
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	a8 ec       	ldi	r26, 0xC8	; 200
    2784:	b4 e4       	ldi	r27, 0x44	; 68
    2786:	8d 8b       	std	Y+21, r24	; 0x15
    2788:	9e 8b       	std	Y+22, r25	; 0x16
    278a:	af 8b       	std	Y+23, r26	; 0x17
    278c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    278e:	6d 89       	ldd	r22, Y+21	; 0x15
    2790:	7e 89       	ldd	r23, Y+22	; 0x16
    2792:	8f 89       	ldd	r24, Y+23	; 0x17
    2794:	98 8d       	ldd	r25, Y+24	; 0x18
    2796:	2b ea       	ldi	r18, 0xAB	; 171
    2798:	3a ea       	ldi	r19, 0xAA	; 170
    279a:	4a ea       	ldi	r20, 0xAA	; 170
    279c:	50 e4       	ldi	r21, 0x40	; 64
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	89 8b       	std	Y+17, r24	; 0x11
    27a8:	9a 8b       	std	Y+18, r25	; 0x12
    27aa:	ab 8b       	std	Y+19, r26	; 0x13
    27ac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27ae:	69 89       	ldd	r22, Y+17	; 0x11
    27b0:	7a 89       	ldd	r23, Y+18	; 0x12
    27b2:	8b 89       	ldd	r24, Y+19	; 0x13
    27b4:	9c 89       	ldd	r25, Y+20	; 0x14
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e8       	ldi	r20, 0x80	; 128
    27bc:	5f e3       	ldi	r21, 0x3F	; 63
    27be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	1c f4       	brge	.+6      	; 0x27cc <LCD_voidInit+0x52e>
		__ticks = 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	88 8b       	std	Y+16, r24	; 0x10
    27ca:	91 c0       	rjmp	.+290    	; 0x28ee <LCD_voidInit+0x650>
	else if (__tmp > 255)
    27cc:	69 89       	ldd	r22, Y+17	; 0x11
    27ce:	7a 89       	ldd	r23, Y+18	; 0x12
    27d0:	8b 89       	ldd	r24, Y+19	; 0x13
    27d2:	9c 89       	ldd	r25, Y+20	; 0x14
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4f e7       	ldi	r20, 0x7F	; 127
    27da:	53 e4       	ldi	r21, 0x43	; 67
    27dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e0:	18 16       	cp	r1, r24
    27e2:	0c f0       	brlt	.+2      	; 0x27e6 <LCD_voidInit+0x548>
    27e4:	7b c0       	rjmp	.+246    	; 0x28dc <LCD_voidInit+0x63e>
	{
		_delay_ms(__us / 1000.0);
    27e6:	6d 89       	ldd	r22, Y+21	; 0x15
    27e8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ea:	8f 89       	ldd	r24, Y+23	; 0x17
    27ec:	98 8d       	ldd	r25, Y+24	; 0x18
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	4a e7       	ldi	r20, 0x7A	; 122
    27f4:	54 e4       	ldi	r21, 0x44	; 68
    27f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	8c 87       	std	Y+12, r24	; 0x0c
    2800:	9d 87       	std	Y+13, r25	; 0x0d
    2802:	ae 87       	std	Y+14, r26	; 0x0e
    2804:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2806:	6c 85       	ldd	r22, Y+12	; 0x0c
    2808:	7d 85       	ldd	r23, Y+13	; 0x0d
    280a:	8e 85       	ldd	r24, Y+14	; 0x0e
    280c:	9f 85       	ldd	r25, Y+15	; 0x0f
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	4a e7       	ldi	r20, 0x7A	; 122
    2814:	55 e4       	ldi	r21, 0x45	; 69
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	88 87       	std	Y+8, r24	; 0x08
    2820:	99 87       	std	Y+9, r25	; 0x09
    2822:	aa 87       	std	Y+10, r26	; 0x0a
    2824:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2826:	68 85       	ldd	r22, Y+8	; 0x08
    2828:	79 85       	ldd	r23, Y+9	; 0x09
    282a:	8a 85       	ldd	r24, Y+10	; 0x0a
    282c:	9b 85       	ldd	r25, Y+11	; 0x0b
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f e3       	ldi	r21, 0x3F	; 63
    2836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283a:	88 23       	and	r24, r24
    283c:	2c f4       	brge	.+10     	; 0x2848 <LCD_voidInit+0x5aa>
		__ticks = 1;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9f 83       	std	Y+7, r25	; 0x07
    2844:	8e 83       	std	Y+6, r24	; 0x06
    2846:	3f c0       	rjmp	.+126    	; 0x28c6 <LCD_voidInit+0x628>
	else if (__tmp > 65535)
    2848:	68 85       	ldd	r22, Y+8	; 0x08
    284a:	79 85       	ldd	r23, Y+9	; 0x09
    284c:	8a 85       	ldd	r24, Y+10	; 0x0a
    284e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	3f ef       	ldi	r19, 0xFF	; 255
    2854:	4f e7       	ldi	r20, 0x7F	; 127
    2856:	57 e4       	ldi	r21, 0x47	; 71
    2858:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285c:	18 16       	cp	r1, r24
    285e:	4c f5       	brge	.+82     	; 0x28b2 <LCD_voidInit+0x614>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2860:	6c 85       	ldd	r22, Y+12	; 0x0c
    2862:	7d 85       	ldd	r23, Y+13	; 0x0d
    2864:	8e 85       	ldd	r24, Y+14	; 0x0e
    2866:	9f 85       	ldd	r25, Y+15	; 0x0f
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e2       	ldi	r20, 0x20	; 32
    286e:	51 e4       	ldi	r21, 0x41	; 65
    2870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	bc 01       	movw	r22, r24
    287a:	cd 01       	movw	r24, r26
    287c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9f 83       	std	Y+7, r25	; 0x07
    2886:	8e 83       	std	Y+6, r24	; 0x06
    2888:	0f c0       	rjmp	.+30     	; 0x28a8 <LCD_voidInit+0x60a>
    288a:	80 e9       	ldi	r24, 0x90	; 144
    288c:	91 e0       	ldi	r25, 0x01	; 1
    288e:	9d 83       	std	Y+5, r25	; 0x05
    2890:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2892:	8c 81       	ldd	r24, Y+4	; 0x04
    2894:	9d 81       	ldd	r25, Y+5	; 0x05
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <LCD_voidInit+0x5f8>
    289a:	9d 83       	std	Y+5, r25	; 0x05
    289c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289e:	8e 81       	ldd	r24, Y+6	; 0x06
    28a0:	9f 81       	ldd	r25, Y+7	; 0x07
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	9f 83       	std	Y+7, r25	; 0x07
    28a6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a8:	8e 81       	ldd	r24, Y+6	; 0x06
    28aa:	9f 81       	ldd	r25, Y+7	; 0x07
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	69 f7       	brne	.-38     	; 0x288a <LCD_voidInit+0x5ec>
    28b0:	24 c0       	rjmp	.+72     	; 0x28fa <LCD_voidInit+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b2:	68 85       	ldd	r22, Y+8	; 0x08
    28b4:	79 85       	ldd	r23, Y+9	; 0x09
    28b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9f 83       	std	Y+7, r25	; 0x07
    28c4:	8e 83       	std	Y+6, r24	; 0x06
    28c6:	8e 81       	ldd	r24, Y+6	; 0x06
    28c8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ca:	9b 83       	std	Y+3, r25	; 0x03
    28cc:	8a 83       	std	Y+2, r24	; 0x02
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	9b 81       	ldd	r25, Y+3	; 0x03
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <LCD_voidInit+0x634>
    28d6:	9b 83       	std	Y+3, r25	; 0x03
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	0f c0       	rjmp	.+30     	; 0x28fa <LCD_voidInit+0x65c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28dc:	69 89       	ldd	r22, Y+17	; 0x11
    28de:	7a 89       	ldd	r23, Y+18	; 0x12
    28e0:	8b 89       	ldd	r24, Y+19	; 0x13
    28e2:	9c 89       	ldd	r25, Y+20	; 0x14
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	88 8b       	std	Y+16, r24	; 0x10
    28ee:	88 89       	ldd	r24, Y+16	; 0x10
    28f0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	8a 95       	dec	r24
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <LCD_voidInit+0x656>
    28f8:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 1.53ms*/
	_delay_us(1600);
	/*Entry Mode Set*/
	LCD_voidSendCommand(0x00);
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
	LCD_voidSendCommand(ENTRY_MODE_SET);
    2900:	86 e0       	ldi	r24, 0x06	; 6
    2902:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>

#else
#error "Wrong LCD init mode"

#endif
}
    2906:	ca 5a       	subi	r28, 0xAA	; 170
    2908:	df 4f       	sbci	r29, 0xFF	; 255
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	08 95       	ret

0000291e <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	6d 97       	sbiw	r28, 0x1d	; 29
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set Rs to 0 to choose IR register to send command -----> 0 (Instruction Register), 1(Data Register)*/
	DIO_u8SetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	65 e0       	ldi	r22, 0x05	; 5
    2938:	40 e0       	ldi	r20, 0x00	; 0
    293a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>

	/*Set R/W to 0 so i can write data ----> 0 (write), 1(read)*/
	DIO_u8SetPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	66 e0       	ldi	r22, 0x06	; 6
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D4, LCD_DATA_PIN_D4, (Copy_u8Command >> 4) & 1);
	DIO_u8SetPinValue(LCD_DATA_PORT_D5, LCD_DATA_PIN_D5, (Copy_u8Command >> 5) & 1);
	DIO_u8SetPinValue(LCD_DATA_PORT_D6, LCD_DATA_PIN_D6, (Copy_u8Command >> 6) & 1);
	DIO_u8SetPinValue(LCD_DATA_PORT_D7, LCD_DATA_PIN_D7, (Copy_u8Command >> 7) & 1);
#elif LCD_InitMode == FourBit_Init
	DIO_u8SetPinValue(LCD_DATA_PORT_D4, LCD_DATA_PIN_D4, (Copy_u8Command) & 1);
    2948:	8d 8d       	ldd	r24, Y+29	; 0x1d
    294a:	98 2f       	mov	r25, r24
    294c:	91 70       	andi	r25, 0x01	; 1
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	64 e0       	ldi	r22, 0x04	; 4
    2952:	49 2f       	mov	r20, r25
    2954:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D5, LCD_DATA_PIN_D5, (Copy_u8Command >> 1) & 1);
    2958:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295a:	86 95       	lsr	r24
    295c:	98 2f       	mov	r25, r24
    295e:	91 70       	andi	r25, 0x01	; 1
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	65 e0       	ldi	r22, 0x05	; 5
    2964:	49 2f       	mov	r20, r25
    2966:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D6, LCD_DATA_PIN_D6, (Copy_u8Command >> 2) & 1);
    296a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296c:	86 95       	lsr	r24
    296e:	86 95       	lsr	r24
    2970:	98 2f       	mov	r25, r24
    2972:	91 70       	andi	r25, 0x01	; 1
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	66 e0       	ldi	r22, 0x06	; 6
    2978:	49 2f       	mov	r20, r25
    297a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D7, LCD_DATA_PIN_D7, (Copy_u8Command >> 3) & 1);
    297e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2980:	86 95       	lsr	r24
    2982:	86 95       	lsr	r24
    2984:	86 95       	lsr	r24
    2986:	98 2f       	mov	r25, r24
    2988:	91 70       	andi	r25, 0x01	; 1
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	67 e0       	ldi	r22, 0x07	; 7
    298e:	49 2f       	mov	r20, r25
    2990:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
#else
#error "Wrong LCD init mode"
#endif
	/*Set enable pin from high to low with wide as 230ns*/
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	67 e0       	ldi	r22, 0x07	; 7
    2998:	41 e0       	ldi	r20, 0x01	; 1
    299a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	a0 e0       	ldi	r26, 0x00	; 0
    29a4:	b0 e4       	ldi	r27, 0x40	; 64
    29a6:	89 8f       	std	Y+25, r24	; 0x19
    29a8:	9a 8f       	std	Y+26, r25	; 0x1a
    29aa:	ab 8f       	std	Y+27, r26	; 0x1b
    29ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	69 8d       	ldd	r22, Y+25	; 0x19
    29b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	4a e7       	ldi	r20, 0x7A	; 122
    29bc:	55 e4       	ldi	r21, 0x45	; 69
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	8d 8b       	std	Y+21, r24	; 0x15
    29c8:	9e 8b       	std	Y+22, r25	; 0x16
    29ca:	af 8b       	std	Y+23, r26	; 0x17
    29cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ce:	6d 89       	ldd	r22, Y+21	; 0x15
    29d0:	7e 89       	ldd	r23, Y+22	; 0x16
    29d2:	8f 89       	ldd	r24, Y+23	; 0x17
    29d4:	98 8d       	ldd	r25, Y+24	; 0x18
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	2c f4       	brge	.+10     	; 0x29f0 <LCD_voidSendCommand+0xd2>
		__ticks = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9c 8b       	std	Y+20, r25	; 0x14
    29ec:	8b 8b       	std	Y+19, r24	; 0x13
    29ee:	3f c0       	rjmp	.+126    	; 0x2a6e <LCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
    29f0:	6d 89       	ldd	r22, Y+21	; 0x15
    29f2:	7e 89       	ldd	r23, Y+22	; 0x16
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	3f ef       	ldi	r19, 0xFF	; 255
    29fc:	4f e7       	ldi	r20, 0x7F	; 127
    29fe:	57 e4       	ldi	r21, 0x47	; 71
    2a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a04:	18 16       	cp	r1, r24
    2a06:	4c f5       	brge	.+82     	; 0x2a5a <LCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	69 8d       	ldd	r22, Y+25	; 0x19
    2a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9c 8b       	std	Y+20, r25	; 0x14
    2a2e:	8b 8b       	std	Y+19, r24	; 0x13
    2a30:	0f c0       	rjmp	.+30     	; 0x2a50 <LCD_voidSendCommand+0x132>
    2a32:	80 e9       	ldi	r24, 0x90	; 144
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	9a 8b       	std	Y+18, r25	; 0x12
    2a38:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a3a:	89 89       	ldd	r24, Y+17	; 0x11
    2a3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <LCD_voidSendCommand+0x120>
    2a42:	9a 8b       	std	Y+18, r25	; 0x12
    2a44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	8b 89       	ldd	r24, Y+19	; 0x13
    2a48:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	9c 8b       	std	Y+20, r25	; 0x14
    2a4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	8b 89       	ldd	r24, Y+19	; 0x13
    2a52:	9c 89       	ldd	r25, Y+20	; 0x14
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <LCD_voidSendCommand+0x114>
    2a58:	14 c0       	rjmp	.+40     	; 0x2a82 <LCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a60:	98 8d       	ldd	r25, Y+24	; 0x18
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9c 8b       	std	Y+20, r25	; 0x14
    2a6c:	8b 8b       	std	Y+19, r24	; 0x13
    2a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a70:	9c 89       	ldd	r25, Y+20	; 0x14
    2a72:	98 8b       	std	Y+16, r25	; 0x10
    2a74:	8f 87       	std	Y+15, r24	; 0x0f
    2a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a78:	98 89       	ldd	r25, Y+16	; 0x10
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <LCD_voidSendCommand+0x15c>
    2a7e:	98 8b       	std	Y+16, r25	; 0x10
    2a80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	67 e0       	ldi	r22, 0x07	; 7
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e2       	ldi	r26, 0x20	; 32
    2a92:	b1 e4       	ldi	r27, 0x41	; 65
    2a94:	8b 87       	std	Y+11, r24	; 0x0b
    2a96:	9c 87       	std	Y+12, r25	; 0x0c
    2a98:	ad 87       	std	Y+13, r26	; 0x0d
    2a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	55 e4       	ldi	r21, 0x45	; 69
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
    2ab6:	98 87       	std	Y+8, r25	; 0x08
    2ab8:	a9 87       	std	Y+9, r26	; 0x09
    2aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <LCD_voidSendCommand+0x1c0>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <LCD_voidSendCommand+0x23e>
	else if (__tmp > 65535)
    2ade:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae0:	78 85       	ldd	r23, Y+8	; 0x08
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <LCD_voidSendCommand+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <LCD_voidSendCommand+0x220>
    2b20:	80 e9       	ldi	r24, 0x90	; 144
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	9c 83       	std	Y+4, r25	; 0x04
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <LCD_voidSendCommand+0x20e>
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <LCD_voidSendCommand+0x202>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <LCD_voidSendCommand+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_voidSendCommand+0x24a>
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01

	/* Delay to let the LCD Display the character */
	_delay_ms(10);
}
    2b70:	6d 96       	adiw	r28, 0x1d	; 29
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <LCD_voidClearDisplay>:


void LCD_voidClearDisplay(void)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
#if LCD_InitMode == EightBit_Init
	LCD_voidSendCommand(CLEAR_DISPLAY);
	LCD_voidSendCommand(CURSOR_OFFEST);
#elif LCD_InitMode == FourBit_Init
	LCD_voidSendCommand(CLEAR_DISPLAY >> 4);		//upper nibble
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
	LCD_voidSendCommand(CLEAR_DISPLAY);				//lower nibble
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>

	LCD_voidSendCommand(CURSOR_OFFEST >> 4);        //upper nibble
    2b96:	88 e0       	ldi	r24, 0x08	; 8
    2b98:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
	LCD_voidSendCommand(CURSOR_OFFEST);             //lower nibble
    2b9c:	80 e8       	ldi	r24, 0x80	; 128
    2b9e:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
#endif
}
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <LCD_voidSendCharacter>:


void LCD_voidSendCharacter(u8 Copy_u8Character)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	e9 97       	sbiw	r28, 0x39	; 57
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	89 af       	std	Y+57, r24	; 0x39
	/*Set Rs to 0 to choose IR register to send command -----> 0 (Instruction Register), 1(Data Register)*/
	DIO_u8SetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	65 e0       	ldi	r22, 0x05	; 5
    2bc2:	41 e0       	ldi	r20, 0x01	; 1
    2bc4:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>

	/*Set R/W to 0 so i can write data ----> 0 (write), 1(read)*/
	DIO_u8SetPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	66 e0       	ldi	r22, 0x06	; 6
    2bcc:	40 e0       	ldi	r20, 0x00	; 0
    2bce:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>

	/* Delay to let the LCD Display the character */
	_delay_ms(10);
#elif LCD_InitMode == FourBit_Init
	//send upper nibble first
	DIO_u8SetPinValue(LCD_DATA_PORT_D4, LCD_DATA_PIN_D4, (Copy_u8Character >> 4) & 1);
    2bd2:	89 ad       	ldd	r24, Y+57	; 0x39
    2bd4:	82 95       	swap	r24
    2bd6:	8f 70       	andi	r24, 0x0F	; 15
    2bd8:	98 2f       	mov	r25, r24
    2bda:	91 70       	andi	r25, 0x01	; 1
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	64 e0       	ldi	r22, 0x04	; 4
    2be0:	49 2f       	mov	r20, r25
    2be2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D5, LCD_DATA_PIN_D5, (Copy_u8Character >> 5) & 1);
    2be6:	89 ad       	ldd	r24, Y+57	; 0x39
    2be8:	82 95       	swap	r24
    2bea:	86 95       	lsr	r24
    2bec:	87 70       	andi	r24, 0x07	; 7
    2bee:	98 2f       	mov	r25, r24
    2bf0:	91 70       	andi	r25, 0x01	; 1
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	65 e0       	ldi	r22, 0x05	; 5
    2bf6:	49 2f       	mov	r20, r25
    2bf8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D6, LCD_DATA_PIN_D6, (Copy_u8Character >> 6) & 1);
    2bfc:	89 ad       	ldd	r24, Y+57	; 0x39
    2bfe:	82 95       	swap	r24
    2c00:	86 95       	lsr	r24
    2c02:	86 95       	lsr	r24
    2c04:	83 70       	andi	r24, 0x03	; 3
    2c06:	98 2f       	mov	r25, r24
    2c08:	91 70       	andi	r25, 0x01	; 1
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	66 e0       	ldi	r22, 0x06	; 6
    2c0e:	49 2f       	mov	r20, r25
    2c10:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D7, LCD_DATA_PIN_D7, (Copy_u8Character >> 7) & 1);
    2c14:	89 ad       	ldd	r24, Y+57	; 0x39
    2c16:	98 2f       	mov	r25, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	99 27       	eor	r25, r25
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	67 e0       	ldi	r22, 0x07	; 7
    2c22:	49 2f       	mov	r20, r25
    2c24:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>

	/*Set enable pin from high to low with wide as 230ns*/
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	67 e0       	ldi	r22, 0x07	; 7
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	a0 e0       	ldi	r26, 0x00	; 0
    2c38:	b0 e4       	ldi	r27, 0x40	; 64
    2c3a:	8d ab       	std	Y+53, r24	; 0x35
    2c3c:	9e ab       	std	Y+54, r25	; 0x36
    2c3e:	af ab       	std	Y+55, r26	; 0x37
    2c40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c42:	6d a9       	ldd	r22, Y+53	; 0x35
    2c44:	7e a9       	ldd	r23, Y+54	; 0x36
    2c46:	8f a9       	ldd	r24, Y+55	; 0x37
    2c48:	98 ad       	ldd	r25, Y+56	; 0x38
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	4a e7       	ldi	r20, 0x7A	; 122
    2c50:	55 e4       	ldi	r21, 0x45	; 69
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	89 ab       	std	Y+49, r24	; 0x31
    2c5c:	9a ab       	std	Y+50, r25	; 0x32
    2c5e:	ab ab       	std	Y+51, r26	; 0x33
    2c60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c62:	69 a9       	ldd	r22, Y+49	; 0x31
    2c64:	7a a9       	ldd	r23, Y+50	; 0x32
    2c66:	8b a9       	ldd	r24, Y+51	; 0x33
    2c68:	9c a9       	ldd	r25, Y+52	; 0x34
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e8       	ldi	r20, 0x80	; 128
    2c70:	5f e3       	ldi	r21, 0x3F	; 63
    2c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c76:	88 23       	and	r24, r24
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <LCD_voidSendCharacter+0xdc>
		__ticks = 1;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	98 ab       	std	Y+48, r25	; 0x30
    2c80:	8f a7       	std	Y+47, r24	; 0x2f
    2c82:	3f c0       	rjmp	.+126    	; 0x2d02 <LCD_voidSendCharacter+0x15a>
	else if (__tmp > 65535)
    2c84:	69 a9       	ldd	r22, Y+49	; 0x31
    2c86:	7a a9       	ldd	r23, Y+50	; 0x32
    2c88:	8b a9       	ldd	r24, Y+51	; 0x33
    2c8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	3f ef       	ldi	r19, 0xFF	; 255
    2c90:	4f e7       	ldi	r20, 0x7F	; 127
    2c92:	57 e4       	ldi	r21, 0x47	; 71
    2c94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c98:	18 16       	cp	r1, r24
    2c9a:	4c f5       	brge	.+82     	; 0x2cee <LCD_voidSendCharacter+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c9e:	7e a9       	ldd	r23, Y+54	; 0x36
    2ca0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ca2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e2       	ldi	r20, 0x20	; 32
    2caa:	51 e4       	ldi	r21, 0x41	; 65
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	98 ab       	std	Y+48, r25	; 0x30
    2cc2:	8f a7       	std	Y+47, r24	; 0x2f
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <LCD_voidSendCharacter+0x13c>
    2cc6:	80 e9       	ldi	r24, 0x90	; 144
    2cc8:	91 e0       	ldi	r25, 0x01	; 1
    2cca:	9e a7       	std	Y+46, r25	; 0x2e
    2ccc:	8d a7       	std	Y+45, r24	; 0x2d
    2cce:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <LCD_voidSendCharacter+0x12a>
    2cd6:	9e a7       	std	Y+46, r25	; 0x2e
    2cd8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cdc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	98 ab       	std	Y+48, r25	; 0x30
    2ce2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	69 f7       	brne	.-38     	; 0x2cc6 <LCD_voidSendCharacter+0x11e>
    2cec:	14 c0       	rjmp	.+40     	; 0x2d16 <LCD_voidSendCharacter+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cee:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf0:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf2:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf4:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	98 ab       	std	Y+48, r25	; 0x30
    2d00:	8f a7       	std	Y+47, r24	; 0x2f
    2d02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d04:	98 a9       	ldd	r25, Y+48	; 0x30
    2d06:	9c a7       	std	Y+44, r25	; 0x2c
    2d08:	8b a7       	std	Y+43, r24	; 0x2b
    2d0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <LCD_voidSendCharacter+0x166>
    2d12:	9c a7       	std	Y+44, r25	; 0x2c
    2d14:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	67 e0       	ldi	r22, 0x07	; 7
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	a0 e0       	ldi	r26, 0x00	; 0
    2d26:	b0 e4       	ldi	r27, 0x40	; 64
    2d28:	8f a3       	std	Y+39, r24	; 0x27
    2d2a:	98 a7       	std	Y+40, r25	; 0x28
    2d2c:	a9 a7       	std	Y+41, r26	; 0x29
    2d2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d30:	6f a1       	ldd	r22, Y+39	; 0x27
    2d32:	78 a5       	ldd	r23, Y+40	; 0x28
    2d34:	89 a5       	ldd	r24, Y+41	; 0x29
    2d36:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	4a e7       	ldi	r20, 0x7A	; 122
    2d3e:	55 e4       	ldi	r21, 0x45	; 69
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	8b a3       	std	Y+35, r24	; 0x23
    2d4a:	9c a3       	std	Y+36, r25	; 0x24
    2d4c:	ad a3       	std	Y+37, r26	; 0x25
    2d4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d50:	6b a1       	ldd	r22, Y+35	; 0x23
    2d52:	7c a1       	ldd	r23, Y+36	; 0x24
    2d54:	8d a1       	ldd	r24, Y+37	; 0x25
    2d56:	9e a1       	ldd	r25, Y+38	; 0x26
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	40 e8       	ldi	r20, 0x80	; 128
    2d5e:	5f e3       	ldi	r21, 0x3F	; 63
    2d60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d64:	88 23       	and	r24, r24
    2d66:	2c f4       	brge	.+10     	; 0x2d72 <LCD_voidSendCharacter+0x1ca>
		__ticks = 1;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9a a3       	std	Y+34, r25	; 0x22
    2d6e:	89 a3       	std	Y+33, r24	; 0x21
    2d70:	3f c0       	rjmp	.+126    	; 0x2df0 <LCD_voidSendCharacter+0x248>
	else if (__tmp > 65535)
    2d72:	6b a1       	ldd	r22, Y+35	; 0x23
    2d74:	7c a1       	ldd	r23, Y+36	; 0x24
    2d76:	8d a1       	ldd	r24, Y+37	; 0x25
    2d78:	9e a1       	ldd	r25, Y+38	; 0x26
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	3f ef       	ldi	r19, 0xFF	; 255
    2d7e:	4f e7       	ldi	r20, 0x7F	; 127
    2d80:	57 e4       	ldi	r21, 0x47	; 71
    2d82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d86:	18 16       	cp	r1, r24
    2d88:	4c f5       	brge	.+82     	; 0x2ddc <LCD_voidSendCharacter+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e2       	ldi	r20, 0x20	; 32
    2d98:	51 e4       	ldi	r21, 0x41	; 65
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	bc 01       	movw	r22, r24
    2da4:	cd 01       	movw	r24, r26
    2da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	9a a3       	std	Y+34, r25	; 0x22
    2db0:	89 a3       	std	Y+33, r24	; 0x21
    2db2:	0f c0       	rjmp	.+30     	; 0x2dd2 <LCD_voidSendCharacter+0x22a>
    2db4:	80 e9       	ldi	r24, 0x90	; 144
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	98 a3       	std	Y+32, r25	; 0x20
    2dba:	8f 8f       	std	Y+31, r24	; 0x1f
    2dbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dbe:	98 a1       	ldd	r25, Y+32	; 0x20
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <LCD_voidSendCharacter+0x218>
    2dc4:	98 a3       	std	Y+32, r25	; 0x20
    2dc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dca:	9a a1       	ldd	r25, Y+34	; 0x22
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	9a a3       	std	Y+34, r25	; 0x22
    2dd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd2:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd4:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	69 f7       	brne	.-38     	; 0x2db4 <LCD_voidSendCharacter+0x20c>
    2dda:	14 c0       	rjmp	.+40     	; 0x2e04 <LCD_voidSendCharacter+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ddc:	6b a1       	ldd	r22, Y+35	; 0x23
    2dde:	7c a1       	ldd	r23, Y+36	; 0x24
    2de0:	8d a1       	ldd	r24, Y+37	; 0x25
    2de2:	9e a1       	ldd	r25, Y+38	; 0x26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9a a3       	std	Y+34, r25	; 0x22
    2dee:	89 a3       	std	Y+33, r24	; 0x21
    2df0:	89 a1       	ldd	r24, Y+33	; 0x21
    2df2:	9a a1       	ldd	r25, Y+34	; 0x22
    2df4:	9e 8f       	std	Y+30, r25	; 0x1e
    2df6:	8d 8f       	std	Y+29, r24	; 0x1d
    2df8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <LCD_voidSendCharacter+0x254>
    2e00:	9e 8f       	std	Y+30, r25	; 0x1e
    2e02:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Delay to let the LCD Display the character */
	_delay_ms(2);

	//send lower nibble second
	DIO_u8SetPinValue(LCD_DATA_PORT_D4, LCD_DATA_PIN_D4, (Copy_u8Character) & 1);
    2e04:	89 ad       	ldd	r24, Y+57	; 0x39
    2e06:	98 2f       	mov	r25, r24
    2e08:	91 70       	andi	r25, 0x01	; 1
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	64 e0       	ldi	r22, 0x04	; 4
    2e0e:	49 2f       	mov	r20, r25
    2e10:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D5, LCD_DATA_PIN_D5, (Copy_u8Character >> 1) & 1);
    2e14:	89 ad       	ldd	r24, Y+57	; 0x39
    2e16:	86 95       	lsr	r24
    2e18:	98 2f       	mov	r25, r24
    2e1a:	91 70       	andi	r25, 0x01	; 1
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	65 e0       	ldi	r22, 0x05	; 5
    2e20:	49 2f       	mov	r20, r25
    2e22:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D6, LCD_DATA_PIN_D6, (Copy_u8Character >> 2) & 1);
    2e26:	89 ad       	ldd	r24, Y+57	; 0x39
    2e28:	86 95       	lsr	r24
    2e2a:	86 95       	lsr	r24
    2e2c:	98 2f       	mov	r25, r24
    2e2e:	91 70       	andi	r25, 0x01	; 1
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	66 e0       	ldi	r22, 0x06	; 6
    2e34:	49 2f       	mov	r20, r25
    2e36:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT_D7, LCD_DATA_PIN_D7, (Copy_u8Character >> 3) & 1);
    2e3a:	89 ad       	ldd	r24, Y+57	; 0x39
    2e3c:	86 95       	lsr	r24
    2e3e:	86 95       	lsr	r24
    2e40:	86 95       	lsr	r24
    2e42:	98 2f       	mov	r25, r24
    2e44:	91 70       	andi	r25, 0x01	; 1
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	67 e0       	ldi	r22, 0x07	; 7
    2e4a:	49 2f       	mov	r20, r25
    2e4c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>

	/*Set enable pin from high to low with wide as 230ns*/
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	67 e0       	ldi	r22, 0x07	; 7
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a0 e0       	ldi	r26, 0x00	; 0
    2e60:	b0 e4       	ldi	r27, 0x40	; 64
    2e62:	89 8f       	std	Y+25, r24	; 0x19
    2e64:	9a 8f       	std	Y+26, r25	; 0x1a
    2e66:	ab 8f       	std	Y+27, r26	; 0x1b
    2e68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a e7       	ldi	r20, 0x7A	; 122
    2e78:	55 e4       	ldi	r21, 0x45	; 69
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8d 8b       	std	Y+21, r24	; 0x15
    2e84:	9e 8b       	std	Y+22, r25	; 0x16
    2e86:	af 8b       	std	Y+23, r26	; 0x17
    2e88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e90:	98 8d       	ldd	r25, Y+24	; 0x18
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <LCD_voidSendCharacter+0x304>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9c 8b       	std	Y+20, r25	; 0x14
    2ea8:	8b 8b       	std	Y+19, r24	; 0x13
    2eaa:	3f c0       	rjmp	.+126    	; 0x2f2a <LCD_voidSendCharacter+0x382>
	else if (__tmp > 65535)
    2eac:	6d 89       	ldd	r22, Y+21	; 0x15
    2eae:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	4c f5       	brge	.+82     	; 0x2f16 <LCD_voidSendCharacter+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <LCD_voidSendCharacter+0x364>
    2eee:	80 e9       	ldi	r24, 0x90	; 144
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	9a 8b       	std	Y+18, r25	; 0x12
    2ef4:	89 8b       	std	Y+17, r24	; 0x11
    2ef6:	89 89       	ldd	r24, Y+17	; 0x11
    2ef8:	9a 89       	ldd	r25, Y+18	; 0x12
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <LCD_voidSendCharacter+0x352>
    2efe:	9a 8b       	std	Y+18, r25	; 0x12
    2f00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	9c 89       	ldd	r25, Y+20	; 0x14
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	9c 8b       	std	Y+20, r25	; 0x14
    2f0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	69 f7       	brne	.-38     	; 0x2eee <LCD_voidSendCharacter+0x346>
    2f14:	14 c0       	rjmp	.+40     	; 0x2f3e <LCD_voidSendCharacter+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	6d 89       	ldd	r22, Y+21	; 0x15
    2f18:	7e 89       	ldd	r23, Y+22	; 0x16
    2f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9c 8b       	std	Y+20, r25	; 0x14
    2f28:	8b 8b       	std	Y+19, r24	; 0x13
    2f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2e:	98 8b       	std	Y+16, r25	; 0x10
    2f30:	8f 87       	std	Y+15, r24	; 0x0f
    2f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f34:	98 89       	ldd	r25, Y+16	; 0x10
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <LCD_voidSendCharacter+0x38e>
    2f3a:	98 8b       	std	Y+16, r25	; 0x10
    2f3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	67 e0       	ldi	r22, 0x07	; 7
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	a0 e0       	ldi	r26, 0x00	; 0
    2f4e:	b0 e4       	ldi	r27, 0x40	; 64
    2f50:	8b 87       	std	Y+11, r24	; 0x0b
    2f52:	9c 87       	std	Y+12, r25	; 0x0c
    2f54:	ad 87       	std	Y+13, r26	; 0x0d
    2f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a e7       	ldi	r20, 0x7A	; 122
    2f66:	55 e4       	ldi	r21, 0x45	; 69
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	8f 83       	std	Y+7, r24	; 0x07
    2f72:	98 87       	std	Y+8, r25	; 0x08
    2f74:	a9 87       	std	Y+9, r26	; 0x09
    2f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f78:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7a:	78 85       	ldd	r23, Y+8	; 0x08
    2f7c:	89 85       	ldd	r24, Y+9	; 0x09
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f8c:	88 23       	and	r24, r24
    2f8e:	2c f4       	brge	.+10     	; 0x2f9a <LCD_voidSendCharacter+0x3f2>
		__ticks = 1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9e 83       	std	Y+6, r25	; 0x06
    2f96:	8d 83       	std	Y+5, r24	; 0x05
    2f98:	3f c0       	rjmp	.+126    	; 0x3018 <LCD_voidSendCharacter+0x470>
	else if (__tmp > 65535)
    2f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9c:	78 85       	ldd	r23, Y+8	; 0x08
    2f9e:	89 85       	ldd	r24, Y+9	; 0x09
    2fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fae:	18 16       	cp	r1, r24
    2fb0:	4c f5       	brge	.+82     	; 0x3004 <LCD_voidSendCharacter+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <LCD_voidSendCharacter+0x452>
    2fdc:	80 e9       	ldi	r24, 0x90	; 144
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	9c 83       	std	Y+4, r25	; 0x04
    2fe2:	8b 83       	std	Y+3, r24	; 0x03
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <LCD_voidSendCharacter+0x440>
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	69 f7       	brne	.-38     	; 0x2fdc <LCD_voidSendCharacter+0x434>
    3002:	14 c0       	rjmp	.+40     	; 0x302c <LCD_voidSendCharacter+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3004:	6f 81       	ldd	r22, Y+7	; 0x07
    3006:	78 85       	ldd	r23, Y+8	; 0x08
    3008:	89 85       	ldd	r24, Y+9	; 0x09
    300a:	9a 85       	ldd	r25, Y+10	; 0x0a
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	9e 83       	std	Y+6, r25	; 0x06
    3016:	8d 83       	std	Y+5, r24	; 0x05
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	9e 81       	ldd	r25, Y+6	; 0x06
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	89 83       	std	Y+1, r24	; 0x01
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	9a 81       	ldd	r25, Y+2	; 0x02
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <LCD_voidSendCharacter+0x47c>
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "Wrong LCD init mode"
#endif

}
    302c:	e9 96       	adiw	r28, 0x39	; 57
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	08 95       	ret

0000303e <LCD_u8SendString>:


u8 LCD_u8SendString(const char* Copy_pchString)
{
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	00 d0       	rcall	.+0      	; 0x3044 <LCD_u8SendString+0x6>
    3044:	00 d0       	rcall	.+0      	; 0x3046 <LCD_u8SendString+0x8>
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	9c 83       	std	Y+4, r25	; 0x04
    304c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Iterator=0, Local_u8ErrorStatus = OK;
    304e:	1a 82       	std	Y+2, r1	; 0x02
    3050:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pchString != NULL)
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	9c 81       	ldd	r25, Y+4	; 0x04
    3056:	00 97       	sbiw	r24, 0x00	; 0
    3058:	d9 f0       	breq	.+54     	; 0x3090 <LCD_u8SendString+0x52>
    305a:	0e c0       	rjmp	.+28     	; 0x3078 <LCD_u8SendString+0x3a>
	{
		while(Copy_pchString[Local_u8Iterator] != '\0')
		{
			LCD_voidSendCharacter(Copy_pchString[Local_u8Iterator]);
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	fc 01       	movw	r30, r24
    3068:	e2 0f       	add	r30, r18
    306a:	f3 1f       	adc	r31, r19
    306c:	80 81       	ld	r24, Z
    306e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_voidSendCharacter>
			Local_u8Iterator++;
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	8f 5f       	subi	r24, 0xFF	; 255
    3076:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 Local_u8Iterator=0, Local_u8ErrorStatus = OK;

	if(Copy_pchString != NULL)
	{
		while(Copy_pchString[Local_u8Iterator] != '\0')
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	9c 81       	ldd	r25, Y+4	; 0x04
    3082:	fc 01       	movw	r30, r24
    3084:	e2 0f       	add	r30, r18
    3086:	f3 1f       	adc	r31, r19
    3088:	80 81       	ld	r24, Z
    308a:	88 23       	and	r24, r24
    308c:	39 f7       	brne	.-50     	; 0x305c <LCD_u8SendString+0x1e>
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <LCD_u8SendString+0x56>
			LCD_voidSendCharacter(Copy_pchString[Local_u8Iterator]);
			Local_u8Iterator++;
		}
	}
	else
		Local_u8ErrorStatus = LCD_E_PARAM_POINTER;
    3090:	8d e0       	ldi	r24, 0x0D	; 13
    3092:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
    3094:	89 81       	ldd	r24, Y+1	; 0x01
}
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <LCD_u8CreateCustomCharacter>:


u8 LCD_u8CreateCustomCharacter(const u8 *Copy_pu8Pattern, u8 Copy_u8Location)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <LCD_u8CreateCustomCharacter+0x6>
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <LCD_u8CreateCustomCharacter+0x8>
    30ac:	0f 92       	push	r0
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
    30b6:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Iterator=0, Local_u8ErrorStatus = OK;
    30b8:	1a 82       	std	Y+2, r1	; 0x02
    30ba:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Pattern != NULL)
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	9c 81       	ldd	r25, Y+4	; 0x04
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	d1 f1       	breq	.+116    	; 0x3138 <LCD_u8CreateCustomCharacter+0x94>
	{
		if(Copy_u8Location >= 0 && Copy_u8Location <= 7)
    30c4:	8d 81       	ldd	r24, Y+5	; 0x05
    30c6:	88 30       	cpi	r24, 0x08	; 8
    30c8:	a0 f5       	brcc	.+104    	; 0x3132 <LCD_u8CreateCustomCharacter+0x8e>
		{
			/*send location of CGRAM i want to write*/
#if LCD_InitMode == FourBit_Init
			LCD_voidSendCommand((0x40 + (Copy_u8Location*8))>> 4);
    30ca:	8d 81       	ldd	r24, Y+5	; 0x05
    30cc:	88 2f       	mov	r24, r24
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	08 96       	adiw	r24, 0x08	; 8
    30d2:	88 0f       	add	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	88 0f       	add	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	95 95       	asr	r25
    30e0:	87 95       	ror	r24
    30e2:	95 95       	asr	r25
    30e4:	87 95       	ror	r24
    30e6:	95 95       	asr	r25
    30e8:	87 95       	ror	r24
    30ea:	95 95       	asr	r25
    30ec:	87 95       	ror	r24
    30ee:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
#endif

			LCD_voidSendCommand((0x40 + (Copy_u8Location*8)));
    30f2:	8d 81       	ldd	r24, Y+5	; 0x05
    30f4:	88 2f       	mov	r24, r24
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	08 96       	adiw	r24, 0x08	; 8
    30fa:	88 0f       	add	r24, r24
    30fc:	99 1f       	adc	r25, r25
    30fe:	88 0f       	add	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
			{
				LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Iterator]);
			}
#elif LCD_Font_Size == FiveEleven_Size
			/*send Copy_pu8Pattern to save in CGRAM*/
			for(Local_u8Iterator = 0; Local_u8Iterator<11; Local_u8Iterator++)
    310a:	1a 82       	std	Y+2, r1	; 0x02
    310c:	0e c0       	rjmp	.+28     	; 0x312a <LCD_u8CreateCustomCharacter+0x86>
			{
				LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Iterator]);
    310e:	8a 81       	ldd	r24, Y+2	; 0x02
    3110:	28 2f       	mov	r18, r24
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	9c 81       	ldd	r25, Y+4	; 0x04
    3118:	fc 01       	movw	r30, r24
    311a:	e2 0f       	add	r30, r18
    311c:	f3 1f       	adc	r31, r19
    311e:	80 81       	ld	r24, Z
    3120:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_voidSendCharacter>
			{
				LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Iterator]);
			}
#elif LCD_Font_Size == FiveEleven_Size
			/*send Copy_pu8Pattern to save in CGRAM*/
			for(Local_u8Iterator = 0; Local_u8Iterator<11; Local_u8Iterator++)
    3124:	8a 81       	ldd	r24, Y+2	; 0x02
    3126:	8f 5f       	subi	r24, 0xFF	; 255
    3128:	8a 83       	std	Y+2, r24	; 0x02
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	8b 30       	cpi	r24, 0x0B	; 11
    312e:	78 f3       	brcs	.-34     	; 0x310e <LCD_u8CreateCustomCharacter+0x6a>
    3130:	05 c0       	rjmp	.+10     	; 0x313c <LCD_u8CreateCustomCharacter+0x98>
#error "Wrong LCD font size"
#endif

		}
		else
			Local_u8ErrorStatus = LCD_E_PARAM_INVALID_LOCATION_ID;
    3132:	8c e0       	ldi	r24, 0x0C	; 12
    3134:	89 83       	std	Y+1, r24	; 0x01
    3136:	02 c0       	rjmp	.+4      	; 0x313c <LCD_u8CreateCustomCharacter+0x98>
	}
	else
		Local_u8ErrorStatus = LCD_E_PARAM_POINTER;
    3138:	8d e0       	ldi	r24, 0x0D	; 13
    313a:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorStatus;
    313c:	89 81       	ldd	r24, Y+1	; 0x01
}
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <LCD_u8SendCustomCharacter>:


u8 LCD_u8SendCustomCharacter(u8 Copy_u8Location, u8 Copy_u8Row, u8 Copy_u8Col)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	00 d0       	rcall	.+0      	; 0x3154 <LCD_u8SendCustomCharacter+0x6>
    3154:	00 d0       	rcall	.+0      	; 0x3156 <LCD_u8SendCustomCharacter+0x8>
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	8a 83       	std	Y+2, r24	; 0x02
    315c:	6b 83       	std	Y+3, r22	; 0x03
    315e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = OK;
    3160:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Location >= 0 && Copy_u8Location <= 7)
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	88 30       	cpi	r24, 0x08	; 8
    3166:	a0 f4       	brcc	.+40     	; 0x3190 <LCD_u8SendCustomCharacter+0x42>
	{
		if(Copy_u8Row >= LCD_ROW0 && Copy_u8Row <= LCD_ROW3)
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	84 30       	cpi	r24, 0x04	; 4
    316c:	70 f4       	brcc	.+28     	; 0x318a <LCD_u8SendCustomCharacter+0x3c>
		{
			if(Copy_u8Col >= LCD_COL0 && Copy_u8Col <= LCD_COL19)
    316e:	8c 81       	ldd	r24, Y+4	; 0x04
    3170:	84 31       	cpi	r24, 0x14	; 20
    3172:	40 f4       	brcc	.+16     	; 0x3184 <LCD_u8SendCustomCharacter+0x36>
			{
				/*Go to ROW & COL i want to display on screen*/
				LCD_u8GoToRowCol(Copy_u8Row, Copy_u8Col);
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	6c 81       	ldd	r22, Y+4	; 0x04
    3178:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>

				/*send location to DDRAM to output the character on the screen*/
				LCD_voidSendCharacter(Copy_u8Location);
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_voidSendCharacter>
    3182:	08 c0       	rjmp	.+16     	; 0x3194 <LCD_u8SendCustomCharacter+0x46>
			}
			else
				Local_u8ErrorStatus = LCD_E_PARAM_INVALID_COL_ID;
    3184:	8b e0       	ldi	r24, 0x0B	; 11
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	05 c0       	rjmp	.+10     	; 0x3194 <LCD_u8SendCustomCharacter+0x46>
		}
		else
			Local_u8ErrorStatus = LCD_E_PARAM_INVALID_ROW_ID;
    318a:	8a e0       	ldi	r24, 0x0A	; 10
    318c:	89 83       	std	Y+1, r24	; 0x01
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <LCD_u8SendCustomCharacter+0x46>

	}
	else
		Local_u8ErrorStatus = LCD_E_PARAM_INVALID_LOCATION_ID;
    3190:	8c e0       	ldi	r24, 0x0C	; 12
    3192:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8ErrorStatus;
    3194:	89 81       	ldd	r24, Y+1	; 0x01
}
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <LCD_u8GoToRowCol>:


u8 LCD_u8GoToRowCol (u8 Copy_u8Row, u8 Copy_u8Col)
{
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <LCD_u8GoToRowCol+0x6>
    31aa:	00 d0       	rcall	.+0      	; 0x31ac <LCD_u8GoToRowCol+0x8>
    31ac:	0f 92       	push	r0
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	8c 83       	std	Y+4, r24	; 0x04
    31b4:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Location = 0, Local_u8Var = 0, Local_u8ErrorStatus = OK;
    31b6:	1b 82       	std	Y+3, r1	; 0x03
    31b8:	1a 82       	std	Y+2, r1	; 0x02
    31ba:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Row >= LCD_ROW0 && Copy_u8Row <= LCD_ROW3)
    31bc:	8c 81       	ldd	r24, Y+4	; 0x04
    31be:	84 30       	cpi	r24, 0x04	; 4
    31c0:	60 f5       	brcc	.+88     	; 0x321a <LCD_u8GoToRowCol+0x76>
	{
		if(Copy_u8Col >= LCD_COL0 && Copy_u8Col <= LCD_COL19)
    31c2:	8d 81       	ldd	r24, Y+5	; 0x05
    31c4:	84 31       	cpi	r24, 0x14	; 20
    31c6:	30 f5       	brcc	.+76     	; 0x3214 <LCD_u8GoToRowCol+0x70>
		{
			if(Copy_u8Row == LCD_ROW0)  /*Location is at first line*/
    31c8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ca:	88 23       	and	r24, r24
    31cc:	19 f4       	brne	.+6      	; 0x31d4 <LCD_u8GoToRowCol+0x30>
			{
				Local_u8Location = 0x00 + Copy_u8Col;
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	8b 83       	std	Y+3, r24	; 0x03
    31d2:	14 c0       	rjmp	.+40     	; 0x31fc <LCD_u8GoToRowCol+0x58>
			}
			else if(Copy_u8Row == LCD_ROW1)   /*Location is at second line*/
    31d4:	8c 81       	ldd	r24, Y+4	; 0x04
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	21 f4       	brne	.+8      	; 0x31e2 <LCD_u8GoToRowCol+0x3e>
			{
				Local_u8Location = 0x40 + Copy_u8Col;
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	80 5c       	subi	r24, 0xC0	; 192
    31de:	8b 83       	std	Y+3, r24	; 0x03
    31e0:	0d c0       	rjmp	.+26     	; 0x31fc <LCD_u8GoToRowCol+0x58>
			}
			else if(Copy_u8Row == LCD_ROW2)   /*Location is at third line*/
    31e2:	8c 81       	ldd	r24, Y+4	; 0x04
    31e4:	82 30       	cpi	r24, 0x02	; 2
    31e6:	21 f4       	brne	.+8      	; 0x31f0 <LCD_u8GoToRowCol+0x4c>
			{
				Local_u8Location = 0x14 + Copy_u8Col;
    31e8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ea:	8c 5e       	subi	r24, 0xEC	; 236
    31ec:	8b 83       	std	Y+3, r24	; 0x03
    31ee:	06 c0       	rjmp	.+12     	; 0x31fc <LCD_u8GoToRowCol+0x58>
			}
			else if(Copy_u8Row == LCD_ROW3)   /*Location is at fourth line*/
    31f0:	8c 81       	ldd	r24, Y+4	; 0x04
    31f2:	83 30       	cpi	r24, 0x03	; 3
    31f4:	19 f4       	brne	.+6      	; 0x31fc <LCD_u8GoToRowCol+0x58>
			{
				Local_u8Location = 0x54 + Copy_u8Col;
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	8c 5a       	subi	r24, 0xAC	; 172
    31fa:	8b 83       	std	Y+3, r24	; 0x03

#if LCD_InitMode == EightBit_Init
			/*send address of the ROW & COL*/
			LCD_voidSendCommand(CURSOR_OFFEST | Local_u8Location);
#elif LCD_InitMode == FourBit_Init
			Local_u8Var = CURSOR_OFFEST | Local_u8Location;
    31fc:	8b 81       	ldd	r24, Y+3	; 0x03
    31fe:	80 68       	ori	r24, 0x80	; 128
    3200:	8a 83       	std	Y+2, r24	; 0x02
			LCD_voidSendCommand(Local_u8Var >> 4); 		//send upper nibble first
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	82 95       	swap	r24
    3206:	8f 70       	andi	r24, 0x0F	; 15
    3208:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
			LCD_voidSendCommand(Local_u8Var); 			//send lower nibble
    320c:	8a 81       	ldd	r24, Y+2	; 0x02
    320e:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_voidSendCommand>
    3212:	05 c0       	rjmp	.+10     	; 0x321e <LCD_u8GoToRowCol+0x7a>
#endif
		}
		else
			Local_u8ErrorStatus = LCD_E_PARAM_INVALID_COL_ID;
    3214:	8b e0       	ldi	r24, 0x0B	; 11
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	02 c0       	rjmp	.+4      	; 0x321e <LCD_u8GoToRowCol+0x7a>

	}
	else
		Local_u8ErrorStatus = LCD_E_PARAM_INVALID_ROW_ID;
    321a:	8a e0       	ldi	r24, 0x0A	; 10
    321c:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8ErrorStatus;
    321e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <LCD_voidSendNumber>:


void LCD_voidSendNumber(s32 Copy_s32Number)
{
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	2e 97       	sbiw	r28, 0x0e	; 14
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	cd bf       	out	0x3d, r28	; 61
    3244:	6b 87       	std	Y+11, r22	; 0x0b
    3246:	7c 87       	std	Y+12, r23	; 0x0c
    3248:	8d 87       	std	Y+13, r24	; 0x0d
    324a:	9e 87       	std	Y+14, r25	; 0x0e
	u8 Local_u8String[10] = {'\0'};
    324c:	8a e0       	ldi	r24, 0x0A	; 10
    324e:	fe 01       	movw	r30, r28
    3250:	31 96       	adiw	r30, 0x01	; 1
    3252:	df 01       	movw	r26, r30
    3254:	98 2f       	mov	r25, r24
    3256:	1d 92       	st	X+, r1
    3258:	9a 95       	dec	r25
    325a:	e9 f7       	brne	.-6      	; 0x3256 <LCD_voidSendNumber+0x26>

	/* convert Copy_s32Number to a string*/
	ConvertToString((char*)Local_u8String, Copy_s32Number);
    325c:	2b 85       	ldd	r18, Y+11	; 0x0b
    325e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3260:	4d 85       	ldd	r20, Y+13	; 0x0d
    3262:	5e 85       	ldd	r21, Y+14	; 0x0e
    3264:	ce 01       	movw	r24, r28
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	ba 01       	movw	r22, r20
    326a:	a9 01       	movw	r20, r18
    326c:	0e 94 c8 1a 	call	0x3590	; 0x3590 <ConvertToString>

	/* send ConvertToString */
	LCD_u8SendString((char*)Local_u8String);
    3270:	ce 01       	movw	r24, r28
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
}
    3278:	2e 96       	adiw	r28, 0x0e	; 14
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <LDR_u8GetValue>:
#include "LDR_config.h"


/********************************				Function Definitions				********************************/
u8 LDR_u8GetValue (u32* copy_pu32Value, u16 copy_u16Analog)
{
    328a:	ef 92       	push	r14
    328c:	ff 92       	push	r15
    328e:	0f 93       	push	r16
    3290:	1f 93       	push	r17
    3292:	df 93       	push	r29
    3294:	cf 93       	push	r28
    3296:	00 d0       	rcall	.+0      	; 0x3298 <LDR_u8GetValue+0xe>
    3298:	00 d0       	rcall	.+0      	; 0x329a <LDR_u8GetValue+0x10>
    329a:	0f 92       	push	r0
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	9b 83       	std	Y+3, r25	; 0x03
    32a2:	8a 83       	std	Y+2, r24	; 0x02
    32a4:	7d 83       	std	Y+5, r23	; 0x05
    32a6:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    32a8:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u16Analog != NULL)
    32aa:	8c 81       	ldd	r24, Y+4	; 0x04
    32ac:	9d 81       	ldd	r25, Y+5	; 0x05
    32ae:	00 97       	sbiw	r24, 0x00	; 0
    32b0:	49 f1       	breq	.+82     	; 0x3304 <LDR_u8GetValue+0x7a>
	{
		*copy_pu32Value = (u32)((u32)((LDR_VIN - copy_u16Analog) * LDR_R) / copy_u16Analog);
    32b2:	8c 81       	ldd	r24, Y+4	; 0x04
    32b4:	9d 81       	ldd	r25, Y+5	; 0x05
    32b6:	9c 01       	movw	r18, r24
    32b8:	40 e0       	ldi	r20, 0x00	; 0
    32ba:	50 e0       	ldi	r21, 0x00	; 0
    32bc:	88 e8       	ldi	r24, 0x88	; 136
    32be:	93 e1       	ldi	r25, 0x13	; 19
    32c0:	a0 e0       	ldi	r26, 0x00	; 0
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	82 1b       	sub	r24, r18
    32c6:	93 0b       	sbc	r25, r19
    32c8:	a4 0b       	sbc	r26, r20
    32ca:	b5 0b       	sbc	r27, r21
    32cc:	28 ee       	ldi	r18, 0xE8	; 232
    32ce:	33 e0       	ldi	r19, 0x03	; 3
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	bc 01       	movw	r22, r24
    32d6:	cd 01       	movw	r24, r26
    32d8:	0e 94 4c 22 	call	0x4498	; 0x4498 <__mulsi3>
    32dc:	7b 01       	movw	r14, r22
    32de:	8c 01       	movw	r16, r24
    32e0:	8c 81       	ldd	r24, Y+4	; 0x04
    32e2:	9d 81       	ldd	r25, Y+5	; 0x05
    32e4:	9c 01       	movw	r18, r24
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	c8 01       	movw	r24, r16
    32ec:	b7 01       	movw	r22, r14
    32ee:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <__udivmodsi4>
    32f2:	da 01       	movw	r26, r20
    32f4:	c9 01       	movw	r24, r18
    32f6:	ea 81       	ldd	r30, Y+2	; 0x02
    32f8:	fb 81       	ldd	r31, Y+3	; 0x03
    32fa:	80 83       	st	Z, r24
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	a2 83       	std	Z+2, r26	; 0x02
    3300:	b3 83       	std	Z+3, r27	; 0x03
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <LDR_u8GetValue+0x7e>
	}
	else
		Local_u8ErrorState = LDR_E_PARAM_POINTER;
    3304:	8a e0       	ldi	r24, 0x0A	; 10
    3306:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    3308:	89 81       	ldd	r24, Y+1	; 0x01
}
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	08 95       	ret

00003322 <LED_u8On>:


/********************************				Function Definitions				********************************/

u8 LED_u8On (u8 copy_u8Port, u8 copy_u8Pin)
{
    3322:	df 93       	push	r29
    3324:	cf 93       	push	r28
    3326:	00 d0       	rcall	.+0      	; 0x3328 <LED_u8On+0x6>
    3328:	0f 92       	push	r0
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	8a 83       	std	Y+2, r24	; 0x02
    3330:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    3332:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Port >= DIO_PORTA && copy_u8Port <= DIO_PORTD)
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	84 30       	cpi	r24, 0x04	; 4
    3338:	60 f4       	brcc	.+24     	; 0x3352 <LED_u8On+0x30>
	{
		if(copy_u8Pin >= DIO_PIN0 && copy_u8Pin <= DIO_PIN7)
    333a:	8b 81       	ldd	r24, Y+3	; 0x03
    333c:	88 30       	cpi	r24, 0x08	; 8
    333e:	30 f4       	brcc	.+12     	; 0x334c <LED_u8On+0x2a>
		{
			DIO_u8SetPinValue(copy_u8Port, copy_u8Pin, DIO_PIN_HIGH);
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	6b 81       	ldd	r22, Y+3	; 0x03
    3344:	41 e0       	ldi	r20, 0x01	; 1
    3346:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
    334a:	05 c0       	rjmp	.+10     	; 0x3356 <LED_u8On+0x34>
		}
		else
			Local_u8ErrorState = LED_E_PARAM_INVALID_PIN_ID;
    334c:	8a e0       	ldi	r24, 0x0A	; 10
    334e:	89 83       	std	Y+1, r24	; 0x01
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <LED_u8On+0x34>
	}
	else
		Local_u8ErrorState = LED_E_PARAM_INVALID_PORT_ID;
    3352:	8b e0       	ldi	r24, 0x0B	; 11
    3354:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    3356:	89 81       	ldd	r24, Y+1	; 0x01
}
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	08 95       	ret

00003364 <LED_u8Off>:

u8 LED_u8Off (u8 copy_u8Port, u8 copy_u8Pin)
{
    3364:	df 93       	push	r29
    3366:	cf 93       	push	r28
    3368:	00 d0       	rcall	.+0      	; 0x336a <LED_u8Off+0x6>
    336a:	0f 92       	push	r0
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	8a 83       	std	Y+2, r24	; 0x02
    3372:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    3374:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Port >= DIO_PORTA && copy_u8Port <= DIO_PORTD)
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	84 30       	cpi	r24, 0x04	; 4
    337a:	60 f4       	brcc	.+24     	; 0x3394 <LED_u8Off+0x30>
	{
		if(copy_u8Pin >= DIO_PIN0 && copy_u8Pin <= DIO_PIN7)
    337c:	8b 81       	ldd	r24, Y+3	; 0x03
    337e:	88 30       	cpi	r24, 0x08	; 8
    3380:	30 f4       	brcc	.+12     	; 0x338e <LED_u8Off+0x2a>
		{
			DIO_u8SetPinValue(copy_u8Port, copy_u8Pin, DIO_PIN_LOW);
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	6b 81       	ldd	r22, Y+3	; 0x03
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_u8SetPinValue>
    338c:	05 c0       	rjmp	.+10     	; 0x3398 <LED_u8Off+0x34>
		}
		else
			Local_u8ErrorState = LED_E_PARAM_INVALID_PIN_ID;
    338e:	8a e0       	ldi	r24, 0x0A	; 10
    3390:	89 83       	std	Y+1, r24	; 0x01
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <LED_u8Off+0x34>
	}
	else
		Local_u8ErrorState = LED_E_PARAM_INVALID_PORT_ID;
    3394:	8b e0       	ldi	r24, 0x0B	; 11
    3396:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    3398:	89 81       	ldd	r24, Y+1	; 0x01
}
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	08 95       	ret

000033a6 <LED_u8Tog>:

u8 LED_u8Tog (u8 copy_u8Port, u8 copy_u8Pin)
{
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	00 d0       	rcall	.+0      	; 0x33ac <LED_u8Tog+0x6>
    33ac:	0f 92       	push	r0
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	8a 83       	std	Y+2, r24	; 0x02
    33b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    33b6:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Port >= DIO_PORTA && copy_u8Port <= DIO_PORTD)
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	84 30       	cpi	r24, 0x04	; 4
    33bc:	58 f4       	brcc	.+22     	; 0x33d4 <LED_u8Tog+0x2e>
	{
		if(copy_u8Pin >= DIO_PIN0 && copy_u8Pin <= DIO_PIN7)
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	88 30       	cpi	r24, 0x08	; 8
    33c2:	28 f4       	brcc	.+10     	; 0x33ce <LED_u8Tog+0x28>
		{
			DIO_u8TogglePinValue(copy_u8Port, copy_u8Pin);
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	6b 81       	ldd	r22, Y+3	; 0x03
    33c8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_u8TogglePinValue>
    33cc:	05 c0       	rjmp	.+10     	; 0x33d8 <LED_u8Tog+0x32>
		}
		else
			Local_u8ErrorState = LED_E_PARAM_INVALID_PIN_ID;
    33ce:	8a e0       	ldi	r24, 0x0A	; 10
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <LED_u8Tog+0x32>
	}
	else
		Local_u8ErrorState = LED_E_PARAM_INVALID_PORT_ID;
    33d4:	8b e0       	ldi	r24, 0x0B	; 11
    33d6:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <s32Map>:
#include "STD_TYPES.h"
#include "User_Functions.h"


s32 s32Map (s32 InputMin, s32 InputMax, s32 OutputMin, s32 OutputMax, s32 InputValue)
{
    33e6:	af 92       	push	r10
    33e8:	bf 92       	push	r11
    33ea:	cf 92       	push	r12
    33ec:	df 92       	push	r13
    33ee:	ef 92       	push	r14
    33f0:	ff 92       	push	r15
    33f2:	0f 93       	push	r16
    33f4:	1f 93       	push	r17
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	a4 97       	sbiw	r28, 0x24	; 36
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	69 8b       	std	Y+17, r22	; 0x11
    340c:	7a 8b       	std	Y+18, r23	; 0x12
    340e:	8b 8b       	std	Y+19, r24	; 0x13
    3410:	9c 8b       	std	Y+20, r25	; 0x14
    3412:	2d 8b       	std	Y+21, r18	; 0x15
    3414:	3e 8b       	std	Y+22, r19	; 0x16
    3416:	4f 8b       	std	Y+23, r20	; 0x17
    3418:	58 8f       	std	Y+24, r21	; 0x18
    341a:	e9 8e       	std	Y+25, r14	; 0x19
    341c:	fa 8e       	std	Y+26, r15	; 0x1a
    341e:	0b 8f       	std	Y+27, r16	; 0x1b
    3420:	1c 8f       	std	Y+28, r17	; 0x1c
    3422:	ad 8e       	std	Y+29, r10	; 0x1d
    3424:	be 8e       	std	Y+30, r11	; 0x1e
    3426:	cf 8e       	std	Y+31, r12	; 0x1f
    3428:	d8 a2       	std	Y+32, r13	; 0x20
	/*y is output, x is input
	 * (y-y1)/(x-x1) = (y2-y1)/(x2-x1)
	 * */
	s32 s32Local_OutputDiference = OutputMax - OutputMin;
    342a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    342c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    342e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3430:	58 a1       	ldd	r21, Y+32	; 0x20
    3432:	89 8d       	ldd	r24, Y+25	; 0x19
    3434:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3436:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3438:	bc 8d       	ldd	r27, Y+28	; 0x1c
    343a:	79 01       	movw	r14, r18
    343c:	8a 01       	movw	r16, r20
    343e:	e8 1a       	sub	r14, r24
    3440:	f9 0a       	sbc	r15, r25
    3442:	0a 0b       	sbc	r16, r26
    3444:	1b 0b       	sbc	r17, r27
    3446:	d8 01       	movw	r26, r16
    3448:	c7 01       	movw	r24, r14
    344a:	8d 87       	std	Y+13, r24	; 0x0d
    344c:	9e 87       	std	Y+14, r25	; 0x0e
    344e:	af 87       	std	Y+15, r26	; 0x0f
    3450:	b8 8b       	std	Y+16, r27	; 0x10
	s32 s32Local_InputDiference = InputMax - InputMin;
    3452:	2d 89       	ldd	r18, Y+21	; 0x15
    3454:	3e 89       	ldd	r19, Y+22	; 0x16
    3456:	4f 89       	ldd	r20, Y+23	; 0x17
    3458:	58 8d       	ldd	r21, Y+24	; 0x18
    345a:	89 89       	ldd	r24, Y+17	; 0x11
    345c:	9a 89       	ldd	r25, Y+18	; 0x12
    345e:	ab 89       	ldd	r26, Y+19	; 0x13
    3460:	bc 89       	ldd	r27, Y+20	; 0x14
    3462:	79 01       	movw	r14, r18
    3464:	8a 01       	movw	r16, r20
    3466:	e8 1a       	sub	r14, r24
    3468:	f9 0a       	sbc	r15, r25
    346a:	0a 0b       	sbc	r16, r26
    346c:	1b 0b       	sbc	r17, r27
    346e:	d8 01       	movw	r26, r16
    3470:	c7 01       	movw	r24, r14
    3472:	89 87       	std	Y+9, r24	; 0x09
    3474:	9a 87       	std	Y+10, r25	; 0x0a
    3476:	ab 87       	std	Y+11, r26	; 0x0b
    3478:	bc 87       	std	Y+12, r27	; 0x0c
	s32 s32Local_InputCalculation = InputValue - InputMin;
    347a:	29 a9       	ldd	r18, Y+49	; 0x31
    347c:	3a a9       	ldd	r19, Y+50	; 0x32
    347e:	4b a9       	ldd	r20, Y+51	; 0x33
    3480:	5c a9       	ldd	r21, Y+52	; 0x34
    3482:	89 89       	ldd	r24, Y+17	; 0x11
    3484:	9a 89       	ldd	r25, Y+18	; 0x12
    3486:	ab 89       	ldd	r26, Y+19	; 0x13
    3488:	bc 89       	ldd	r27, Y+20	; 0x14
    348a:	79 01       	movw	r14, r18
    348c:	8a 01       	movw	r16, r20
    348e:	e8 1a       	sub	r14, r24
    3490:	f9 0a       	sbc	r15, r25
    3492:	0a 0b       	sbc	r16, r26
    3494:	1b 0b       	sbc	r17, r27
    3496:	d8 01       	movw	r26, r16
    3498:	c7 01       	movw	r24, r14
    349a:	8d 83       	std	Y+5, r24	; 0x05
    349c:	9e 83       	std	Y+6, r25	; 0x06
    349e:	af 83       	std	Y+7, r26	; 0x07
    34a0:	b8 87       	std	Y+8, r27	; 0x08

	s32 s32Local_Output = (s32) ((s32Local_OutputDiference * s32Local_InputCalculation) / s32Local_InputDiference);
    34a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34a6:	af 85       	ldd	r26, Y+15	; 0x0f
    34a8:	b8 89       	ldd	r27, Y+16	; 0x10
    34aa:	2d 81       	ldd	r18, Y+5	; 0x05
    34ac:	3e 81       	ldd	r19, Y+6	; 0x06
    34ae:	4f 81       	ldd	r20, Y+7	; 0x07
    34b0:	58 85       	ldd	r21, Y+8	; 0x08
    34b2:	bc 01       	movw	r22, r24
    34b4:	cd 01       	movw	r24, r26
    34b6:	0e 94 4c 22 	call	0x4498	; 0x4498 <__mulsi3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	29 85       	ldd	r18, Y+9	; 0x09
    34c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    34c2:	4b 85       	ldd	r20, Y+11	; 0x0b
    34c4:	5c 85       	ldd	r21, Y+12	; 0x0c
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 8d 22 	call	0x451a	; 0x451a <__divmodsi4>
    34ce:	da 01       	movw	r26, r20
    34d0:	c9 01       	movw	r24, r18
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	ab 83       	std	Y+3, r26	; 0x03
    34d8:	bc 83       	std	Y+4, r27	; 0x04
	s32Local_Output += OutputMin;
    34da:	29 81       	ldd	r18, Y+1	; 0x01
    34dc:	3a 81       	ldd	r19, Y+2	; 0x02
    34de:	4b 81       	ldd	r20, Y+3	; 0x03
    34e0:	5c 81       	ldd	r21, Y+4	; 0x04
    34e2:	89 8d       	ldd	r24, Y+25	; 0x19
    34e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34e6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    34e8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    34ea:	82 0f       	add	r24, r18
    34ec:	93 1f       	adc	r25, r19
    34ee:	a4 1f       	adc	r26, r20
    34f0:	b5 1f       	adc	r27, r21
    34f2:	89 83       	std	Y+1, r24	; 0x01
    34f4:	9a 83       	std	Y+2, r25	; 0x02
    34f6:	ab 83       	std	Y+3, r26	; 0x03
    34f8:	bc 83       	std	Y+4, r27	; 0x04

	if(s32Local_Output <= OutputMin)
    34fa:	29 81       	ldd	r18, Y+1	; 0x01
    34fc:	3a 81       	ldd	r19, Y+2	; 0x02
    34fe:	4b 81       	ldd	r20, Y+3	; 0x03
    3500:	5c 81       	ldd	r21, Y+4	; 0x04
    3502:	89 8d       	ldd	r24, Y+25	; 0x19
    3504:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3506:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3508:	bc 8d       	ldd	r27, Y+28	; 0x1c
    350a:	82 17       	cp	r24, r18
    350c:	93 07       	cpc	r25, r19
    350e:	a4 07       	cpc	r26, r20
    3510:	b5 07       	cpc	r27, r21
    3512:	4c f0       	brlt	.+18     	; 0x3526 <s32Map+0x140>
		return OutputMin;
    3514:	89 8d       	ldd	r24, Y+25	; 0x19
    3516:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3518:	ab 8d       	ldd	r26, Y+27	; 0x1b
    351a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    351c:	89 a3       	std	Y+33, r24	; 0x21
    351e:	9a a3       	std	Y+34, r25	; 0x22
    3520:	ab a3       	std	Y+35, r26	; 0x23
    3522:	bc a3       	std	Y+36, r27	; 0x24
    3524:	1e c0       	rjmp	.+60     	; 0x3562 <s32Map+0x17c>
	else if(s32Local_Output >= OutputMax)
    3526:	29 81       	ldd	r18, Y+1	; 0x01
    3528:	3a 81       	ldd	r19, Y+2	; 0x02
    352a:	4b 81       	ldd	r20, Y+3	; 0x03
    352c:	5c 81       	ldd	r21, Y+4	; 0x04
    352e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3530:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3532:	af 8d       	ldd	r26, Y+31	; 0x1f
    3534:	b8 a1       	ldd	r27, Y+32	; 0x20
    3536:	28 17       	cp	r18, r24
    3538:	39 07       	cpc	r19, r25
    353a:	4a 07       	cpc	r20, r26
    353c:	5b 07       	cpc	r21, r27
    353e:	4c f0       	brlt	.+18     	; 0x3552 <s32Map+0x16c>
		return OutputMax;
    3540:	ed 8c       	ldd	r14, Y+29	; 0x1d
    3542:	fe 8c       	ldd	r15, Y+30	; 0x1e
    3544:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3546:	18 a1       	ldd	r17, Y+32	; 0x20
    3548:	e9 a2       	std	Y+33, r14	; 0x21
    354a:	fa a2       	std	Y+34, r15	; 0x22
    354c:	0b a3       	std	Y+35, r16	; 0x23
    354e:	1c a3       	std	Y+36, r17	; 0x24
    3550:	08 c0       	rjmp	.+16     	; 0x3562 <s32Map+0x17c>
	else
		return s32Local_Output;
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	ab 81       	ldd	r26, Y+3	; 0x03
    3558:	bc 81       	ldd	r27, Y+4	; 0x04
    355a:	89 a3       	std	Y+33, r24	; 0x21
    355c:	9a a3       	std	Y+34, r25	; 0x22
    355e:	ab a3       	std	Y+35, r26	; 0x23
    3560:	bc a3       	std	Y+36, r27	; 0x24
    3562:	89 a1       	ldd	r24, Y+33	; 0x21
    3564:	9a a1       	ldd	r25, Y+34	; 0x22
    3566:	ab a1       	ldd	r26, Y+35	; 0x23
    3568:	bc a1       	ldd	r27, Y+36	; 0x24

}
    356a:	bc 01       	movw	r22, r24
    356c:	cd 01       	movw	r24, r26
    356e:	a4 96       	adiw	r28, 0x24	; 36
    3570:	0f b6       	in	r0, 0x3f	; 63
    3572:	f8 94       	cli
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	cd bf       	out	0x3d, r28	; 61
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	1f 91       	pop	r17
    3580:	0f 91       	pop	r16
    3582:	ff 90       	pop	r15
    3584:	ef 90       	pop	r14
    3586:	df 90       	pop	r13
    3588:	cf 90       	pop	r12
    358a:	bf 90       	pop	r11
    358c:	af 90       	pop	r10
    358e:	08 95       	ret

00003590 <ConvertToString>:


void ConvertToString(char* Copy_String, s32 s32Copy_Number)
{
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	67 97       	sbiw	r28, 0x17	; 23
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	9b 8b       	std	Y+19, r25	; 0x13
    35a6:	8a 8b       	std	Y+18, r24	; 0x12
    35a8:	4c 8b       	std	Y+20, r20	; 0x14
    35aa:	5d 8b       	std	Y+21, r21	; 0x15
    35ac:	6e 8b       	std	Y+22, r22	; 0x16
    35ae:	7f 8b       	std	Y+23, r23	; 0x17
	s32 s32Local_Temp1 = 0, s32Local_Length = 0, s32Local_Remainder = 0, s32Local_Temp2 = 0;
    35b0:	1e 86       	std	Y+14, r1	; 0x0e
    35b2:	1f 86       	std	Y+15, r1	; 0x0f
    35b4:	18 8a       	std	Y+16, r1	; 0x10
    35b6:	19 8a       	std	Y+17, r1	; 0x11
    35b8:	1a 86       	std	Y+10, r1	; 0x0a
    35ba:	1b 86       	std	Y+11, r1	; 0x0b
    35bc:	1c 86       	std	Y+12, r1	; 0x0c
    35be:	1d 86       	std	Y+13, r1	; 0x0d
    35c0:	1e 82       	std	Y+6, r1	; 0x06
    35c2:	1f 82       	std	Y+7, r1	; 0x07
    35c4:	18 86       	std	Y+8, r1	; 0x08
    35c6:	19 86       	std	Y+9, r1	; 0x09
    35c8:	1a 82       	std	Y+2, r1	; 0x02
    35ca:	1b 82       	std	Y+3, r1	; 0x03
    35cc:	1c 82       	std	Y+4, r1	; 0x04
    35ce:	1d 82       	std	Y+5, r1	; 0x05

	if(s32Copy_Number == 0)
    35d0:	8c 89       	ldd	r24, Y+20	; 0x14
    35d2:	9d 89       	ldd	r25, Y+21	; 0x15
    35d4:	ae 89       	ldd	r26, Y+22	; 0x16
    35d6:	bf 89       	ldd	r27, Y+23	; 0x17
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	a1 05       	cpc	r26, r1
    35dc:	b1 05       	cpc	r27, r1
    35de:	c1 f4       	brne	.+48     	; 0x3610 <ConvertToString+0x80>
	{
		Copy_String[0] = '0';
    35e0:	ea 89       	ldd	r30, Y+18	; 0x12
    35e2:	fb 89       	ldd	r31, Y+19	; 0x13
    35e4:	80 e3       	ldi	r24, 0x30	; 48
    35e6:	80 83       	st	Z, r24
		s32Local_Length++;
    35e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    35ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    35ec:	ac 85       	ldd	r26, Y+12	; 0x0c
    35ee:	bd 85       	ldd	r27, Y+13	; 0x0d
    35f0:	01 96       	adiw	r24, 0x01	; 1
    35f2:	a1 1d       	adc	r26, r1
    35f4:	b1 1d       	adc	r27, r1
    35f6:	8a 87       	std	Y+10, r24	; 0x0a
    35f8:	9b 87       	std	Y+11, r25	; 0x0b
    35fa:	ac 87       	std	Y+12, r26	; 0x0c
    35fc:	bd 87       	std	Y+13, r27	; 0x0d
		Copy_String[s32Local_Length] = '\0';
    35fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    3600:	3b 85       	ldd	r19, Y+11	; 0x0b
    3602:	8a 89       	ldd	r24, Y+18	; 0x12
    3604:	9b 89       	ldd	r25, Y+19	; 0x13
    3606:	fc 01       	movw	r30, r24
    3608:	e2 0f       	add	r30, r18
    360a:	f3 1f       	adc	r31, r19
    360c:	10 82       	st	Z, r1
    360e:	b2 c0       	rjmp	.+356    	; 0x3774 <ConvertToString+0x1e4>
	}
	else
	{
		s32Local_Temp2 = s32Copy_Number;
    3610:	8c 89       	ldd	r24, Y+20	; 0x14
    3612:	9d 89       	ldd	r25, Y+21	; 0x15
    3614:	ae 89       	ldd	r26, Y+22	; 0x16
    3616:	bf 89       	ldd	r27, Y+23	; 0x17
    3618:	8a 83       	std	Y+2, r24	; 0x02
    361a:	9b 83       	std	Y+3, r25	; 0x03
    361c:	ac 83       	std	Y+4, r26	; 0x04
    361e:	bd 83       	std	Y+5, r27	; 0x05
		if(s32Local_Temp2<0)
    3620:	8a 81       	ldd	r24, Y+2	; 0x02
    3622:	9b 81       	ldd	r25, Y+3	; 0x03
    3624:	ac 81       	ldd	r26, Y+4	; 0x04
    3626:	bd 81       	ldd	r27, Y+5	; 0x05
    3628:	bb 23       	and	r27, r27
    362a:	d4 f4       	brge	.+52     	; 0x3660 <ConvertToString+0xd0>
		{
			s32Local_Length++;
    362c:	8a 85       	ldd	r24, Y+10	; 0x0a
    362e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3630:	ac 85       	ldd	r26, Y+12	; 0x0c
    3632:	bd 85       	ldd	r27, Y+13	; 0x0d
    3634:	01 96       	adiw	r24, 0x01	; 1
    3636:	a1 1d       	adc	r26, r1
    3638:	b1 1d       	adc	r27, r1
    363a:	8a 87       	std	Y+10, r24	; 0x0a
    363c:	9b 87       	std	Y+11, r25	; 0x0b
    363e:	ac 87       	std	Y+12, r26	; 0x0c
    3640:	bd 87       	std	Y+13, r27	; 0x0d
			s32Copy_Number *= -1;
    3642:	8c 89       	ldd	r24, Y+20	; 0x14
    3644:	9d 89       	ldd	r25, Y+21	; 0x15
    3646:	ae 89       	ldd	r26, Y+22	; 0x16
    3648:	bf 89       	ldd	r27, Y+23	; 0x17
    364a:	b0 95       	com	r27
    364c:	a0 95       	com	r26
    364e:	90 95       	com	r25
    3650:	81 95       	neg	r24
    3652:	9f 4f       	sbci	r25, 0xFF	; 255
    3654:	af 4f       	sbci	r26, 0xFF	; 255
    3656:	bf 4f       	sbci	r27, 0xFF	; 255
    3658:	8c 8b       	std	Y+20, r24	; 0x14
    365a:	9d 8b       	std	Y+21, r25	; 0x15
    365c:	ae 8b       	std	Y+22, r26	; 0x16
    365e:	bf 8b       	std	Y+23, r27	; 0x17
		}

		s32Local_Temp1 = s32Copy_Number;
    3660:	8c 89       	ldd	r24, Y+20	; 0x14
    3662:	9d 89       	ldd	r25, Y+21	; 0x15
    3664:	ae 89       	ldd	r26, Y+22	; 0x16
    3666:	bf 89       	ldd	r27, Y+23	; 0x17
    3668:	8e 87       	std	Y+14, r24	; 0x0e
    366a:	9f 87       	std	Y+15, r25	; 0x0f
    366c:	a8 8b       	std	Y+16, r26	; 0x10
    366e:	b9 8b       	std	Y+17, r27	; 0x11
    3670:	1d c0       	rjmp	.+58     	; 0x36ac <ConvertToString+0x11c>
		while(s32Local_Temp1 > 0)
		{
			s32Local_Temp1 /= 10;
    3672:	8e 85       	ldd	r24, Y+14	; 0x0e
    3674:	9f 85       	ldd	r25, Y+15	; 0x0f
    3676:	a8 89       	ldd	r26, Y+16	; 0x10
    3678:	b9 89       	ldd	r27, Y+17	; 0x11
    367a:	2a e0       	ldi	r18, 0x0A	; 10
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e0       	ldi	r20, 0x00	; 0
    3680:	50 e0       	ldi	r21, 0x00	; 0
    3682:	bc 01       	movw	r22, r24
    3684:	cd 01       	movw	r24, r26
    3686:	0e 94 8d 22 	call	0x451a	; 0x451a <__divmodsi4>
    368a:	da 01       	movw	r26, r20
    368c:	c9 01       	movw	r24, r18
    368e:	8e 87       	std	Y+14, r24	; 0x0e
    3690:	9f 87       	std	Y+15, r25	; 0x0f
    3692:	a8 8b       	std	Y+16, r26	; 0x10
    3694:	b9 8b       	std	Y+17, r27	; 0x11
			s32Local_Length++;
    3696:	8a 85       	ldd	r24, Y+10	; 0x0a
    3698:	9b 85       	ldd	r25, Y+11	; 0x0b
    369a:	ac 85       	ldd	r26, Y+12	; 0x0c
    369c:	bd 85       	ldd	r27, Y+13	; 0x0d
    369e:	01 96       	adiw	r24, 0x01	; 1
    36a0:	a1 1d       	adc	r26, r1
    36a2:	b1 1d       	adc	r27, r1
    36a4:	8a 87       	std	Y+10, r24	; 0x0a
    36a6:	9b 87       	std	Y+11, r25	; 0x0b
    36a8:	ac 87       	std	Y+12, r26	; 0x0c
    36aa:	bd 87       	std	Y+13, r27	; 0x0d
			s32Local_Length++;
			s32Copy_Number *= -1;
		}

		s32Local_Temp1 = s32Copy_Number;
		while(s32Local_Temp1 > 0)
    36ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    36ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    36b0:	a8 89       	ldd	r26, Y+16	; 0x10
    36b2:	b9 89       	ldd	r27, Y+17	; 0x11
    36b4:	18 16       	cp	r1, r24
    36b6:	19 06       	cpc	r1, r25
    36b8:	1a 06       	cpc	r1, r26
    36ba:	1b 06       	cpc	r1, r27
    36bc:	d4 f2       	brlt	.-76     	; 0x3672 <ConvertToString+0xe2>
		{
			s32Local_Temp1 /= 10;
			s32Local_Length++;
		}

		for(u8 i = 0; i<s32Local_Length; i++)
    36be:	19 82       	std	Y+1, r1	; 0x01
    36c0:	38 c0       	rjmp	.+112    	; 0x3732 <ConvertToString+0x1a2>
		{
			s32Local_Remainder = s32Copy_Number % 10;
    36c2:	8c 89       	ldd	r24, Y+20	; 0x14
    36c4:	9d 89       	ldd	r25, Y+21	; 0x15
    36c6:	ae 89       	ldd	r26, Y+22	; 0x16
    36c8:	bf 89       	ldd	r27, Y+23	; 0x17
    36ca:	2a e0       	ldi	r18, 0x0A	; 10
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e0       	ldi	r20, 0x00	; 0
    36d0:	50 e0       	ldi	r21, 0x00	; 0
    36d2:	bc 01       	movw	r22, r24
    36d4:	cd 01       	movw	r24, r26
    36d6:	0e 94 8d 22 	call	0x451a	; 0x451a <__divmodsi4>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	8e 83       	std	Y+6, r24	; 0x06
    36e0:	9f 83       	std	Y+7, r25	; 0x07
    36e2:	a8 87       	std	Y+8, r26	; 0x08
    36e4:	b9 87       	std	Y+9, r27	; 0x09
			s32Copy_Number = s32Copy_Number / 10;
    36e6:	8c 89       	ldd	r24, Y+20	; 0x14
    36e8:	9d 89       	ldd	r25, Y+21	; 0x15
    36ea:	ae 89       	ldd	r26, Y+22	; 0x16
    36ec:	bf 89       	ldd	r27, Y+23	; 0x17
    36ee:	2a e0       	ldi	r18, 0x0A	; 10
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	40 e0       	ldi	r20, 0x00	; 0
    36f4:	50 e0       	ldi	r21, 0x00	; 0
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0e 94 8d 22 	call	0x451a	; 0x451a <__divmodsi4>
    36fe:	da 01       	movw	r26, r20
    3700:	c9 01       	movw	r24, r18
    3702:	8c 8b       	std	Y+20, r24	; 0x14
    3704:	9d 8b       	std	Y+21, r25	; 0x15
    3706:	ae 8b       	std	Y+22, r26	; 0x16
    3708:	bf 8b       	std	Y+23, r27	; 0x17
			Copy_String[s32Local_Length - (i+1)] = s32Local_Remainder + '0';
    370a:	2a 85       	ldd	r18, Y+10	; 0x0a
    370c:	3b 85       	ldd	r19, Y+11	; 0x0b
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	88 2f       	mov	r24, r24
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	80 95       	com	r24
    3716:	90 95       	com	r25
    3718:	28 0f       	add	r18, r24
    371a:	39 1f       	adc	r19, r25
    371c:	8a 89       	ldd	r24, Y+18	; 0x12
    371e:	9b 89       	ldd	r25, Y+19	; 0x13
    3720:	fc 01       	movw	r30, r24
    3722:	e2 0f       	add	r30, r18
    3724:	f3 1f       	adc	r31, r19
    3726:	8e 81       	ldd	r24, Y+6	; 0x06
    3728:	80 5d       	subi	r24, 0xD0	; 208
    372a:	80 83       	st	Z, r24
		{
			s32Local_Temp1 /= 10;
			s32Local_Length++;
		}

		for(u8 i = 0; i<s32Local_Length; i++)
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	8f 5f       	subi	r24, 0xFF	; 255
    3730:	89 83       	std	Y+1, r24	; 0x01
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	28 2f       	mov	r18, r24
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	8a 85       	ldd	r24, Y+10	; 0x0a
    373e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3740:	ac 85       	ldd	r26, Y+12	; 0x0c
    3742:	bd 85       	ldd	r27, Y+13	; 0x0d
    3744:	28 17       	cp	r18, r24
    3746:	39 07       	cpc	r19, r25
    3748:	4a 07       	cpc	r20, r26
    374a:	5b 07       	cpc	r21, r27
    374c:	0c f4       	brge	.+2      	; 0x3750 <ConvertToString+0x1c0>
    374e:	b9 cf       	rjmp	.-142    	; 0x36c2 <ConvertToString+0x132>
			s32Local_Remainder = s32Copy_Number % 10;
			s32Copy_Number = s32Copy_Number / 10;
			Copy_String[s32Local_Length - (i+1)] = s32Local_Remainder + '0';
		}

		if(s32Local_Temp2 < 0)
    3750:	8a 81       	ldd	r24, Y+2	; 0x02
    3752:	9b 81       	ldd	r25, Y+3	; 0x03
    3754:	ac 81       	ldd	r26, Y+4	; 0x04
    3756:	bd 81       	ldd	r27, Y+5	; 0x05
    3758:	bb 23       	and	r27, r27
    375a:	24 f4       	brge	.+8      	; 0x3764 <ConvertToString+0x1d4>
			Copy_String[0] = '-';
    375c:	ea 89       	ldd	r30, Y+18	; 0x12
    375e:	fb 89       	ldd	r31, Y+19	; 0x13
    3760:	8d e2       	ldi	r24, 0x2D	; 45
    3762:	80 83       	st	Z, r24

		Copy_String[s32Local_Length] = '\0';
    3764:	8a 85       	ldd	r24, Y+10	; 0x0a
    3766:	9b 85       	ldd	r25, Y+11	; 0x0b
    3768:	2a 89       	ldd	r18, Y+18	; 0x12
    376a:	3b 89       	ldd	r19, Y+19	; 0x13
    376c:	f9 01       	movw	r30, r18
    376e:	e8 0f       	add	r30, r24
    3770:	f9 1f       	adc	r31, r25
    3772:	10 82       	st	Z, r1
	}
}
    3774:	67 96       	adiw	r28, 0x17	; 23
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	f8 94       	cli
    377a:	de bf       	out	0x3e, r29	; 62
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	cd bf       	out	0x3d, r28	; 61
    3780:	cf 91       	pop	r28
    3782:	df 91       	pop	r29
    3784:	08 95       	ret

00003786 <ConvertToint>:
s32 ConvertToint(const char* Copy_String, u8 copy_u8Len)
{
    3786:	df 93       	push	r29
    3788:	cf 93       	push	r28
    378a:	cd b7       	in	r28, 0x3d	; 61
    378c:	de b7       	in	r29, 0x3e	; 62
    378e:	29 97       	sbiw	r28, 0x09	; 9
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	98 87       	std	Y+8, r25	; 0x08
    379c:	8f 83       	std	Y+7, r24	; 0x07
    379e:	69 87       	std	Y+9, r22	; 0x09
	s32 s32Local_Number = 0;
    37a0:	1b 82       	std	Y+3, r1	; 0x03
    37a2:	1c 82       	std	Y+4, r1	; 0x04
    37a4:	1d 82       	std	Y+5, r1	; 0x05
    37a6:	1e 82       	std	Y+6, r1	; 0x06
	s8 u8Local_sign = 1, u8Local_Iterator = 0;
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	8a 83       	std	Y+2, r24	; 0x02
    37ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_String[0] == '-')
    37ae:	ef 81       	ldd	r30, Y+7	; 0x07
    37b0:	f8 85       	ldd	r31, Y+8	; 0x08
    37b2:	80 81       	ld	r24, Z
    37b4:	8d 32       	cpi	r24, 0x2D	; 45
    37b6:	09 f0       	breq	.+2      	; 0x37ba <ConvertToint+0x34>
    37b8:	53 c0       	rjmp	.+166    	; 0x3860 <ConvertToint+0xda>
	{
		u8Local_sign = -1;
    37ba:	8f ef       	ldi	r24, 0xFF	; 255
    37bc:	8a 83       	std	Y+2, r24	; 0x02
		u8Local_Iterator = 1;
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	89 83       	std	Y+1, r24	; 0x01
    37c2:	4e c0       	rjmp	.+156    	; 0x3860 <ConvertToint+0xda>
	}

	while(Copy_String[u8Local_Iterator] != '\0' && u8Local_Iterator < copy_u8Len)
	{
		if((Copy_String[u8Local_Iterator] - '0' < 0) || (Copy_String[u8Local_Iterator] - '0' > 9))
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	28 2f       	mov	r18, r24
    37c8:	33 27       	eor	r19, r19
    37ca:	27 fd       	sbrc	r18, 7
    37cc:	30 95       	com	r19
    37ce:	8f 81       	ldd	r24, Y+7	; 0x07
    37d0:	98 85       	ldd	r25, Y+8	; 0x08
    37d2:	fc 01       	movw	r30, r24
    37d4:	e2 0f       	add	r30, r18
    37d6:	f3 1f       	adc	r31, r19
    37d8:	80 81       	ld	r24, Z
    37da:	88 2f       	mov	r24, r24
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	c0 97       	sbiw	r24, 0x30	; 48
    37e0:	99 23       	and	r25, r25
    37e2:	0c f4       	brge	.+2      	; 0x37e6 <ConvertToint+0x60>
    37e4:	56 c0       	rjmp	.+172    	; 0x3892 <ConvertToint+0x10c>
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	28 2f       	mov	r18, r24
    37ea:	33 27       	eor	r19, r19
    37ec:	27 fd       	sbrc	r18, 7
    37ee:	30 95       	com	r19
    37f0:	8f 81       	ldd	r24, Y+7	; 0x07
    37f2:	98 85       	ldd	r25, Y+8	; 0x08
    37f4:	fc 01       	movw	r30, r24
    37f6:	e2 0f       	add	r30, r18
    37f8:	f3 1f       	adc	r31, r19
    37fa:	80 81       	ld	r24, Z
    37fc:	88 2f       	mov	r24, r24
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	c0 97       	sbiw	r24, 0x30	; 48
    3802:	8a 30       	cpi	r24, 0x0A	; 10
    3804:	91 05       	cpc	r25, r1
    3806:	0c f0       	brlt	.+2      	; 0x380a <ConvertToint+0x84>
    3808:	44 c0       	rjmp	.+136    	; 0x3892 <ConvertToint+0x10c>
			break;
		s32Local_Number = (s32Local_Number*10) + (Copy_String[u8Local_Iterator] - '0');
    380a:	8b 81       	ldd	r24, Y+3	; 0x03
    380c:	9c 81       	ldd	r25, Y+4	; 0x04
    380e:	ad 81       	ldd	r26, Y+5	; 0x05
    3810:	be 81       	ldd	r27, Y+6	; 0x06
    3812:	2a e0       	ldi	r18, 0x0A	; 10
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e0       	ldi	r20, 0x00	; 0
    3818:	50 e0       	ldi	r21, 0x00	; 0
    381a:	bc 01       	movw	r22, r24
    381c:	cd 01       	movw	r24, r26
    381e:	0e 94 4c 22 	call	0x4498	; 0x4498 <__mulsi3>
    3822:	ab 01       	movw	r20, r22
    3824:	bc 01       	movw	r22, r24
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	28 2f       	mov	r18, r24
    382a:	33 27       	eor	r19, r19
    382c:	27 fd       	sbrc	r18, 7
    382e:	30 95       	com	r19
    3830:	8f 81       	ldd	r24, Y+7	; 0x07
    3832:	98 85       	ldd	r25, Y+8	; 0x08
    3834:	fc 01       	movw	r30, r24
    3836:	e2 0f       	add	r30, r18
    3838:	f3 1f       	adc	r31, r19
    383a:	80 81       	ld	r24, Z
    383c:	88 2f       	mov	r24, r24
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	c0 97       	sbiw	r24, 0x30	; 48
    3842:	aa 27       	eor	r26, r26
    3844:	97 fd       	sbrc	r25, 7
    3846:	a0 95       	com	r26
    3848:	ba 2f       	mov	r27, r26
    384a:	84 0f       	add	r24, r20
    384c:	95 1f       	adc	r25, r21
    384e:	a6 1f       	adc	r26, r22
    3850:	b7 1f       	adc	r27, r23
    3852:	8b 83       	std	Y+3, r24	; 0x03
    3854:	9c 83       	std	Y+4, r25	; 0x04
    3856:	ad 83       	std	Y+5, r26	; 0x05
    3858:	be 83       	std	Y+6, r27	; 0x06
		u8Local_Iterator++;
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	8f 5f       	subi	r24, 0xFF	; 255
    385e:	89 83       	std	Y+1, r24	; 0x01
	{
		u8Local_sign = -1;
		u8Local_Iterator = 1;
	}

	while(Copy_String[u8Local_Iterator] != '\0' && u8Local_Iterator < copy_u8Len)
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	28 2f       	mov	r18, r24
    3864:	33 27       	eor	r19, r19
    3866:	27 fd       	sbrc	r18, 7
    3868:	30 95       	com	r19
    386a:	8f 81       	ldd	r24, Y+7	; 0x07
    386c:	98 85       	ldd	r25, Y+8	; 0x08
    386e:	fc 01       	movw	r30, r24
    3870:	e2 0f       	add	r30, r18
    3872:	f3 1f       	adc	r31, r19
    3874:	80 81       	ld	r24, Z
    3876:	88 23       	and	r24, r24
    3878:	61 f0       	breq	.+24     	; 0x3892 <ConvertToint+0x10c>
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	28 2f       	mov	r18, r24
    387e:	33 27       	eor	r19, r19
    3880:	27 fd       	sbrc	r18, 7
    3882:	30 95       	com	r19
    3884:	89 85       	ldd	r24, Y+9	; 0x09
    3886:	88 2f       	mov	r24, r24
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	28 17       	cp	r18, r24
    388c:	39 07       	cpc	r19, r25
    388e:	0c f4       	brge	.+2      	; 0x3892 <ConvertToint+0x10c>
    3890:	99 cf       	rjmp	.-206    	; 0x37c4 <ConvertToint+0x3e>
			break;
		s32Local_Number = (s32Local_Number*10) + (Copy_String[u8Local_Iterator] - '0');
		u8Local_Iterator++;
	}

	s32Local_Number *= u8Local_sign;
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	28 2f       	mov	r18, r24
    3896:	33 27       	eor	r19, r19
    3898:	27 fd       	sbrc	r18, 7
    389a:	30 95       	com	r19
    389c:	43 2f       	mov	r20, r19
    389e:	53 2f       	mov	r21, r19
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	9c 81       	ldd	r25, Y+4	; 0x04
    38a4:	ad 81       	ldd	r26, Y+5	; 0x05
    38a6:	be 81       	ldd	r27, Y+6	; 0x06
    38a8:	bc 01       	movw	r22, r24
    38aa:	cd 01       	movw	r24, r26
    38ac:	0e 94 4c 22 	call	0x4498	; 0x4498 <__mulsi3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	8b 83       	std	Y+3, r24	; 0x03
    38b6:	9c 83       	std	Y+4, r25	; 0x04
    38b8:	ad 83       	std	Y+5, r26	; 0x05
    38ba:	be 83       	std	Y+6, r27	; 0x06
	return s32Local_Number;
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	9c 81       	ldd	r25, Y+4	; 0x04
    38c0:	ad 81       	ldd	r26, Y+5	; 0x05
    38c2:	be 81       	ldd	r27, Y+6	; 0x06
}
    38c4:	bc 01       	movw	r22, r24
    38c6:	cd 01       	movw	r24, r26
    38c8:	29 96       	adiw	r28, 0x09	; 9
    38ca:	0f b6       	in	r0, 0x3f	; 63
    38cc:	f8 94       	cli
    38ce:	de bf       	out	0x3e, r29	; 62
    38d0:	0f be       	out	0x3f, r0	; 63
    38d2:	cd bf       	out	0x3d, r28	; 61
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	08 95       	ret

000038da <StringCompare>:

u8 StringCompare(const char* pu8Copy_String1, const char* pu8Copy_String2)
{
    38da:	df 93       	push	r29
    38dc:	cf 93       	push	r28
    38de:	00 d0       	rcall	.+0      	; 0x38e0 <StringCompare+0x6>
    38e0:	00 d0       	rcall	.+0      	; 0x38e2 <StringCompare+0x8>
    38e2:	00 d0       	rcall	.+0      	; 0x38e4 <StringCompare+0xa>
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	9b 83       	std	Y+3, r25	; 0x03
    38ea:	8a 83       	std	Y+2, r24	; 0x02
    38ec:	7d 83       	std	Y+5, r23	; 0x05
    38ee:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8Local_Flag = 0;
    38f0:	19 82       	std	Y+1, r1	; 0x01
    38f2:	32 c0       	rjmp	.+100    	; 0x3958 <StringCompare+0x7e>

	while(*pu8Copy_String1 != '\0' || *pu8Copy_String2 != '\0')
	{
		if(*pu8Copy_String1 == *pu8Copy_String2)
    38f4:	ea 81       	ldd	r30, Y+2	; 0x02
    38f6:	fb 81       	ldd	r31, Y+3	; 0x03
    38f8:	90 81       	ld	r25, Z
    38fa:	ec 81       	ldd	r30, Y+4	; 0x04
    38fc:	fd 81       	ldd	r31, Y+5	; 0x05
    38fe:	80 81       	ld	r24, Z
    3900:	98 17       	cp	r25, r24
    3902:	59 f4       	brne	.+22     	; 0x391a <StringCompare+0x40>
		{
			pu8Copy_String1++;
    3904:	8a 81       	ldd	r24, Y+2	; 0x02
    3906:	9b 81       	ldd	r25, Y+3	; 0x03
    3908:	01 96       	adiw	r24, 0x01	; 1
    390a:	9b 83       	std	Y+3, r25	; 0x03
    390c:	8a 83       	std	Y+2, r24	; 0x02
			pu8Copy_String2++;
    390e:	8c 81       	ldd	r24, Y+4	; 0x04
    3910:	9d 81       	ldd	r25, Y+5	; 0x05
    3912:	01 96       	adiw	r24, 0x01	; 1
    3914:	9d 83       	std	Y+5, r25	; 0x05
    3916:	8c 83       	std	Y+4, r24	; 0x04
    3918:	1f c0       	rjmp	.+62     	; 0x3958 <StringCompare+0x7e>
		}
		else if((*pu8Copy_String1 == '\0' && *pu8Copy_String2 != '\0') || (*pu8Copy_String1 != '\0' && *pu8Copy_String2 == '\0') || (*pu8Copy_String1 != *pu8Copy_String2))
    391a:	ea 81       	ldd	r30, Y+2	; 0x02
    391c:	fb 81       	ldd	r31, Y+3	; 0x03
    391e:	80 81       	ld	r24, Z
    3920:	88 23       	and	r24, r24
    3922:	29 f4       	brne	.+10     	; 0x392e <StringCompare+0x54>
    3924:	ec 81       	ldd	r30, Y+4	; 0x04
    3926:	fd 81       	ldd	r31, Y+5	; 0x05
    3928:	80 81       	ld	r24, Z
    392a:	88 23       	and	r24, r24
    392c:	91 f4       	brne	.+36     	; 0x3952 <StringCompare+0x78>
    392e:	ea 81       	ldd	r30, Y+2	; 0x02
    3930:	fb 81       	ldd	r31, Y+3	; 0x03
    3932:	80 81       	ld	r24, Z
    3934:	88 23       	and	r24, r24
    3936:	29 f0       	breq	.+10     	; 0x3942 <StringCompare+0x68>
    3938:	ec 81       	ldd	r30, Y+4	; 0x04
    393a:	fd 81       	ldd	r31, Y+5	; 0x05
    393c:	80 81       	ld	r24, Z
    393e:	88 23       	and	r24, r24
    3940:	41 f0       	breq	.+16     	; 0x3952 <StringCompare+0x78>
    3942:	ea 81       	ldd	r30, Y+2	; 0x02
    3944:	fb 81       	ldd	r31, Y+3	; 0x03
    3946:	90 81       	ld	r25, Z
    3948:	ec 81       	ldd	r30, Y+4	; 0x04
    394a:	fd 81       	ldd	r31, Y+5	; 0x05
    394c:	80 81       	ld	r24, Z
    394e:	98 17       	cp	r25, r24
    3950:	19 f0       	breq	.+6      	; 0x3958 <StringCompare+0x7e>
		{
			u8Local_Flag=1;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	89 83       	std	Y+1, r24	; 0x01
    3956:	0a c0       	rjmp	.+20     	; 0x396c <StringCompare+0x92>

u8 StringCompare(const char* pu8Copy_String1, const char* pu8Copy_String2)
{
	u8 u8Local_Flag = 0;

	while(*pu8Copy_String1 != '\0' || *pu8Copy_String2 != '\0')
    3958:	ea 81       	ldd	r30, Y+2	; 0x02
    395a:	fb 81       	ldd	r31, Y+3	; 0x03
    395c:	80 81       	ld	r24, Z
    395e:	88 23       	and	r24, r24
    3960:	49 f6       	brne	.-110    	; 0x38f4 <StringCompare+0x1a>
    3962:	ec 81       	ldd	r30, Y+4	; 0x04
    3964:	fd 81       	ldd	r31, Y+5	; 0x05
    3966:	80 81       	ld	r24, Z
    3968:	88 23       	and	r24, r24
    396a:	21 f6       	brne	.-120    	; 0x38f4 <StringCompare+0x1a>
			u8Local_Flag=1;
			break;
		}

	}
	if(u8Local_Flag == 0)
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	88 23       	and	r24, r24
    3970:	11 f4       	brne	.+4      	; 0x3976 <StringCompare+0x9c>
		return 0;
    3972:	1e 82       	std	Y+6, r1	; 0x06
    3974:	02 c0       	rjmp	.+4      	; 0x397a <StringCompare+0xa0>
	else
		return 1;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	8e 83       	std	Y+6, r24	; 0x06
    397a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    397c:	26 96       	adiw	r28, 0x06	; 6
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	cf 91       	pop	r28
    398a:	df 91       	pop	r29
    398c:	08 95       	ret

0000398e <StringLength>:

u8 StringLength(const char* pu8Copy_String)
{
    398e:	df 93       	push	r29
    3990:	cf 93       	push	r28
    3992:	00 d0       	rcall	.+0      	; 0x3994 <StringLength+0x6>
    3994:	00 d0       	rcall	.+0      	; 0x3996 <StringLength+0x8>
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
    399a:	9c 83       	std	Y+4, r25	; 0x04
    399c:	8b 83       	std	Y+3, r24	; 0x03
	u16 u16LocalCounter = 0;
    399e:	1a 82       	std	Y+2, r1	; 0x02
    39a0:	19 82       	std	Y+1, r1	; 0x01
    39a2:	0a c0       	rjmp	.+20     	; 0x39b8 <StringLength+0x2a>
	while (*pu8Copy_String != 0 || *pu8Copy_String != '\0')
	{
		u16LocalCounter++;
    39a4:	89 81       	ldd	r24, Y+1	; 0x01
    39a6:	9a 81       	ldd	r25, Y+2	; 0x02
    39a8:	01 96       	adiw	r24, 0x01	; 1
    39aa:	9a 83       	std	Y+2, r25	; 0x02
    39ac:	89 83       	std	Y+1, r24	; 0x01
		pu8Copy_String++;
    39ae:	8b 81       	ldd	r24, Y+3	; 0x03
    39b0:	9c 81       	ldd	r25, Y+4	; 0x04
    39b2:	01 96       	adiw	r24, 0x01	; 1
    39b4:	9c 83       	std	Y+4, r25	; 0x04
    39b6:	8b 83       	std	Y+3, r24	; 0x03
}

u8 StringLength(const char* pu8Copy_String)
{
	u16 u16LocalCounter = 0;
	while (*pu8Copy_String != 0 || *pu8Copy_String != '\0')
    39b8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ba:	fc 81       	ldd	r31, Y+4	; 0x04
    39bc:	80 81       	ld	r24, Z
    39be:	88 23       	and	r24, r24
    39c0:	89 f7       	brne	.-30     	; 0x39a4 <StringLength+0x16>
    39c2:	eb 81       	ldd	r30, Y+3	; 0x03
    39c4:	fc 81       	ldd	r31, Y+4	; 0x04
    39c6:	80 81       	ld	r24, Z
    39c8:	88 23       	and	r24, r24
    39ca:	61 f7       	brne	.-40     	; 0x39a4 <StringLength+0x16>
	{
		u16LocalCounter++;
		pu8Copy_String++;
	}

	return u16LocalCounter;
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    39ce:	0f 90       	pop	r0
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <StringReset>:

void StringReset(char* pu8Copy_String)
{
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	00 d0       	rcall	.+0      	; 0x39e2 <StringReset+0x6>
    39e2:	00 d0       	rcall	.+0      	; 0x39e4 <StringReset+0x8>
    39e4:	00 d0       	rcall	.+0      	; 0x39e6 <StringReset+0xa>
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	9e 83       	std	Y+6, r25	; 0x06
    39ec:	8d 83       	std	Y+5, r24	; 0x05
	u16 u16LocalCounter = 0;
    39ee:	1c 82       	std	Y+4, r1	; 0x04
    39f0:	1b 82       	std	Y+3, r1	; 0x03
	u16 u16LocalLength = 0;
    39f2:	1a 82       	std	Y+2, r1	; 0x02
    39f4:	19 82       	std	Y+1, r1	; 0x01
	u16LocalLength = StringLength(pu8Copy_String);
    39f6:	8d 81       	ldd	r24, Y+5	; 0x05
    39f8:	9e 81       	ldd	r25, Y+6	; 0x06
    39fa:	0e 94 c7 1c 	call	0x398e	; 0x398e <StringLength>
    39fe:	88 2f       	mov	r24, r24
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	9a 83       	std	Y+2, r25	; 0x02
    3a04:	89 83       	std	Y+1, r24	; 0x01
    3a06:	0d c0       	rjmp	.+26     	; 0x3a22 <StringReset+0x46>
	while(u16LocalCounter < u16LocalLength)
	{
		*(pu8Copy_String + u16LocalCounter) = 0;
    3a08:	2d 81       	ldd	r18, Y+5	; 0x05
    3a0a:	3e 81       	ldd	r19, Y+6	; 0x06
    3a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a10:	f9 01       	movw	r30, r18
    3a12:	e8 0f       	add	r30, r24
    3a14:	f9 1f       	adc	r31, r25
    3a16:	10 82       	st	Z, r1
		u16LocalCounter++;
    3a18:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1c:	01 96       	adiw	r24, 0x01	; 1
    3a1e:	9c 83       	std	Y+4, r25	; 0x04
    3a20:	8b 83       	std	Y+3, r24	; 0x03
void StringReset(char* pu8Copy_String)
{
	u16 u16LocalCounter = 0;
	u16 u16LocalLength = 0;
	u16LocalLength = StringLength(pu8Copy_String);
	while(u16LocalCounter < u16LocalLength)
    3a22:	2b 81       	ldd	r18, Y+3	; 0x03
    3a24:	3c 81       	ldd	r19, Y+4	; 0x04
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2a:	28 17       	cp	r18, r24
    3a2c:	39 07       	cpc	r19, r25
    3a2e:	60 f3       	brcs	.-40     	; 0x3a08 <StringReset+0x2c>
	{
		*(pu8Copy_String + u16LocalCounter) = 0;
		u16LocalCounter++;
	}
}
    3a30:	26 96       	adiw	r28, 0x06	; 6
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
    3a3c:	cf 91       	pop	r28
    3a3e:	df 91       	pop	r29
    3a40:	08 95       	ret

00003a42 <main>:
void SetThreshold (void);
void Display (void);
void LDR_percentage(void);

void main()
{
    3a42:	df 93       	push	r29
    3a44:	cf 93       	push	r28
    3a46:	cd b7       	in	r28, 0x3d	; 61
    3a48:	de b7       	in	r29, 0x3e	; 62
    3a4a:	ad 97       	sbiw	r28, 0x2d	; 45
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	f8 94       	cli
    3a50:	de bf       	out	0x3e, r29	; 62
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key = NOT_PRESSED;
    3a56:	1b a6       	std	Y+43, r1	; 0x2b

	DIO_voidInit();
    3a58:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidInit>
	ADC_voidInit();
    3a5c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	GI_voidEnable();
    3a60:	0e 94 a0 10 	call	0x2140	; 0x2140 <GI_voidEnable>

	LCD_voidInit();
    3a64:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_voidInit>

	LCD_u8GoToRowCol(LCD_ROW0, LCD_COL3);
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	63 e0       	ldi	r22, 0x03	; 3
    3a6c:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
	LCD_u8SendString("Welcome Back!!!");
    3a70:	80 e6       	ldi	r24, 0x60	; 96
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>

	LCD_u8GoToRowCol(LCD_ROW2, LCD_COL0);
    3a78:	82 e0       	ldi	r24, 0x02	; 2
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
	LCD_u8SendString("Smart Light Control System");
    3a80:	80 e7       	ldi	r24, 0x70	; 112
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	aa e7       	ldi	r26, 0x7A	; 122
    3a8e:	b4 e4       	ldi	r27, 0x44	; 68
    3a90:	8f a3       	std	Y+39, r24	; 0x27
    3a92:	98 a7       	std	Y+40, r25	; 0x28
    3a94:	a9 a7       	std	Y+41, r26	; 0x29
    3a96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a98:	6f a1       	ldd	r22, Y+39	; 0x27
    3a9a:	78 a5       	ldd	r23, Y+40	; 0x28
    3a9c:	89 a5       	ldd	r24, Y+41	; 0x29
    3a9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	4a e7       	ldi	r20, 0x7A	; 122
    3aa6:	55 e4       	ldi	r21, 0x45	; 69
    3aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	8b a3       	std	Y+35, r24	; 0x23
    3ab2:	9c a3       	std	Y+36, r25	; 0x24
    3ab4:	ad a3       	std	Y+37, r26	; 0x25
    3ab6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    3aba:	7c a1       	ldd	r23, Y+36	; 0x24
    3abc:	8d a1       	ldd	r24, Y+37	; 0x25
    3abe:	9e a1       	ldd	r25, Y+38	; 0x26
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	40 e8       	ldi	r20, 0x80	; 128
    3ac6:	5f e3       	ldi	r21, 0x3F	; 63
    3ac8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3acc:	88 23       	and	r24, r24
    3ace:	2c f4       	brge	.+10     	; 0x3ada <main+0x98>
		__ticks = 1;
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	9a a3       	std	Y+34, r25	; 0x22
    3ad6:	89 a3       	std	Y+33, r24	; 0x21
    3ad8:	3f c0       	rjmp	.+126    	; 0x3b58 <main+0x116>
	else if (__tmp > 65535)
    3ada:	6b a1       	ldd	r22, Y+35	; 0x23
    3adc:	7c a1       	ldd	r23, Y+36	; 0x24
    3ade:	8d a1       	ldd	r24, Y+37	; 0x25
    3ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	3f ef       	ldi	r19, 0xFF	; 255
    3ae6:	4f e7       	ldi	r20, 0x7F	; 127
    3ae8:	57 e4       	ldi	r21, 0x47	; 71
    3aea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aee:	18 16       	cp	r1, r24
    3af0:	4c f5       	brge	.+82     	; 0x3b44 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af2:	6f a1       	ldd	r22, Y+39	; 0x27
    3af4:	78 a5       	ldd	r23, Y+40	; 0x28
    3af6:	89 a5       	ldd	r24, Y+41	; 0x29
    3af8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e2       	ldi	r20, 0x20	; 32
    3b00:	51 e4       	ldi	r21, 0x41	; 65
    3b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	bc 01       	movw	r22, r24
    3b0c:	cd 01       	movw	r24, r26
    3b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	9a a3       	std	Y+34, r25	; 0x22
    3b18:	89 a3       	std	Y+33, r24	; 0x21
    3b1a:	0f c0       	rjmp	.+30     	; 0x3b3a <main+0xf8>
    3b1c:	80 e9       	ldi	r24, 0x90	; 144
    3b1e:	91 e0       	ldi	r25, 0x01	; 1
    3b20:	98 a3       	std	Y+32, r25	; 0x20
    3b22:	8f 8f       	std	Y+31, r24	; 0x1f
    3b24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b26:	98 a1       	ldd	r25, Y+32	; 0x20
    3b28:	01 97       	sbiw	r24, 0x01	; 1
    3b2a:	f1 f7       	brne	.-4      	; 0x3b28 <main+0xe6>
    3b2c:	98 a3       	std	Y+32, r25	; 0x20
    3b2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b30:	89 a1       	ldd	r24, Y+33	; 0x21
    3b32:	9a a1       	ldd	r25, Y+34	; 0x22
    3b34:	01 97       	sbiw	r24, 0x01	; 1
    3b36:	9a a3       	std	Y+34, r25	; 0x22
    3b38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b3a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b3c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	69 f7       	brne	.-38     	; 0x3b1c <main+0xda>
    3b42:	14 c0       	rjmp	.+40     	; 0x3b6c <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b44:	6b a1       	ldd	r22, Y+35	; 0x23
    3b46:	7c a1       	ldd	r23, Y+36	; 0x24
    3b48:	8d a1       	ldd	r24, Y+37	; 0x25
    3b4a:	9e a1       	ldd	r25, Y+38	; 0x26
    3b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	9a a3       	std	Y+34, r25	; 0x22
    3b56:	89 a3       	std	Y+33, r24	; 0x21
    3b58:	89 a1       	ldd	r24, Y+33	; 0x21
    3b5a:	9a a1       	ldd	r25, Y+34	; 0x22
    3b5c:	9e 8f       	std	Y+30, r25	; 0x1e
    3b5e:	8d 8f       	std	Y+29, r24	; 0x1d
    3b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	f1 f7       	brne	.-4      	; 0x3b64 <main+0x122>
    3b68:	9e 8f       	std	Y+30, r25	; 0x1e
    3b6a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);

	while(1)
	{
		LCD_voidClearDisplay();
    3b6c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <LCD_voidClearDisplay>
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	a8 e4       	ldi	r26, 0x48	; 72
    3b76:	b3 e4       	ldi	r27, 0x43	; 67
    3b78:	89 8f       	std	Y+25, r24	; 0x19
    3b7a:	9a 8f       	std	Y+26, r25	; 0x1a
    3b7c:	ab 8f       	std	Y+27, r26	; 0x1b
    3b7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b80:	69 8d       	ldd	r22, Y+25	; 0x19
    3b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	4a e7       	ldi	r20, 0x7A	; 122
    3b8e:	55 e4       	ldi	r21, 0x45	; 69
    3b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	8d 8b       	std	Y+21, r24	; 0x15
    3b9a:	9e 8b       	std	Y+22, r25	; 0x16
    3b9c:	af 8b       	std	Y+23, r26	; 0x17
    3b9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	40 e8       	ldi	r20, 0x80	; 128
    3bae:	5f e3       	ldi	r21, 0x3F	; 63
    3bb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bb4:	88 23       	and	r24, r24
    3bb6:	2c f4       	brge	.+10     	; 0x3bc2 <main+0x180>
		__ticks = 1;
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	9c 8b       	std	Y+20, r25	; 0x14
    3bbe:	8b 8b       	std	Y+19, r24	; 0x13
    3bc0:	3f c0       	rjmp	.+126    	; 0x3c40 <main+0x1fe>
	else if (__tmp > 65535)
    3bc2:	6d 89       	ldd	r22, Y+21	; 0x15
    3bc4:	7e 89       	ldd	r23, Y+22	; 0x16
    3bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	3f ef       	ldi	r19, 0xFF	; 255
    3bce:	4f e7       	ldi	r20, 0x7F	; 127
    3bd0:	57 e4       	ldi	r21, 0x47	; 71
    3bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd6:	18 16       	cp	r1, r24
    3bd8:	4c f5       	brge	.+82     	; 0x3c2c <main+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bda:	69 8d       	ldd	r22, Y+25	; 0x19
    3bdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3be0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e2       	ldi	r20, 0x20	; 32
    3be8:	51 e4       	ldi	r21, 0x41	; 65
    3bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	9c 8b       	std	Y+20, r25	; 0x14
    3c00:	8b 8b       	std	Y+19, r24	; 0x13
    3c02:	0f c0       	rjmp	.+30     	; 0x3c22 <main+0x1e0>
    3c04:	80 e9       	ldi	r24, 0x90	; 144
    3c06:	91 e0       	ldi	r25, 0x01	; 1
    3c08:	9a 8b       	std	Y+18, r25	; 0x12
    3c0a:	89 8b       	std	Y+17, r24	; 0x11
    3c0c:	89 89       	ldd	r24, Y+17	; 0x11
    3c0e:	9a 89       	ldd	r25, Y+18	; 0x12
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	f1 f7       	brne	.-4      	; 0x3c10 <main+0x1ce>
    3c14:	9a 8b       	std	Y+18, r25	; 0x12
    3c16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c18:	8b 89       	ldd	r24, Y+19	; 0x13
    3c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	9c 8b       	std	Y+20, r25	; 0x14
    3c20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c22:	8b 89       	ldd	r24, Y+19	; 0x13
    3c24:	9c 89       	ldd	r25, Y+20	; 0x14
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	69 f7       	brne	.-38     	; 0x3c04 <main+0x1c2>
    3c2a:	14 c0       	rjmp	.+40     	; 0x3c54 <main+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c30:	8f 89       	ldd	r24, Y+23	; 0x17
    3c32:	98 8d       	ldd	r25, Y+24	; 0x18
    3c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	9c 8b       	std	Y+20, r25	; 0x14
    3c3e:	8b 8b       	std	Y+19, r24	; 0x13
    3c40:	8b 89       	ldd	r24, Y+19	; 0x13
    3c42:	9c 89       	ldd	r25, Y+20	; 0x14
    3c44:	98 8b       	std	Y+16, r25	; 0x10
    3c46:	8f 87       	std	Y+15, r24	; 0x0f
    3c48:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c4a:	98 89       	ldd	r25, Y+16	; 0x10
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <main+0x20a>
    3c50:	98 8b       	std	Y+16, r25	; 0x10
    3c52:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		LCD_u8GoToRowCol(LCD_ROW0, LCD_COL0);
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	60 e0       	ldi	r22, 0x00	; 0
    3c58:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
		LCD_u8SendString("1)Display Percentage");
    3c5c:	8b e8       	ldi	r24, 0x8B	; 139
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>

		LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	60 e0       	ldi	r22, 0x00	; 0
    3c68:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
		LCD_u8SendString("2) Set Threshold");
    3c6c:	80 ea       	ldi	r24, 0xA0	; 160
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>

		do
		{
			Local_u8Key = KEYPAD_u8GetPressedKey();
    3c74:	0e 94 bc 10 	call	0x2178	; 0x2178 <KEYPAD_u8GetPressedKey>
    3c78:	8b a7       	std	Y+43, r24	; 0x2b
		}while(Local_u8Key == NOT_PRESSED);
    3c7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c7c:	88 23       	and	r24, r24
    3c7e:	d1 f3       	breq	.-12     	; 0x3c74 <main+0x232>

		switch(Local_u8Key)
    3c80:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c82:	28 2f       	mov	r18, r24
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	3d a7       	std	Y+45, r19	; 0x2d
    3c88:	2c a7       	std	Y+44, r18	; 0x2c
    3c8a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c8c:	9d a5       	ldd	r25, Y+45	; 0x2d
    3c8e:	81 33       	cpi	r24, 0x31	; 49
    3c90:	91 05       	cpc	r25, r1
    3c92:	31 f0       	breq	.+12     	; 0x3ca0 <main+0x25e>
    3c94:	2c a5       	ldd	r18, Y+44	; 0x2c
    3c96:	3d a5       	ldd	r19, Y+45	; 0x2d
    3c98:	22 33       	cpi	r18, 0x32	; 50
    3c9a:	31 05       	cpc	r19, r1
    3c9c:	21 f0       	breq	.+8      	; 0x3ca6 <main+0x264>
    3c9e:	06 c0       	rjmp	.+12     	; 0x3cac <main+0x26a>
		{
		case '1':		Display();			break;
    3ca0:	0e 94 11 21 	call	0x4222	; 0x4222 <Display>
    3ca4:	63 cf       	rjmp	.-314    	; 0x3b6c <main+0x12a>
		case '2':		SetThreshold();		break;
    3ca6:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <SetThreshold>
    3caa:	60 cf       	rjmp	.-320    	; 0x3b6c <main+0x12a>

		default:	LCD_u8GoToRowCol(LCD_ROW3, LCD_COL0);
    3cac:	83 e0       	ldi	r24, 0x03	; 3
    3cae:	60 e0       	ldi	r22, 0x00	; 0
    3cb0:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
		LCD_u8SendString("Wrong Choice");
    3cb4:	81 eb       	ldi	r24, 0xB1	; 177
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	aa ef       	ldi	r26, 0xFA	; 250
    3cc2:	b3 e4       	ldi	r27, 0x43	; 67
    3cc4:	8b 87       	std	Y+11, r24	; 0x0b
    3cc6:	9c 87       	std	Y+12, r25	; 0x0c
    3cc8:	ad 87       	std	Y+13, r26	; 0x0d
    3cca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	4a e7       	ldi	r20, 0x7A	; 122
    3cda:	55 e4       	ldi	r21, 0x45	; 69
    3cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	8f 83       	std	Y+7, r24	; 0x07
    3ce6:	98 87       	std	Y+8, r25	; 0x08
    3ce8:	a9 87       	std	Y+9, r26	; 0x09
    3cea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cec:	6f 81       	ldd	r22, Y+7	; 0x07
    3cee:	78 85       	ldd	r23, Y+8	; 0x08
    3cf0:	89 85       	ldd	r24, Y+9	; 0x09
    3cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e8       	ldi	r20, 0x80	; 128
    3cfa:	5f e3       	ldi	r21, 0x3F	; 63
    3cfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d00:	88 23       	and	r24, r24
    3d02:	2c f4       	brge	.+10     	; 0x3d0e <main+0x2cc>
		__ticks = 1;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	9e 83       	std	Y+6, r25	; 0x06
    3d0a:	8d 83       	std	Y+5, r24	; 0x05
    3d0c:	3f c0       	rjmp	.+126    	; 0x3d8c <main+0x34a>
	else if (__tmp > 65535)
    3d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d10:	78 85       	ldd	r23, Y+8	; 0x08
    3d12:	89 85       	ldd	r24, Y+9	; 0x09
    3d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	3f ef       	ldi	r19, 0xFF	; 255
    3d1a:	4f e7       	ldi	r20, 0x7F	; 127
    3d1c:	57 e4       	ldi	r21, 0x47	; 71
    3d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d22:	18 16       	cp	r1, r24
    3d24:	4c f5       	brge	.+82     	; 0x3d78 <main+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	40 e2       	ldi	r20, 0x20	; 32
    3d34:	51 e4       	ldi	r21, 0x41	; 65
    3d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	bc 01       	movw	r22, r24
    3d40:	cd 01       	movw	r24, r26
    3d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	9e 83       	std	Y+6, r25	; 0x06
    3d4c:	8d 83       	std	Y+5, r24	; 0x05
    3d4e:	0f c0       	rjmp	.+30     	; 0x3d6e <main+0x32c>
    3d50:	80 e9       	ldi	r24, 0x90	; 144
    3d52:	91 e0       	ldi	r25, 0x01	; 1
    3d54:	9c 83       	std	Y+4, r25	; 0x04
    3d56:	8b 83       	std	Y+3, r24	; 0x03
    3d58:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <main+0x31a>
    3d60:	9c 83       	std	Y+4, r25	; 0x04
    3d62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d64:	8d 81       	ldd	r24, Y+5	; 0x05
    3d66:	9e 81       	ldd	r25, Y+6	; 0x06
    3d68:	01 97       	sbiw	r24, 0x01	; 1
    3d6a:	9e 83       	std	Y+6, r25	; 0x06
    3d6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d70:	9e 81       	ldd	r25, Y+6	; 0x06
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	69 f7       	brne	.-38     	; 0x3d50 <main+0x30e>
    3d76:	fa ce       	rjmp	.-524    	; 0x3b6c <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d78:	6f 81       	ldd	r22, Y+7	; 0x07
    3d7a:	78 85       	ldd	r23, Y+8	; 0x08
    3d7c:	89 85       	ldd	r24, Y+9	; 0x09
    3d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	9e 83       	std	Y+6, r25	; 0x06
    3d8a:	8d 83       	std	Y+5, r24	; 0x05
    3d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d90:	9a 83       	std	Y+2, r25	; 0x02
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	9a 81       	ldd	r25, Y+2	; 0x02
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	f1 f7       	brne	.-4      	; 0x3d98 <main+0x356>
    3d9c:	9a 83       	std	Y+2, r25	; 0x02
    3d9e:	89 83       	std	Y+1, r24	; 0x01
    3da0:	e5 ce       	rjmp	.-566    	; 0x3b6c <main+0x12a>

00003da2 <SetThreshold>:
	}

}

void SetThreshold (void)
{
    3da2:	0f 93       	push	r16
    3da4:	1f 93       	push	r17
    3da6:	df 93       	push	r29
    3da8:	cf 93       	push	r28
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	ae 97       	sbiw	r28, 0x2e	; 46
    3db0:	0f b6       	in	r0, 0x3f	; 63
    3db2:	f8 94       	cli
    3db4:	de bf       	out	0x3e, r29	; 62
    3db6:	0f be       	out	0x3f, r0	; 63
    3db8:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key[3] = {NOT_PRESSED}, Local_u8Iterator = 0;
    3dba:	83 e0       	ldi	r24, 0x03	; 3
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	bc 96       	adiw	r30, 0x2c	; 44
    3dc0:	df 01       	movw	r26, r30
    3dc2:	98 2f       	mov	r25, r24
    3dc4:	1d 92       	st	X+, r1
    3dc6:	9a 95       	dec	r25
    3dc8:	e9 f7       	brne	.-6      	; 0x3dc4 <SetThreshold+0x22>
    3dca:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_voidClearDisplay();
    3dcc:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <LCD_voidClearDisplay>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	a8 e4       	ldi	r26, 0x48	; 72
    3dd6:	b3 e4       	ldi	r27, 0x43	; 67
    3dd8:	8f a3       	std	Y+39, r24	; 0x27
    3dda:	98 a7       	std	Y+40, r25	; 0x28
    3ddc:	a9 a7       	std	Y+41, r26	; 0x29
    3dde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de0:	6f a1       	ldd	r22, Y+39	; 0x27
    3de2:	78 a5       	ldd	r23, Y+40	; 0x28
    3de4:	89 a5       	ldd	r24, Y+41	; 0x29
    3de6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	4a e7       	ldi	r20, 0x7A	; 122
    3dee:	55 e4       	ldi	r21, 0x45	; 69
    3df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	8b a3       	std	Y+35, r24	; 0x23
    3dfa:	9c a3       	std	Y+36, r25	; 0x24
    3dfc:	ad a3       	std	Y+37, r26	; 0x25
    3dfe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e00:	6b a1       	ldd	r22, Y+35	; 0x23
    3e02:	7c a1       	ldd	r23, Y+36	; 0x24
    3e04:	8d a1       	ldd	r24, Y+37	; 0x25
    3e06:	9e a1       	ldd	r25, Y+38	; 0x26
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e8       	ldi	r20, 0x80	; 128
    3e0e:	5f e3       	ldi	r21, 0x3F	; 63
    3e10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e14:	88 23       	and	r24, r24
    3e16:	2c f4       	brge	.+10     	; 0x3e22 <SetThreshold+0x80>
		__ticks = 1;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	9a a3       	std	Y+34, r25	; 0x22
    3e1e:	89 a3       	std	Y+33, r24	; 0x21
    3e20:	3f c0       	rjmp	.+126    	; 0x3ea0 <SetThreshold+0xfe>
	else if (__tmp > 65535)
    3e22:	6b a1       	ldd	r22, Y+35	; 0x23
    3e24:	7c a1       	ldd	r23, Y+36	; 0x24
    3e26:	8d a1       	ldd	r24, Y+37	; 0x25
    3e28:	9e a1       	ldd	r25, Y+38	; 0x26
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	3f ef       	ldi	r19, 0xFF	; 255
    3e2e:	4f e7       	ldi	r20, 0x7F	; 127
    3e30:	57 e4       	ldi	r21, 0x47	; 71
    3e32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e36:	18 16       	cp	r1, r24
    3e38:	4c f5       	brge	.+82     	; 0x3e8c <SetThreshold+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e3a:	6f a1       	ldd	r22, Y+39	; 0x27
    3e3c:	78 a5       	ldd	r23, Y+40	; 0x28
    3e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    3e40:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	40 e2       	ldi	r20, 0x20	; 32
    3e48:	51 e4       	ldi	r21, 0x41	; 65
    3e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	bc 01       	movw	r22, r24
    3e54:	cd 01       	movw	r24, r26
    3e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	9a a3       	std	Y+34, r25	; 0x22
    3e60:	89 a3       	std	Y+33, r24	; 0x21
    3e62:	0f c0       	rjmp	.+30     	; 0x3e82 <SetThreshold+0xe0>
    3e64:	80 e9       	ldi	r24, 0x90	; 144
    3e66:	91 e0       	ldi	r25, 0x01	; 1
    3e68:	98 a3       	std	Y+32, r25	; 0x20
    3e6a:	8f 8f       	std	Y+31, r24	; 0x1f
    3e6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e6e:	98 a1       	ldd	r25, Y+32	; 0x20
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	f1 f7       	brne	.-4      	; 0x3e70 <SetThreshold+0xce>
    3e74:	98 a3       	std	Y+32, r25	; 0x20
    3e76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e78:	89 a1       	ldd	r24, Y+33	; 0x21
    3e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	9a a3       	std	Y+34, r25	; 0x22
    3e80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e82:	89 a1       	ldd	r24, Y+33	; 0x21
    3e84:	9a a1       	ldd	r25, Y+34	; 0x22
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	69 f7       	brne	.-38     	; 0x3e64 <SetThreshold+0xc2>
    3e8a:	14 c0       	rjmp	.+40     	; 0x3eb4 <SetThreshold+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    3e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    3e90:	8d a1       	ldd	r24, Y+37	; 0x25
    3e92:	9e a1       	ldd	r25, Y+38	; 0x26
    3e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	9a a3       	std	Y+34, r25	; 0x22
    3e9e:	89 a3       	std	Y+33, r24	; 0x21
    3ea0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ea2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ea4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ea6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3eac:	01 97       	sbiw	r24, 0x01	; 1
    3eae:	f1 f7       	brne	.-4      	; 0x3eac <SetThreshold+0x10a>
    3eb0:	9e 8f       	std	Y+30, r25	; 0x1e
    3eb2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);

	LCD_u8GoToRowCol(LCD_ROW0, LCD_COL0);
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	60 e0       	ldi	r22, 0x00	; 0
    3eb8:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
	LCD_u8SendString("Enter Threshold:");
    3ebc:	8e eb       	ldi	r24, 0xBE	; 190
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
	LCD_u8GoToRowCol(LCD_ROW3, LCD_COL0);
    3ec4:	83 e0       	ldi	r24, 0x03	; 3
    3ec6:	60 e0       	ldi	r22, 0x00	; 0
    3ec8:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
	LCD_u8SendString("Press ON/C to enter");
    3ecc:	8f ec       	ldi	r24, 0xCF	; 207
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
	LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	60 e0       	ldi	r22, 0x00	; 0
    3ed8:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
    3edc:	14 c1       	rjmp	.+552    	; 0x4106 <SetThreshold+0x364>

	while(Local_u8Iterator < 3)
	{
		do
		{
			Local_u8Key[Local_u8Iterator] = KEYPAD_u8GetPressedKey();
    3ede:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ee0:	08 2f       	mov	r16, r24
    3ee2:	10 e0       	ldi	r17, 0x00	; 0
    3ee4:	0e 94 bc 10 	call	0x2178	; 0x2178 <KEYPAD_u8GetPressedKey>
    3ee8:	28 2f       	mov	r18, r24
    3eea:	ce 01       	movw	r24, r28
    3eec:	8c 96       	adiw	r24, 0x2c	; 44
    3eee:	fc 01       	movw	r30, r24
    3ef0:	e0 0f       	add	r30, r16
    3ef2:	f1 1f       	adc	r31, r17
    3ef4:	20 83       	st	Z, r18
			if(Local_u8Key[Local_u8Iterator] == '/' || Local_u8Key[Local_u8Iterator] == '*' ||
    3ef6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ef8:	28 2f       	mov	r18, r24
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	ce 01       	movw	r24, r28
    3efe:	8c 96       	adiw	r24, 0x2c	; 44
    3f00:	fc 01       	movw	r30, r24
    3f02:	e2 0f       	add	r30, r18
    3f04:	f3 1f       	adc	r31, r19
    3f06:	80 81       	ld	r24, Z
    3f08:	8f 32       	cpi	r24, 0x2F	; 47
    3f0a:	61 f1       	breq	.+88     	; 0x3f64 <SetThreshold+0x1c2>
    3f0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f0e:	28 2f       	mov	r18, r24
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	ce 01       	movw	r24, r28
    3f14:	8c 96       	adiw	r24, 0x2c	; 44
    3f16:	fc 01       	movw	r30, r24
    3f18:	e2 0f       	add	r30, r18
    3f1a:	f3 1f       	adc	r31, r19
    3f1c:	80 81       	ld	r24, Z
    3f1e:	8a 32       	cpi	r24, 0x2A	; 42
    3f20:	09 f1       	breq	.+66     	; 0x3f64 <SetThreshold+0x1c2>
    3f22:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	ce 01       	movw	r24, r28
    3f2a:	8c 96       	adiw	r24, 0x2c	; 44
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	e2 0f       	add	r30, r18
    3f30:	f3 1f       	adc	r31, r19
    3f32:	80 81       	ld	r24, Z
    3f34:	8d 32       	cpi	r24, 0x2D	; 45
    3f36:	b1 f0       	breq	.+44     	; 0x3f64 <SetThreshold+0x1c2>
    3f38:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f3a:	28 2f       	mov	r18, r24
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	ce 01       	movw	r24, r28
    3f40:	8c 96       	adiw	r24, 0x2c	; 44
    3f42:	fc 01       	movw	r30, r24
    3f44:	e2 0f       	add	r30, r18
    3f46:	f3 1f       	adc	r31, r19
    3f48:	80 81       	ld	r24, Z
    3f4a:	8b 32       	cpi	r24, 0x2B	; 43
    3f4c:	59 f0       	breq	.+22     	; 0x3f64 <SetThreshold+0x1c2>
    3f4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f50:	28 2f       	mov	r18, r24
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	ce 01       	movw	r24, r28
    3f56:	8c 96       	adiw	r24, 0x2c	; 44
    3f58:	fc 01       	movw	r30, r24
    3f5a:	e2 0f       	add	r30, r18
    3f5c:	f3 1f       	adc	r31, r19
    3f5e:	80 81       	ld	r24, Z
    3f60:	8d 33       	cpi	r24, 0x3D	; 61
    3f62:	49 f4       	brne	.+18     	; 0x3f76 <SetThreshold+0x1d4>
					Local_u8Key[Local_u8Iterator] == '-' || Local_u8Key[Local_u8Iterator] == '+' ||
					Local_u8Key[Local_u8Iterator] == '=')
			{
				Local_u8Key[Local_u8Iterator] = NOT_PRESSED;
    3f64:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f66:	28 2f       	mov	r18, r24
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	ce 01       	movw	r24, r28
    3f6c:	8c 96       	adiw	r24, 0x2c	; 44
    3f6e:	fc 01       	movw	r30, r24
    3f70:	e2 0f       	add	r30, r18
    3f72:	f3 1f       	adc	r31, r19
    3f74:	10 82       	st	Z, r1
			}

		}while(Local_u8Key[Local_u8Iterator] == NOT_PRESSED);
    3f76:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f78:	28 2f       	mov	r18, r24
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	8c 96       	adiw	r24, 0x2c	; 44
    3f80:	fc 01       	movw	r30, r24
    3f82:	e2 0f       	add	r30, r18
    3f84:	f3 1f       	adc	r31, r19
    3f86:	80 81       	ld	r24, Z
    3f88:	88 23       	and	r24, r24
    3f8a:	09 f4       	brne	.+2      	; 0x3f8e <SetThreshold+0x1ec>
    3f8c:	a8 cf       	rjmp	.-176    	; 0x3ede <SetThreshold+0x13c>

		if(Local_u8Key[Local_u8Iterator] == '.')
    3f8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f90:	28 2f       	mov	r18, r24
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	ce 01       	movw	r24, r28
    3f96:	8c 96       	adiw	r24, 0x2c	; 44
    3f98:	fc 01       	movw	r30, r24
    3f9a:	e2 0f       	add	r30, r18
    3f9c:	f3 1f       	adc	r31, r19
    3f9e:	80 81       	ld	r24, Z
    3fa0:	8e 32       	cpi	r24, 0x2E	; 46
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <SetThreshold+0x204>
    3fa4:	b4 c0       	rjmp	.+360    	; 0x410e <SetThreshold+0x36c>
			break;

		LCD_voidSendCharacter(Local_u8Key[Local_u8Iterator]);
    3fa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fa8:	28 2f       	mov	r18, r24
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	ce 01       	movw	r24, r28
    3fae:	8c 96       	adiw	r24, 0x2c	; 44
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	e2 0f       	add	r30, r18
    3fb4:	f3 1f       	adc	r31, r19
    3fb6:	80 81       	ld	r24, Z
    3fb8:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_voidSendCharacter>

		Local_u8Iterator++;
    3fbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fbe:	8f 5f       	subi	r24, 0xFF	; 255
    3fc0:	8b a7       	std	Y+43, r24	; 0x2b

		if(Local_u8Iterator >= 3)
    3fc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fc4:	83 30       	cpi	r24, 0x03	; 3
    3fc6:	08 f4       	brcc	.+2      	; 0x3fca <SetThreshold+0x228>
    3fc8:	9e c0       	rjmp	.+316    	; 0x4106 <SetThreshold+0x364>
		{
			u16Threshold = (u16)ConvertToint((const char*)Local_u8Key, Local_u8Iterator);
    3fca:	ce 01       	movw	r24, r28
    3fcc:	8c 96       	adiw	r24, 0x2c	; 44
    3fce:	6b a5       	ldd	r22, Y+43	; 0x2b
    3fd0:	0e 94 c3 1b 	call	0x3786	; 0x3786 <ConvertToint>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	90 93 6a 01 	sts	0x016A, r25
    3fdc:	80 93 69 01 	sts	0x0169, r24

			if(u16Threshold > 100)
    3fe0:	80 91 69 01 	lds	r24, 0x0169
    3fe4:	90 91 6a 01 	lds	r25, 0x016A
    3fe8:	85 36       	cpi	r24, 0x65	; 101
    3fea:	91 05       	cpc	r25, r1
    3fec:	08 f4       	brcc	.+2      	; 0x3ff0 <SetThreshold+0x24e>
    3fee:	8b c0       	rjmp	.+278    	; 0x4106 <SetThreshold+0x364>
			{
				LCD_u8GoToRowCol(LCD_ROW2, LCD_COL0);
    3ff0:	82 e0       	ldi	r24, 0x02	; 2
    3ff2:	60 e0       	ldi	r22, 0x00	; 0
    3ff4:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
				LCD_u8SendString("Wrong Per range");
    3ff8:	83 ee       	ldi	r24, 0xE3	; 227
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
				LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	60 e0       	ldi	r22, 0x00	; 0
    4004:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
				LCD_u8SendString("   ");
    4008:	83 ef       	ldi	r24, 0xF3	; 243
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
				LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
				StringReset((char*)Local_u8Key);
    4018:	ce 01       	movw	r24, r28
    401a:	8c 96       	adiw	r24, 0x2c	; 44
    401c:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <StringReset>
				Local_u8Iterator = 0;
    4020:	1b a6       	std	Y+43, r1	; 0x2b
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	a8 ec       	ldi	r26, 0xC8	; 200
    4028:	b3 e4       	ldi	r27, 0x43	; 67
    402a:	89 8f       	std	Y+25, r24	; 0x19
    402c:	9a 8f       	std	Y+26, r25	; 0x1a
    402e:	ab 8f       	std	Y+27, r26	; 0x1b
    4030:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4032:	69 8d       	ldd	r22, Y+25	; 0x19
    4034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	4a e7       	ldi	r20, 0x7A	; 122
    4040:	55 e4       	ldi	r21, 0x45	; 69
    4042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	8d 8b       	std	Y+21, r24	; 0x15
    404c:	9e 8b       	std	Y+22, r25	; 0x16
    404e:	af 8b       	std	Y+23, r26	; 0x17
    4050:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4052:	6d 89       	ldd	r22, Y+21	; 0x15
    4054:	7e 89       	ldd	r23, Y+22	; 0x16
    4056:	8f 89       	ldd	r24, Y+23	; 0x17
    4058:	98 8d       	ldd	r25, Y+24	; 0x18
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	40 e8       	ldi	r20, 0x80	; 128
    4060:	5f e3       	ldi	r21, 0x3F	; 63
    4062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4066:	88 23       	and	r24, r24
    4068:	2c f4       	brge	.+10     	; 0x4074 <SetThreshold+0x2d2>
		__ticks = 1;
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	9c 8b       	std	Y+20, r25	; 0x14
    4070:	8b 8b       	std	Y+19, r24	; 0x13
    4072:	3f c0       	rjmp	.+126    	; 0x40f2 <SetThreshold+0x350>
	else if (__tmp > 65535)
    4074:	6d 89       	ldd	r22, Y+21	; 0x15
    4076:	7e 89       	ldd	r23, Y+22	; 0x16
    4078:	8f 89       	ldd	r24, Y+23	; 0x17
    407a:	98 8d       	ldd	r25, Y+24	; 0x18
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	3f ef       	ldi	r19, 0xFF	; 255
    4080:	4f e7       	ldi	r20, 0x7F	; 127
    4082:	57 e4       	ldi	r21, 0x47	; 71
    4084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4088:	18 16       	cp	r1, r24
    408a:	4c f5       	brge	.+82     	; 0x40de <SetThreshold+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408c:	69 8d       	ldd	r22, Y+25	; 0x19
    408e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e2       	ldi	r20, 0x20	; 32
    409a:	51 e4       	ldi	r21, 0x41	; 65
    409c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	bc 01       	movw	r22, r24
    40a6:	cd 01       	movw	r24, r26
    40a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9c 8b       	std	Y+20, r25	; 0x14
    40b2:	8b 8b       	std	Y+19, r24	; 0x13
    40b4:	0f c0       	rjmp	.+30     	; 0x40d4 <SetThreshold+0x332>
    40b6:	80 e9       	ldi	r24, 0x90	; 144
    40b8:	91 e0       	ldi	r25, 0x01	; 1
    40ba:	9a 8b       	std	Y+18, r25	; 0x12
    40bc:	89 8b       	std	Y+17, r24	; 0x11
    40be:	89 89       	ldd	r24, Y+17	; 0x11
    40c0:	9a 89       	ldd	r25, Y+18	; 0x12
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	f1 f7       	brne	.-4      	; 0x40c2 <SetThreshold+0x320>
    40c6:	9a 8b       	std	Y+18, r25	; 0x12
    40c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ca:	8b 89       	ldd	r24, Y+19	; 0x13
    40cc:	9c 89       	ldd	r25, Y+20	; 0x14
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	9c 8b       	std	Y+20, r25	; 0x14
    40d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d4:	8b 89       	ldd	r24, Y+19	; 0x13
    40d6:	9c 89       	ldd	r25, Y+20	; 0x14
    40d8:	00 97       	sbiw	r24, 0x00	; 0
    40da:	69 f7       	brne	.-38     	; 0x40b6 <SetThreshold+0x314>
    40dc:	14 c0       	rjmp	.+40     	; 0x4106 <SetThreshold+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40de:	6d 89       	ldd	r22, Y+21	; 0x15
    40e0:	7e 89       	ldd	r23, Y+22	; 0x16
    40e2:	8f 89       	ldd	r24, Y+23	; 0x17
    40e4:	98 8d       	ldd	r25, Y+24	; 0x18
    40e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	9c 8b       	std	Y+20, r25	; 0x14
    40f0:	8b 8b       	std	Y+19, r24	; 0x13
    40f2:	8b 89       	ldd	r24, Y+19	; 0x13
    40f4:	9c 89       	ldd	r25, Y+20	; 0x14
    40f6:	98 8b       	std	Y+16, r25	; 0x10
    40f8:	8f 87       	std	Y+15, r24	; 0x0f
    40fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    40fc:	98 89       	ldd	r25, Y+16	; 0x10
    40fe:	01 97       	sbiw	r24, 0x01	; 1
    4100:	f1 f7       	brne	.-4      	; 0x40fe <SetThreshold+0x35c>
    4102:	98 8b       	std	Y+16, r25	; 0x10
    4104:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_u8SendString("Enter Threshold:");
	LCD_u8GoToRowCol(LCD_ROW3, LCD_COL0);
	LCD_u8SendString("Press ON/C to enter");
	LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);

	while(Local_u8Iterator < 3)
    4106:	8b a5       	ldd	r24, Y+43	; 0x2b
    4108:	83 30       	cpi	r24, 0x03	; 3
    410a:	08 f4       	brcc	.+2      	; 0x410e <SetThreshold+0x36c>
    410c:	e8 ce       	rjmp	.-560    	; 0x3ede <SetThreshold+0x13c>
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	a8 ec       	ldi	r26, 0xC8	; 200
    4114:	b3 e4       	ldi	r27, 0x43	; 67
    4116:	8b 87       	std	Y+11, r24	; 0x0b
    4118:	9c 87       	std	Y+12, r25	; 0x0c
    411a:	ad 87       	std	Y+13, r26	; 0x0d
    411c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    411e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4120:	7c 85       	ldd	r23, Y+12	; 0x0c
    4122:	8d 85       	ldd	r24, Y+13	; 0x0d
    4124:	9e 85       	ldd	r25, Y+14	; 0x0e
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	4a e7       	ldi	r20, 0x7A	; 122
    412c:	55 e4       	ldi	r21, 0x45	; 69
    412e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	8f 83       	std	Y+7, r24	; 0x07
    4138:	98 87       	std	Y+8, r25	; 0x08
    413a:	a9 87       	std	Y+9, r26	; 0x09
    413c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    413e:	6f 81       	ldd	r22, Y+7	; 0x07
    4140:	78 85       	ldd	r23, Y+8	; 0x08
    4142:	89 85       	ldd	r24, Y+9	; 0x09
    4144:	9a 85       	ldd	r25, Y+10	; 0x0a
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	40 e8       	ldi	r20, 0x80	; 128
    414c:	5f e3       	ldi	r21, 0x3F	; 63
    414e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4152:	88 23       	and	r24, r24
    4154:	2c f4       	brge	.+10     	; 0x4160 <SetThreshold+0x3be>
		__ticks = 1;
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	9e 83       	std	Y+6, r25	; 0x06
    415c:	8d 83       	std	Y+5, r24	; 0x05
    415e:	3f c0       	rjmp	.+126    	; 0x41de <SetThreshold+0x43c>
	else if (__tmp > 65535)
    4160:	6f 81       	ldd	r22, Y+7	; 0x07
    4162:	78 85       	ldd	r23, Y+8	; 0x08
    4164:	89 85       	ldd	r24, Y+9	; 0x09
    4166:	9a 85       	ldd	r25, Y+10	; 0x0a
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	3f ef       	ldi	r19, 0xFF	; 255
    416c:	4f e7       	ldi	r20, 0x7F	; 127
    416e:	57 e4       	ldi	r21, 0x47	; 71
    4170:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4174:	18 16       	cp	r1, r24
    4176:	4c f5       	brge	.+82     	; 0x41ca <SetThreshold+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4178:	6b 85       	ldd	r22, Y+11	; 0x0b
    417a:	7c 85       	ldd	r23, Y+12	; 0x0c
    417c:	8d 85       	ldd	r24, Y+13	; 0x0d
    417e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	40 e2       	ldi	r20, 0x20	; 32
    4186:	51 e4       	ldi	r21, 0x41	; 65
    4188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418c:	dc 01       	movw	r26, r24
    418e:	cb 01       	movw	r24, r22
    4190:	bc 01       	movw	r22, r24
    4192:	cd 01       	movw	r24, r26
    4194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	9e 83       	std	Y+6, r25	; 0x06
    419e:	8d 83       	std	Y+5, r24	; 0x05
    41a0:	0f c0       	rjmp	.+30     	; 0x41c0 <SetThreshold+0x41e>
    41a2:	80 e9       	ldi	r24, 0x90	; 144
    41a4:	91 e0       	ldi	r25, 0x01	; 1
    41a6:	9c 83       	std	Y+4, r25	; 0x04
    41a8:	8b 83       	std	Y+3, r24	; 0x03
    41aa:	8b 81       	ldd	r24, Y+3	; 0x03
    41ac:	9c 81       	ldd	r25, Y+4	; 0x04
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <SetThreshold+0x40c>
    41b2:	9c 83       	std	Y+4, r25	; 0x04
    41b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b6:	8d 81       	ldd	r24, Y+5	; 0x05
    41b8:	9e 81       	ldd	r25, Y+6	; 0x06
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	9e 83       	std	Y+6, r25	; 0x06
    41be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c0:	8d 81       	ldd	r24, Y+5	; 0x05
    41c2:	9e 81       	ldd	r25, Y+6	; 0x06
    41c4:	00 97       	sbiw	r24, 0x00	; 0
    41c6:	69 f7       	brne	.-38     	; 0x41a2 <SetThreshold+0x400>
    41c8:	14 c0       	rjmp	.+40     	; 0x41f2 <SetThreshold+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ca:	6f 81       	ldd	r22, Y+7	; 0x07
    41cc:	78 85       	ldd	r23, Y+8	; 0x08
    41ce:	89 85       	ldd	r24, Y+9	; 0x09
    41d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	9e 83       	std	Y+6, r25	; 0x06
    41dc:	8d 83       	std	Y+5, r24	; 0x05
    41de:	8d 81       	ldd	r24, Y+5	; 0x05
    41e0:	9e 81       	ldd	r25, Y+6	; 0x06
    41e2:	9a 83       	std	Y+2, r25	; 0x02
    41e4:	89 83       	std	Y+1, r24	; 0x01
    41e6:	89 81       	ldd	r24, Y+1	; 0x01
    41e8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <SetThreshold+0x448>
    41ee:	9a 83       	std	Y+2, r25	; 0x02
    41f0:	89 83       	std	Y+1, r24	; 0x01
		}

	}

	_delay_ms(400);
	u16Threshold = (u8)ConvertToint((const char*)Local_u8Key, Local_u8Iterator);
    41f2:	ce 01       	movw	r24, r28
    41f4:	8c 96       	adiw	r24, 0x2c	; 44
    41f6:	6b a5       	ldd	r22, Y+43	; 0x2b
    41f8:	0e 94 c3 1b 	call	0x3786	; 0x3786 <ConvertToint>
    41fc:	dc 01       	movw	r26, r24
    41fe:	cb 01       	movw	r24, r22
    4200:	88 2f       	mov	r24, r24
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	90 93 6a 01 	sts	0x016A, r25
    4208:	80 93 69 01 	sts	0x0169, r24

}
    420c:	ae 96       	adiw	r28, 0x2e	; 46
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	f8 94       	cli
    4212:	de bf       	out	0x3e, r29	; 62
    4214:	0f be       	out	0x3f, r0	; 63
    4216:	cd bf       	out	0x3d, r28	; 61
    4218:	cf 91       	pop	r28
    421a:	df 91       	pop	r29
    421c:	1f 91       	pop	r17
    421e:	0f 91       	pop	r16
    4220:	08 95       	ret

00004222 <Display>:

void Display (void)
{
    4222:	df 93       	push	r29
    4224:	cf 93       	push	r28
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	2f 97       	sbiw	r28, 0x0f	; 15
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	f8 94       	cli
    4230:	de bf       	out	0x3e, r29	; 62
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key = NOT_PRESSED;
    4236:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_voidClearDisplay();
    4238:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <LCD_voidClearDisplay>
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	a8 e4       	ldi	r26, 0x48	; 72
    4242:	b3 e4       	ldi	r27, 0x43	; 67
    4244:	8b 87       	std	Y+11, r24	; 0x0b
    4246:	9c 87       	std	Y+12, r25	; 0x0c
    4248:	ad 87       	std	Y+13, r26	; 0x0d
    424a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424c:	6b 85       	ldd	r22, Y+11	; 0x0b
    424e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4250:	8d 85       	ldd	r24, Y+13	; 0x0d
    4252:	9e 85       	ldd	r25, Y+14	; 0x0e
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	4a e7       	ldi	r20, 0x7A	; 122
    425a:	55 e4       	ldi	r21, 0x45	; 69
    425c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	8f 83       	std	Y+7, r24	; 0x07
    4266:	98 87       	std	Y+8, r25	; 0x08
    4268:	a9 87       	std	Y+9, r26	; 0x09
    426a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    426c:	6f 81       	ldd	r22, Y+7	; 0x07
    426e:	78 85       	ldd	r23, Y+8	; 0x08
    4270:	89 85       	ldd	r24, Y+9	; 0x09
    4272:	9a 85       	ldd	r25, Y+10	; 0x0a
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	40 e8       	ldi	r20, 0x80	; 128
    427a:	5f e3       	ldi	r21, 0x3F	; 63
    427c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4280:	88 23       	and	r24, r24
    4282:	2c f4       	brge	.+10     	; 0x428e <Display+0x6c>
		__ticks = 1;
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	9e 83       	std	Y+6, r25	; 0x06
    428a:	8d 83       	std	Y+5, r24	; 0x05
    428c:	3f c0       	rjmp	.+126    	; 0x430c <Display+0xea>
	else if (__tmp > 65535)
    428e:	6f 81       	ldd	r22, Y+7	; 0x07
    4290:	78 85       	ldd	r23, Y+8	; 0x08
    4292:	89 85       	ldd	r24, Y+9	; 0x09
    4294:	9a 85       	ldd	r25, Y+10	; 0x0a
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	3f ef       	ldi	r19, 0xFF	; 255
    429a:	4f e7       	ldi	r20, 0x7F	; 127
    429c:	57 e4       	ldi	r21, 0x47	; 71
    429e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42a2:	18 16       	cp	r1, r24
    42a4:	4c f5       	brge	.+82     	; 0x42f8 <Display+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	40 e2       	ldi	r20, 0x20	; 32
    42b4:	51 e4       	ldi	r21, 0x41	; 65
    42b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	bc 01       	movw	r22, r24
    42c0:	cd 01       	movw	r24, r26
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	9e 83       	std	Y+6, r25	; 0x06
    42cc:	8d 83       	std	Y+5, r24	; 0x05
    42ce:	0f c0       	rjmp	.+30     	; 0x42ee <Display+0xcc>
    42d0:	80 e9       	ldi	r24, 0x90	; 144
    42d2:	91 e0       	ldi	r25, 0x01	; 1
    42d4:	9c 83       	std	Y+4, r25	; 0x04
    42d6:	8b 83       	std	Y+3, r24	; 0x03
    42d8:	8b 81       	ldd	r24, Y+3	; 0x03
    42da:	9c 81       	ldd	r25, Y+4	; 0x04
    42dc:	01 97       	sbiw	r24, 0x01	; 1
    42de:	f1 f7       	brne	.-4      	; 0x42dc <Display+0xba>
    42e0:	9c 83       	std	Y+4, r25	; 0x04
    42e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e4:	8d 81       	ldd	r24, Y+5	; 0x05
    42e6:	9e 81       	ldd	r25, Y+6	; 0x06
    42e8:	01 97       	sbiw	r24, 0x01	; 1
    42ea:	9e 83       	std	Y+6, r25	; 0x06
    42ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ee:	8d 81       	ldd	r24, Y+5	; 0x05
    42f0:	9e 81       	ldd	r25, Y+6	; 0x06
    42f2:	00 97       	sbiw	r24, 0x00	; 0
    42f4:	69 f7       	brne	.-38     	; 0x42d0 <Display+0xae>
    42f6:	14 c0       	rjmp	.+40     	; 0x4320 <Display+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f8:	6f 81       	ldd	r22, Y+7	; 0x07
    42fa:	78 85       	ldd	r23, Y+8	; 0x08
    42fc:	89 85       	ldd	r24, Y+9	; 0x09
    42fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	9e 83       	std	Y+6, r25	; 0x06
    430a:	8d 83       	std	Y+5, r24	; 0x05
    430c:	8d 81       	ldd	r24, Y+5	; 0x05
    430e:	9e 81       	ldd	r25, Y+6	; 0x06
    4310:	9a 83       	std	Y+2, r25	; 0x02
    4312:	89 83       	std	Y+1, r24	; 0x01
    4314:	89 81       	ldd	r24, Y+1	; 0x01
    4316:	9a 81       	ldd	r25, Y+2	; 0x02
    4318:	01 97       	sbiw	r24, 0x01	; 1
    431a:	f1 f7       	brne	.-4      	; 0x4318 <Display+0xf6>
    431c:	9a 83       	std	Y+2, r25	; 0x02
    431e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	LCD_u8GoToRowCol(LCD_ROW0, LCD_COL0);
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	60 e0       	ldi	r22, 0x00	; 0
    4324:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
	LCD_u8SendString("Percentage:");
    4328:	87 ef       	ldi	r24, 0xF7	; 247
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
	LCD_u8GoToRowCol(LCD_ROW3, LCD_COL0);
    4330:	83 e0       	ldi	r24, 0x03	; 3
    4332:	60 e0       	ldi	r22, 0x00	; 0
    4334:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
	LCD_u8SendString("Press ON/C to return");
    4338:	83 e0       	ldi	r24, 0x03	; 3
    433a:	91 e0       	ldi	r25, 0x01	; 1
    433c:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
    4340:	0e c0       	rjmp	.+28     	; 0x435e <Display+0x13c>

	while(Local_u8Key != '.')
	{
		do
		{
			ADC_u8SingleConversionAsynch(ADC_CHANNEL0, &u16ADCdig, &LDR_percentage);
    4342:	25 e6       	ldi	r18, 0x65	; 101
    4344:	31 e0       	ldi	r19, 0x01	; 1
    4346:	4b eb       	ldi	r20, 0xBB	; 187
    4348:	51 e2       	ldi	r21, 0x21	; 33
    434a:	80 e0       	ldi	r24, 0x00	; 0
    434c:	b9 01       	movw	r22, r18
    434e:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_u8SingleConversionAsynch>
			Local_u8Key = KEYPAD_u8GetPressedKey();
    4352:	0e 94 bc 10 	call	0x2178	; 0x2178 <KEYPAD_u8GetPressedKey>
    4356:	8f 87       	std	Y+15, r24	; 0x0f
		}while(Local_u8Key == NOT_PRESSED);
    4358:	8f 85       	ldd	r24, Y+15	; 0x0f
    435a:	88 23       	and	r24, r24
    435c:	91 f3       	breq	.-28     	; 0x4342 <Display+0x120>
	LCD_u8GoToRowCol(LCD_ROW0, LCD_COL0);
	LCD_u8SendString("Percentage:");
	LCD_u8GoToRowCol(LCD_ROW3, LCD_COL0);
	LCD_u8SendString("Press ON/C to return");

	while(Local_u8Key != '.')
    435e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4360:	8e 32       	cpi	r24, 0x2E	; 46
    4362:	79 f7       	brne	.-34     	; 0x4342 <Display+0x120>
			ADC_u8SingleConversionAsynch(ADC_CHANNEL0, &u16ADCdig, &LDR_percentage);
			Local_u8Key = KEYPAD_u8GetPressedKey();
		}while(Local_u8Key == NOT_PRESSED);

	}
}
    4364:	2f 96       	adiw	r28, 0x0f	; 15
    4366:	0f b6       	in	r0, 0x3f	; 63
    4368:	f8 94       	cli
    436a:	de bf       	out	0x3e, r29	; 62
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	cd bf       	out	0x3d, r28	; 61
    4370:	cf 91       	pop	r28
    4372:	df 91       	pop	r29
    4374:	08 95       	ret

00004376 <LDR_percentage>:

void LDR_percentage(void)
{
    4376:	af 92       	push	r10
    4378:	bf 92       	push	r11
    437a:	cf 92       	push	r12
    437c:	df 92       	push	r13
    437e:	ef 92       	push	r14
    4380:	ff 92       	push	r15
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	df 93       	push	r29
    4388:	cf 93       	push	r28
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
	ADC_u8ConvertDigitalToAnalog(u16ADCdig, &u16ADCana);
    438e:	80 91 65 01 	lds	r24, 0x0165
    4392:	90 91 66 01 	lds	r25, 0x0166
    4396:	27 e6       	ldi	r18, 0x67	; 103
    4398:	31 e0       	ldi	r19, 0x01	; 1
    439a:	b9 01       	movw	r22, r18
    439c:	0e 94 8e 09 	call	0x131c	; 0x131c <ADC_u8ConvertDigitalToAnalog>
	LDR_u8GetValue(&u32LDR, u16ADCana);
    43a0:	20 91 67 01 	lds	r18, 0x0167
    43a4:	30 91 68 01 	lds	r19, 0x0168
    43a8:	8b e6       	ldi	r24, 0x6B	; 107
    43aa:	91 e0       	ldi	r25, 0x01	; 1
    43ac:	b9 01       	movw	r22, r18
    43ae:	0e 94 45 19 	call	0x328a	; 0x328a <LDR_u8GetValue>

	u8Percentage = (u8)s32Map(400, 66000, 0, 100, u32LDR);
    43b2:	80 91 6b 01 	lds	r24, 0x016B
    43b6:	90 91 6c 01 	lds	r25, 0x016C
    43ba:	a0 91 6d 01 	lds	r26, 0x016D
    43be:	b0 91 6e 01 	lds	r27, 0x016E
    43c2:	00 d0       	rcall	.+0      	; 0x43c4 <LDR_percentage+0x4e>
    43c4:	00 d0       	rcall	.+0      	; 0x43c6 <LDR_percentage+0x50>
    43c6:	ed b7       	in	r30, 0x3d	; 61
    43c8:	fe b7       	in	r31, 0x3e	; 62
    43ca:	31 96       	adiw	r30, 0x01	; 1
    43cc:	80 83       	st	Z, r24
    43ce:	91 83       	std	Z+1, r25	; 0x01
    43d0:	a2 83       	std	Z+2, r26	; 0x02
    43d2:	b3 83       	std	Z+3, r27	; 0x03
    43d4:	60 e9       	ldi	r22, 0x90	; 144
    43d6:	71 e0       	ldi	r23, 0x01	; 1
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	20 ed       	ldi	r18, 0xD0	; 208
    43de:	31 e0       	ldi	r19, 0x01	; 1
    43e0:	41 e0       	ldi	r20, 0x01	; 1
    43e2:	50 e0       	ldi	r21, 0x00	; 0
    43e4:	ee 24       	eor	r14, r14
    43e6:	ff 24       	eor	r15, r15
    43e8:	87 01       	movw	r16, r14
    43ea:	0f 2e       	mov	r0, r31
    43ec:	f4 e6       	ldi	r31, 0x64	; 100
    43ee:	af 2e       	mov	r10, r31
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	bf 2e       	mov	r11, r31
    43f4:	f0 e0       	ldi	r31, 0x00	; 0
    43f6:	cf 2e       	mov	r12, r31
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	df 2e       	mov	r13, r31
    43fc:	f0 2d       	mov	r31, r0
    43fe:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <s32Map>
    4402:	0f 90       	pop	r0
    4404:	0f 90       	pop	r0
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	80 93 64 01 	sts	0x0164, r24

	LCD_u8GoToRowCol(LCD_ROW0, LCD_COL14);
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	6e e0       	ldi	r22, 0x0E	; 14
    4416:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
	LCD_u8SendString("   ");
    441a:	83 ef       	ldi	r24, 0xF3	; 243
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
	LCD_u8GoToRowCol(LCD_ROW0, LCD_COL14);
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	6e e0       	ldi	r22, 0x0E	; 14
    4426:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
	LCD_voidSendNumber(u8Percentage);
    442a:	80 91 64 01 	lds	r24, 0x0164
    442e:	88 2f       	mov	r24, r24
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	a0 e0       	ldi	r26, 0x00	; 0
    4434:	b0 e0       	ldi	r27, 0x00	; 0
    4436:	bc 01       	movw	r22, r24
    4438:	cd 01       	movw	r24, r26
    443a:	0e 94 18 19 	call	0x3230	; 0x3230 <LCD_voidSendNumber>

	if(u8Percentage > (u8)u16Threshold)
    443e:	80 91 69 01 	lds	r24, 0x0169
    4442:	90 91 6a 01 	lds	r25, 0x016A
    4446:	98 2f       	mov	r25, r24
    4448:	80 91 64 01 	lds	r24, 0x0164
    444c:	98 17       	cp	r25, r24
    444e:	68 f4       	brcc	.+26     	; 0x446a <LDR_percentage+0xf4>
	{
		LED_u8On(DIO_PORTD, DIO_PIN0);
    4450:	83 e0       	ldi	r24, 0x03	; 3
    4452:	60 e0       	ldi	r22, 0x00	; 0
    4454:	0e 94 91 19 	call	0x3322	; 0x3322 <LED_u8On>
		LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	60 e0       	ldi	r22, 0x00	; 0
    445c:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
		LCD_u8SendString("LED is ON ");
    4460:	88 e1       	ldi	r24, 0x18	; 24
    4462:	91 e0       	ldi	r25, 0x01	; 1
    4464:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
    4468:	0c c0       	rjmp	.+24     	; 0x4482 <LDR_percentage+0x10c>
	}
	else
	{
		LED_u8Off(DIO_PORTD, DIO_PIN0);
    446a:	83 e0       	ldi	r24, 0x03	; 3
    446c:	60 e0       	ldi	r22, 0x00	; 0
    446e:	0e 94 b2 19 	call	0x3364	; 0x3364 <LED_u8Off>
		LCD_u8GoToRowCol(LCD_ROW1, LCD_COL0);
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	60 e0       	ldi	r22, 0x00	; 0
    4476:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_u8GoToRowCol>
		LCD_u8SendString("LED is OFF");
    447a:	83 e2       	ldi	r24, 0x23	; 35
    447c:	91 e0       	ldi	r25, 0x01	; 1
    447e:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_u8SendString>
	}
}
    4482:	cf 91       	pop	r28
    4484:	df 91       	pop	r29
    4486:	1f 91       	pop	r17
    4488:	0f 91       	pop	r16
    448a:	ff 90       	pop	r15
    448c:	ef 90       	pop	r14
    448e:	df 90       	pop	r13
    4490:	cf 90       	pop	r12
    4492:	bf 90       	pop	r11
    4494:	af 90       	pop	r10
    4496:	08 95       	ret

00004498 <__mulsi3>:
    4498:	62 9f       	mul	r22, r18
    449a:	d0 01       	movw	r26, r0
    449c:	73 9f       	mul	r23, r19
    449e:	f0 01       	movw	r30, r0
    44a0:	82 9f       	mul	r24, r18
    44a2:	e0 0d       	add	r30, r0
    44a4:	f1 1d       	adc	r31, r1
    44a6:	64 9f       	mul	r22, r20
    44a8:	e0 0d       	add	r30, r0
    44aa:	f1 1d       	adc	r31, r1
    44ac:	92 9f       	mul	r25, r18
    44ae:	f0 0d       	add	r31, r0
    44b0:	83 9f       	mul	r24, r19
    44b2:	f0 0d       	add	r31, r0
    44b4:	74 9f       	mul	r23, r20
    44b6:	f0 0d       	add	r31, r0
    44b8:	65 9f       	mul	r22, r21
    44ba:	f0 0d       	add	r31, r0
    44bc:	99 27       	eor	r25, r25
    44be:	72 9f       	mul	r23, r18
    44c0:	b0 0d       	add	r27, r0
    44c2:	e1 1d       	adc	r30, r1
    44c4:	f9 1f       	adc	r31, r25
    44c6:	63 9f       	mul	r22, r19
    44c8:	b0 0d       	add	r27, r0
    44ca:	e1 1d       	adc	r30, r1
    44cc:	f9 1f       	adc	r31, r25
    44ce:	bd 01       	movw	r22, r26
    44d0:	cf 01       	movw	r24, r30
    44d2:	11 24       	eor	r1, r1
    44d4:	08 95       	ret

000044d6 <__udivmodsi4>:
    44d6:	a1 e2       	ldi	r26, 0x21	; 33
    44d8:	1a 2e       	mov	r1, r26
    44da:	aa 1b       	sub	r26, r26
    44dc:	bb 1b       	sub	r27, r27
    44de:	fd 01       	movw	r30, r26
    44e0:	0d c0       	rjmp	.+26     	; 0x44fc <__udivmodsi4_ep>

000044e2 <__udivmodsi4_loop>:
    44e2:	aa 1f       	adc	r26, r26
    44e4:	bb 1f       	adc	r27, r27
    44e6:	ee 1f       	adc	r30, r30
    44e8:	ff 1f       	adc	r31, r31
    44ea:	a2 17       	cp	r26, r18
    44ec:	b3 07       	cpc	r27, r19
    44ee:	e4 07       	cpc	r30, r20
    44f0:	f5 07       	cpc	r31, r21
    44f2:	20 f0       	brcs	.+8      	; 0x44fc <__udivmodsi4_ep>
    44f4:	a2 1b       	sub	r26, r18
    44f6:	b3 0b       	sbc	r27, r19
    44f8:	e4 0b       	sbc	r30, r20
    44fa:	f5 0b       	sbc	r31, r21

000044fc <__udivmodsi4_ep>:
    44fc:	66 1f       	adc	r22, r22
    44fe:	77 1f       	adc	r23, r23
    4500:	88 1f       	adc	r24, r24
    4502:	99 1f       	adc	r25, r25
    4504:	1a 94       	dec	r1
    4506:	69 f7       	brne	.-38     	; 0x44e2 <__udivmodsi4_loop>
    4508:	60 95       	com	r22
    450a:	70 95       	com	r23
    450c:	80 95       	com	r24
    450e:	90 95       	com	r25
    4510:	9b 01       	movw	r18, r22
    4512:	ac 01       	movw	r20, r24
    4514:	bd 01       	movw	r22, r26
    4516:	cf 01       	movw	r24, r30
    4518:	08 95       	ret

0000451a <__divmodsi4>:
    451a:	97 fb       	bst	r25, 7
    451c:	09 2e       	mov	r0, r25
    451e:	05 26       	eor	r0, r21
    4520:	0e d0       	rcall	.+28     	; 0x453e <__divmodsi4_neg1>
    4522:	57 fd       	sbrc	r21, 7
    4524:	04 d0       	rcall	.+8      	; 0x452e <__divmodsi4_neg2>
    4526:	d7 df       	rcall	.-82     	; 0x44d6 <__udivmodsi4>
    4528:	0a d0       	rcall	.+20     	; 0x453e <__divmodsi4_neg1>
    452a:	00 1c       	adc	r0, r0
    452c:	38 f4       	brcc	.+14     	; 0x453c <__divmodsi4_exit>

0000452e <__divmodsi4_neg2>:
    452e:	50 95       	com	r21
    4530:	40 95       	com	r20
    4532:	30 95       	com	r19
    4534:	21 95       	neg	r18
    4536:	3f 4f       	sbci	r19, 0xFF	; 255
    4538:	4f 4f       	sbci	r20, 0xFF	; 255
    453a:	5f 4f       	sbci	r21, 0xFF	; 255

0000453c <__divmodsi4_exit>:
    453c:	08 95       	ret

0000453e <__divmodsi4_neg1>:
    453e:	f6 f7       	brtc	.-4      	; 0x453c <__divmodsi4_exit>
    4540:	90 95       	com	r25
    4542:	80 95       	com	r24
    4544:	70 95       	com	r23
    4546:	61 95       	neg	r22
    4548:	7f 4f       	sbci	r23, 0xFF	; 255
    454a:	8f 4f       	sbci	r24, 0xFF	; 255
    454c:	9f 4f       	sbci	r25, 0xFF	; 255
    454e:	08 95       	ret

00004550 <__prologue_saves__>:
    4550:	2f 92       	push	r2
    4552:	3f 92       	push	r3
    4554:	4f 92       	push	r4
    4556:	5f 92       	push	r5
    4558:	6f 92       	push	r6
    455a:	7f 92       	push	r7
    455c:	8f 92       	push	r8
    455e:	9f 92       	push	r9
    4560:	af 92       	push	r10
    4562:	bf 92       	push	r11
    4564:	cf 92       	push	r12
    4566:	df 92       	push	r13
    4568:	ef 92       	push	r14
    456a:	ff 92       	push	r15
    456c:	0f 93       	push	r16
    456e:	1f 93       	push	r17
    4570:	cf 93       	push	r28
    4572:	df 93       	push	r29
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	ca 1b       	sub	r28, r26
    457a:	db 0b       	sbc	r29, r27
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	f8 94       	cli
    4580:	de bf       	out	0x3e, r29	; 62
    4582:	0f be       	out	0x3f, r0	; 63
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	09 94       	ijmp

00004588 <__epilogue_restores__>:
    4588:	2a 88       	ldd	r2, Y+18	; 0x12
    458a:	39 88       	ldd	r3, Y+17	; 0x11
    458c:	48 88       	ldd	r4, Y+16	; 0x10
    458e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4590:	6e 84       	ldd	r6, Y+14	; 0x0e
    4592:	7d 84       	ldd	r7, Y+13	; 0x0d
    4594:	8c 84       	ldd	r8, Y+12	; 0x0c
    4596:	9b 84       	ldd	r9, Y+11	; 0x0b
    4598:	aa 84       	ldd	r10, Y+10	; 0x0a
    459a:	b9 84       	ldd	r11, Y+9	; 0x09
    459c:	c8 84       	ldd	r12, Y+8	; 0x08
    459e:	df 80       	ldd	r13, Y+7	; 0x07
    45a0:	ee 80       	ldd	r14, Y+6	; 0x06
    45a2:	fd 80       	ldd	r15, Y+5	; 0x05
    45a4:	0c 81       	ldd	r16, Y+4	; 0x04
    45a6:	1b 81       	ldd	r17, Y+3	; 0x03
    45a8:	aa 81       	ldd	r26, Y+2	; 0x02
    45aa:	b9 81       	ldd	r27, Y+1	; 0x01
    45ac:	ce 0f       	add	r28, r30
    45ae:	d1 1d       	adc	r29, r1
    45b0:	0f b6       	in	r0, 0x3f	; 63
    45b2:	f8 94       	cli
    45b4:	de bf       	out	0x3e, r29	; 62
    45b6:	0f be       	out	0x3f, r0	; 63
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	ed 01       	movw	r28, r26
    45bc:	08 95       	ret

000045be <_exit>:
    45be:	f8 94       	cli

000045c0 <__stop_program>:
    45c0:	ff cf       	rjmp	.-2      	; 0x45c0 <__stop_program>
